
AR3ControllerUSB_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000118b0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08011b50  08011b50  00021b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011f94  08011f94  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08011f94  08011f94  00021f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011f9c  08011f9c  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011f9c  08011f9c  00021f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011fa0  08011fa0  00021fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  24000000  08011fa4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003508  240002d8  0801227c  000302d8  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  240037e0  0801227c  000337e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030306  2**0
                  CONTENTS, READONLY
 13 .debug_info   000231e0  00000000  00000000  00030349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a80  00000000  00000000  00053529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af0  00000000  00000000  00057fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b7  00000000  00000000  00059aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ef80  00000000  00000000  0005af57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002612a  00000000  00000000  00099ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a793  00000000  00000000  000c0001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008164  00000000  00000000  0024a794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  002528f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d8 	.word	0x240002d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011b38 	.word	0x08011b38

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002dc 	.word	0x240002dc
 80002dc:	08011b38 	.word	0x08011b38

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <InitArm>:
JointState ArmJoints[JOINT_COUNT];
double_t find_home_speed = 0.2;

double_t max_speed = 0.5;

void InitArm(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af06      	add	r7, sp, #24
	InitJoint(&ArmJoints[0], 1, NOT_INVERT_PIN, J1D_GPIO_Port, J1D_Pin, J1P_GPIO_Port, J1P_Pin, JL1_GPIO_Port, JL1_Pin);
 80007be:	2304      	movs	r3, #4
 80007c0:	9304      	str	r3, [sp, #16]
 80007c2:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <InitArm+0xe8>)
 80007c4:	9303      	str	r3, [sp, #12]
 80007c6:	2380      	movs	r3, #128	; 0x80
 80007c8:	9302      	str	r3, [sp, #8]
 80007ca:	4b36      	ldr	r3, [pc, #216]	; (80008a4 <InitArm+0xec>)
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <InitArm+0xec>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	2101      	movs	r1, #1
 80007da:	4833      	ldr	r0, [pc, #204]	; (80008a8 <InitArm+0xf0>)
 80007dc:	f000 fc86 	bl	80010ec <InitJoint>
	InitJoint(&ArmJoints[1], 2, NOT_INVERT_PIN, J2D_GPIO_Port, J2D_Pin, J2P_GPIO_Port, J2P_Pin, JL2_GPIO_Port, JL2_Pin);
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	9304      	str	r3, [sp, #16]
 80007e6:	4b31      	ldr	r3, [pc, #196]	; (80008ac <InitArm+0xf4>)
 80007e8:	9303      	str	r3, [sp, #12]
 80007ea:	2308      	movs	r3, #8
 80007ec:	9302      	str	r3, [sp, #8]
 80007ee:	4b30      	ldr	r3, [pc, #192]	; (80008b0 <InitArm+0xf8>)
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <InitArm+0xec>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	2102      	movs	r1, #2
 80007fe:	482d      	ldr	r0, [pc, #180]	; (80008b4 <InitArm+0xfc>)
 8000800:	f000 fc74 	bl	80010ec <InitJoint>
	InitJointInvDir(&ArmJoints[2], 3, NOT_INVERT_PIN, J3D_GPIO_Port, J3D_Pin, J3P_GPIO_Port, J3P_Pin, JL3_GPIO_Port, JL3_Pin, INVERT_PIN);
 8000804:	2301      	movs	r3, #1
 8000806:	9305      	str	r3, [sp, #20]
 8000808:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800080c:	9304      	str	r3, [sp, #16]
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <InitArm+0xf4>)
 8000810:	9303      	str	r3, [sp, #12]
 8000812:	2320      	movs	r3, #32
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <InitArm+0xf8>)
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <InitArm+0xf8>)
 8000820:	2200      	movs	r2, #0
 8000822:	2103      	movs	r1, #3
 8000824:	4824      	ldr	r0, [pc, #144]	; (80008b8 <InitArm+0x100>)
 8000826:	f000 fc3f 	bl	80010a8 <InitJointInvDir>
	InitJointInvDir(&ArmJoints[3], 4, NOT_INVERT_PIN, J4D_GPIO_Port, J4D_Pin, J4P_GPIO_Port, J4P_Pin, JL4_GPIO_Port, JL4_Pin, INVERT_PIN);
 800082a:	2301      	movs	r3, #1
 800082c:	9305      	str	r3, [sp, #20]
 800082e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000832:	9304      	str	r3, [sp, #16]
 8000834:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <InitArm+0xf4>)
 8000836:	9303      	str	r3, [sp, #12]
 8000838:	2304      	movs	r3, #4
 800083a:	9302      	str	r3, [sp, #8]
 800083c:	4b1c      	ldr	r3, [pc, #112]	; (80008b0 <InitArm+0xf8>)
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2310      	movs	r3, #16
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <InitArm+0xf8>)
 8000846:	2200      	movs	r2, #0
 8000848:	2104      	movs	r1, #4
 800084a:	481c      	ldr	r0, [pc, #112]	; (80008bc <InitArm+0x104>)
 800084c:	f000 fc2c 	bl	80010a8 <InitJointInvDir>
	InitJointInvDir(&ArmJoints[4], 5, NOT_INVERT_PIN, J5D_GPIO_Port, J5D_Pin, J5P_GPIO_Port, J5P_Pin, JL5_GPIO_Port, JL5_Pin, INVERT_PIN);
 8000850:	2301      	movs	r3, #1
 8000852:	9305      	str	r3, [sp, #20]
 8000854:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000858:	9304      	str	r3, [sp, #16]
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <InitArm+0xf4>)
 800085c:	9303      	str	r3, [sp, #12]
 800085e:	2310      	movs	r3, #16
 8000860:	9302      	str	r3, [sp, #8]
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <InitArm+0xe8>)
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	2308      	movs	r3, #8
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <InitArm+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	2105      	movs	r1, #5
 8000870:	4813      	ldr	r0, [pc, #76]	; (80008c0 <InitArm+0x108>)
 8000872:	f000 fc19 	bl	80010a8 <InitJointInvDir>
	InitJoint(&ArmJoints[5], 6, NOT_INVERT_PIN, J6D_GPIO_Port, J6D_Pin, J6P_GPIO_Port, J6P_Pin, JL6_GPIO_Port, JL6_Pin);
 8000876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087a:	9304      	str	r3, [sp, #16]
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <InitArm+0xf4>)
 800087e:	9303      	str	r3, [sp, #12]
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <InitArm+0xe8>)
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2320      	movs	r3, #32
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <InitArm+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	2106      	movs	r1, #6
 8000892:	480c      	ldr	r0, [pc, #48]	; (80008c4 <InitArm+0x10c>)
 8000894:	f000 fc2a 	bl	80010ec <InitJoint>
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	58020c00 	.word	0x58020c00
 80008a4:	58021400 	.word	0x58021400
 80008a8:	240002f8 	.word	0x240002f8
 80008ac:	58020800 	.word	0x58020800
 80008b0:	58021000 	.word	0x58021000
 80008b4:	24000348 	.word	0x24000348
 80008b8:	24000398 	.word	0x24000398
 80008bc:	240003e8 	.word	0x240003e8
 80008c0:	24000438 	.word	0x24000438
 80008c4:	24000488 	.word	0x24000488

080008c8 <FindHomeJoint>:

void FindHomeJoint(JointNums num){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	if (!ArmJoints[num].init){
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	490a      	ldr	r1, [pc, #40]	; (8000900 <FindHomeJoint+0x38>)
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	440b      	add	r3, r1
 80008e0:	3316      	adds	r3, #22
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	f083 0301 	eor.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <FindHomeJoint+0x2e>
		FindHomeForce(num);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f807 	bl	8000904 <FindHomeForce>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	240002f8 	.word	0x240002f8

08000904 <FindHomeForce>:

void FindHomeForce(JointNums num){
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	InitProcStart(&ArmJoints[num], find_home_speed);
 800090e:	79fa      	ldrb	r2, [r7, #7]
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	4a06      	ldr	r2, [pc, #24]	; (8000934 <FindHomeForce+0x30>)
 800091a:	4413      	add	r3, r2
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <FindHomeForce+0x34>)
 800091e:	ed92 7b00 	vldr	d7, [r2]
 8000922:	eeb0 0b47 	vmov.f64	d0, d7
 8000926:	4618      	mov	r0, r3
 8000928:	f000 fd1c 	bl	8001364 <InitProcStart>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	240002f8 	.word	0x240002f8
 8000938:	24000008 	.word	0x24000008

0800093c <FindHomeArm>:

void FindHomeArm(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
	for(int i = 0; i < JOINT_COUNT; i++){
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
 8000946:	e007      	b.n	8000958 <FindHomeArm+0x1c>
		FindHomeJoint(i);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ffbb 	bl	80008c8 <FindHomeJoint>
	for(int i = 0; i < JOINT_COUNT; i++){
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3301      	adds	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b05      	cmp	r3, #5
 800095c:	ddf4      	ble.n	8000948 <FindHomeArm+0xc>
	}
}
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <FindHomeArmForce>:

void FindHomeArmForce(void){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	for(int i = 0; i < JOINT_COUNT; i++){
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	e007      	b.n	8000984 <FindHomeArmForce+0x1c>
		FindHomeForce(i);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	b2db      	uxtb	r3, r3
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffc3 	bl	8000904 <FindHomeForce>
	for(int i = 0; i < JOINT_COUNT; i++){
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	3301      	adds	r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b05      	cmp	r3, #5
 8000988:	ddf4      	ble.n	8000974 <FindHomeArmForce+0xc>
	}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <TickTimerChennel1>:

void TickTimerChennel1(void){
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	for(int i = 0; i < JOINT_COUNT; i++){
 800099a:	2300      	movs	r3, #0
 800099c:	607b      	str	r3, [r7, #4]
 800099e:	e00c      	b.n	80009ba <TickTimerChennel1+0x26>
		TickStepperChanel1(&ArmJoints[i]);
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4413      	add	r3, r2
 80009a8:	011b      	lsls	r3, r3, #4
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <TickTimerChennel1+0x38>)
 80009ac:	4413      	add	r3, r2
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 fd30 	bl	8001414 <TickStepperChanel1>
	for(int i = 0; i < JOINT_COUNT; i++){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3301      	adds	r3, #1
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b05      	cmp	r3, #5
 80009be:	ddef      	ble.n	80009a0 <TickTimerChennel1+0xc>
	}
}
 80009c0:	bf00      	nop
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	240002f8 	.word	0x240002f8

080009d0 <TickTimerChennel2>:

void TickTimerChennel2(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	bool prev_mooving = false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	71fb      	strb	r3, [r7, #7]
	bool mooving = false;
 80009da:	2300      	movs	r3, #0
 80009dc:	71bb      	strb	r3, [r7, #6]
	bool prev_init = false;
 80009de:	2300      	movs	r3, #0
 80009e0:	717b      	strb	r3, [r7, #5]
	bool init = false;
 80009e2:	2300      	movs	r3, #0
 80009e4:	713b      	strb	r3, [r7, #4]
	for(int i = 0; i < JOINT_COUNT; i++){
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	e050      	b.n	8000a8e <TickTimerChennel2+0xbe>
		prev_mooving |= ArmJoints[i].mooving;
 80009ec:	493d      	ldr	r1, [pc, #244]	; (8000ae4 <TickTimerChennel2+0x114>)
 80009ee:	683a      	ldr	r2, [r7, #0]
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	440b      	add	r3, r1
 80009fa:	3315      	adds	r3, #21
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
		prev_init |= ArmJoints[i].init_proc;
 8000a0e:	4935      	ldr	r1, [pc, #212]	; (8000ae4 <TickTimerChennel2+0x114>)
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4613      	mov	r3, r2
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	4413      	add	r3, r2
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	440b      	add	r3, r1
 8000a1c:	3317      	adds	r3, #23
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	797b      	ldrb	r3, [r7, #5]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	717b      	strb	r3, [r7, #5]
		TickStepperChanel2(&ArmJoints[i]);
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	4613      	mov	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4413      	add	r3, r2
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <TickTimerChennel2+0x114>)
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 fd1f 	bl	8001482 <TickStepperChanel2>
		mooving |= ArmJoints[i].mooving;
 8000a44:	4927      	ldr	r1, [pc, #156]	; (8000ae4 <TickTimerChennel2+0x114>)
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	009b      	lsls	r3, r3, #2
 8000a4c:	4413      	add	r3, r2
 8000a4e:	011b      	lsls	r3, r3, #4
 8000a50:	440b      	add	r3, r1
 8000a52:	3315      	adds	r3, #21
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	79bb      	ldrb	r3, [r7, #6]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	71bb      	strb	r3, [r7, #6]
		init |= ArmJoints[i].init_proc;
 8000a66:	491f      	ldr	r1, [pc, #124]	; (8000ae4 <TickTimerChennel2+0x114>)
 8000a68:	683a      	ldr	r2, [r7, #0]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	011b      	lsls	r3, r3, #4
 8000a72:	440b      	add	r3, r1
 8000a74:	3317      	adds	r3, #23
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	793b      	ldrb	r3, [r7, #4]
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	713b      	strb	r3, [r7, #4]
	for(int i = 0; i < JOINT_COUNT; i++){
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b05      	cmp	r3, #5
 8000a92:	ddab      	ble.n	80009ec <TickTimerChennel2+0x1c>
	}
	if (prev_mooving && !mooving && !prev_init){
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d014      	beq.n	8000ac4 <TickTimerChennel2+0xf4>
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	f083 0301 	eor.w	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00e      	beq.n	8000ac4 <TickTimerChennel2+0xf4>
 8000aa6:	797b      	ldrb	r3, [r7, #5]
 8000aa8:	f083 0301 	eor.w	r3, r3, #1
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d008      	beq.n	8000ac4 <TickTimerChennel2+0xf4>
		MoveEndMessage();
 8000ab2:	f000 fa7b 	bl	8000fac <MoveEndMessage>
		if (PathMoving()){
 8000ab6:	f001 fc5f 	bl	8002378 <PathMoving>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <TickTimerChennel2+0xf4>
			PathStep();
 8000ac0:	f001 fc66 	bl	8002390 <PathStep>
		}
	}
	if (prev_init && !init){
 8000ac4:	797b      	ldrb	r3, [r7, #5]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <TickTimerChennel2+0x10a>
 8000aca:	793b      	ldrb	r3, [r7, #4]
 8000acc:	f083 0301 	eor.w	r3, r3, #1
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <TickTimerChennel2+0x10a>
		FindedHome();
 8000ad6:	f000 fa03 	bl	8000ee0 <FindedHome>
	}
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	240002f8 	.word	0x240002f8

08000ae8 <SetTargetPointEqSpeed>:

void SetTargetPosition(JointNums num, int32_t position){
	SetTarget(&ArmJoints[num], position);
}

void SetTargetPointEqSpeed(int32_t j1, int32_t j2, int32_t j3, int32_t j4, int32_t j5, int32_t j6){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]
	uint32_t maxd = 0;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint32_t d1 = abs(j1 - ArmJoints[JOINT1].current_possition);
 8000afa:	4b78      	ldr	r3, [pc, #480]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bfb8      	it	lt
 8000b06:	425b      	neglt	r3, r3
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
	if (d1 > maxd){
 8000b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d901      	bls.n	8000b16 <SetTargetPointEqSpeed+0x2e>
		maxd = d1;
 8000b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t d2 = abs(j2 - ArmJoints[JOINT2].current_possition);
 8000b16:	4b71      	ldr	r3, [pc, #452]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
	if (d2 > maxd){
 8000b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d901      	bls.n	8000b32 <SetTargetPointEqSpeed+0x4a>
		maxd = d2;
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t d3 = abs(j3 - ArmJoints[JOINT3].current_possition);
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000b34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bfb8      	it	lt
 8000b40:	425b      	neglt	r3, r3
 8000b42:	623b      	str	r3, [r7, #32]
	if (d3 > maxd){
 8000b44:	6a3a      	ldr	r2, [r7, #32]
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d901      	bls.n	8000b50 <SetTargetPointEqSpeed+0x68>
		maxd = d3;
 8000b4c:	6a3b      	ldr	r3, [r7, #32]
 8000b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t d4 = abs(j4 - ArmJoints[JOINT4].current_possition);
 8000b50:	4b62      	ldr	r3, [pc, #392]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	1ad3      	subs	r3, r2, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	61fb      	str	r3, [r7, #28]
	if (d4 > maxd){
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b66:	429a      	cmp	r2, r3
 8000b68:	d901      	bls.n	8000b6e <SetTargetPointEqSpeed+0x86>
		maxd = d4;
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t d5 = abs(j5 - ArmJoints[JOINT5].current_possition);
 8000b6e:	4b5b      	ldr	r3, [pc, #364]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000b70:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8000b74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	bfb8      	it	lt
 8000b7c:	425b      	neglt	r3, r3
 8000b7e:	61bb      	str	r3, [r7, #24]
	if (d5 > maxd){
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d901      	bls.n	8000b8c <SetTargetPointEqSpeed+0xa4>
		maxd = d5;
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	uint32_t d6 = abs(j6 - ArmJoints[JOINT6].current_possition);
 8000b8c:	4b53      	ldr	r3, [pc, #332]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000b8e:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000b92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	617b      	str	r3, [r7, #20]
	if (d6 > maxd){
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d901      	bls.n	8000baa <SetTargetPointEqSpeed+0xc2>
		maxd = d6;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	if (maxd == 0) return;
 8000baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 8091 	beq.w	8000cd4 <SetTargetPointEqSpeed+0x1ec>
	ArmJoints[JOINT1].stepper.speed_step = (double)max_speed * ((double)d1 / (double)maxd);
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	ee07 3a90 	vmov	s15, r3
 8000bc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bc6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000bca:	4b45      	ldr	r3, [pc, #276]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bd4:	4b41      	ldr	r3, [pc, #260]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000bd6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	ArmJoints[JOINT2].stepper.speed_step = (double)max_speed * ((double)d2 / (double)maxd);
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	ee07 3a90 	vmov	s15, r3
 8000be0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bee:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000bf2:	4b3b      	ldr	r3, [pc, #236]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000bf4:	ed93 7b00 	vldr	d7, [r3]
 8000bf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bfc:	4b37      	ldr	r3, [pc, #220]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000bfe:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	ArmJoints[JOINT3].stepper.speed_step = (double)max_speed * ((double)d3 / (double)maxd);
 8000c02:	6a3b      	ldr	r3, [r7, #32]
 8000c04:	ee07 3a90 	vmov	s15, r3
 8000c08:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	ee07 3a90 	vmov	s15, r3
 8000c12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c16:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c1a:	4b31      	ldr	r3, [pc, #196]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000c1c:	ed93 7b00 	vldr	d7, [r3]
 8000c20:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c24:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000c26:	ed83 7b32 	vstr	d7, [r3, #200]	; 0xc8
	ArmJoints[JOINT4].stepper.speed_step = (double)max_speed * ((double)d4 / (double)maxd);
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c36:	ee07 3a90 	vmov	s15, r3
 8000c3a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c3e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000c44:	ed93 7b00 	vldr	d7, [r3]
 8000c48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c4c:	4b23      	ldr	r3, [pc, #140]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000c4e:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
	ArmJoints[JOINT5].stepper.speed_step = (double)max_speed * ((double)d5 / (double)maxd);
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5e:	ee07 3a90 	vmov	s15, r3
 8000c62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c66:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000c6c:	ed93 7b00 	vldr	d7, [r3]
 8000c70:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000c76:	ed83 7b5a 	vstr	d7, [r3, #360]	; 0x168
	ArmJoints[JOINT6].stepper.speed_step = (double)max_speed * ((double)d6 / (double)maxd);
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c86:	ee07 3a90 	vmov	s15, r3
 8000c8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000c8e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <SetTargetPointEqSpeed+0x1f8>)
 8000c94:	ed93 7b00 	vldr	d7, [r3]
 8000c98:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000c9e:	ed83 7b6e 	vstr	d7, [r3, #440]	; 0x1b8
	SetTarget(&ArmJoints[JOINT1], j1);
 8000ca2:	68f9      	ldr	r1, [r7, #12]
 8000ca4:	480d      	ldr	r0, [pc, #52]	; (8000cdc <SetTargetPointEqSpeed+0x1f4>)
 8000ca6:	f000 fb23 	bl	80012f0 <SetTarget>
	SetTarget(&ArmJoints[JOINT2], j2);
 8000caa:	68b9      	ldr	r1, [r7, #8]
 8000cac:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <SetTargetPointEqSpeed+0x1fc>)
 8000cae:	f000 fb1f 	bl	80012f0 <SetTarget>
	SetTarget(&ArmJoints[JOINT3], j3);
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <SetTargetPointEqSpeed+0x200>)
 8000cb6:	f000 fb1b 	bl	80012f0 <SetTarget>
	SetTarget(&ArmJoints[JOINT4], j4);
 8000cba:	6839      	ldr	r1, [r7, #0]
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <SetTargetPointEqSpeed+0x204>)
 8000cbe:	f000 fb17 	bl	80012f0 <SetTarget>
	SetTarget(&ArmJoints[JOINT5], j5);
 8000cc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cc4:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <SetTargetPointEqSpeed+0x208>)
 8000cc6:	f000 fb13 	bl	80012f0 <SetTarget>
	SetTarget(&ArmJoints[JOINT6], j6);
 8000cca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <SetTargetPointEqSpeed+0x20c>)
 8000cce:	f000 fb0f 	bl	80012f0 <SetTarget>
 8000cd2:	e000      	b.n	8000cd6 <SetTargetPointEqSpeed+0x1ee>
	if (maxd == 0) return;
 8000cd4:	bf00      	nop
}
 8000cd6:	3730      	adds	r7, #48	; 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	240002f8 	.word	0x240002f8
 8000ce0:	24000010 	.word	0x24000010
 8000ce4:	24000348 	.word	0x24000348
 8000ce8:	24000398 	.word	0x24000398
 8000cec:	240003e8 	.word	0x240003e8
 8000cf0:	24000438 	.word	0x24000438
 8000cf4:	24000488 	.word	0x24000488

08000cf8 <SetBackToZeroJoint>:
	SetTarget(&ArmJoints[JOINT4], j4);
	SetTarget(&ArmJoints[JOINT5], j5);
	SetTarget(&ArmJoints[JOINT6], j6);
}

void SetBackToZeroJoint(JointNums num, int btz){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
	ArmJoints[num].back_to_home = btz;
 8000d04:	79fa      	ldrb	r2, [r7, #7]
 8000d06:	4907      	ldr	r1, [pc, #28]	; (8000d24 <SetBackToZeroJoint+0x2c>)
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	440b      	add	r3, r1
 8000d12:	330c      	adds	r3, #12
 8000d14:	683a      	ldr	r2, [r7, #0]
 8000d16:	601a      	str	r2, [r3, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	240002f8 	.word	0x240002f8

08000d28 <SetFullStepsJoint>:

void SetFullStepsJoint(JointNums num, int fs){
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
	ArmJoints[num].full_steps = fs;
 8000d34:	79fa      	ldrb	r2, [r7, #7]
 8000d36:	4907      	ldr	r1, [pc, #28]	; (8000d54 <SetFullStepsJoint+0x2c>)
 8000d38:	4613      	mov	r3, r2
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	4413      	add	r3, r2
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	440b      	add	r3, r1
 8000d42:	3310      	adds	r3, #16
 8000d44:	683a      	ldr	r2, [r7, #0]
 8000d46:	601a      	str	r2, [r3, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	240002f8 	.word	0x240002f8

08000d58 <SetFindHomeSpeed>:

void SetFindHomeSpeed(double fhs){
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	ed87 0b00 	vstr	d0, [r7]
	find_home_speed = fhs;
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <SetFindHomeSpeed+0x20>)
 8000d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d68:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	24000008 	.word	0x24000008

08000d7c <SetMaxSpeed>:

void SetMaxSpeed(double ms){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	ed87 0b00 	vstr	d0, [r7]
	max_speed = ms;
 8000d86:	4905      	ldr	r1, [pc, #20]	; (8000d9c <SetMaxSpeed+0x20>)
 8000d88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d8c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	24000010 	.word	0x24000010

08000da0 <ReportJointState>:

void ReportJointPosition(JointNums num){
	JointPosition(num, ArmJoints[num].current_possition);
}

void ReportJointState(JointNums num){
 8000da0:	b5b0      	push	{r4, r5, r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
	JointStateMessage(num, ArmJoints[num].init, ArmJoints[num].back_to_home, ArmJoints[num].current_possition, ArmJoints[num].stepper.speed_step * CLOCK_STEP);
 8000daa:	79fa      	ldrb	r2, [r7, #7]
 8000dac:	491c      	ldr	r1, [pc, #112]	; (8000e20 <ReportJointState+0x80>)
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	011b      	lsls	r3, r3, #4
 8000db6:	440b      	add	r3, r1
 8000db8:	3316      	adds	r3, #22
 8000dba:	7819      	ldrb	r1, [r3, #0]
 8000dbc:	79fa      	ldrb	r2, [r7, #7]
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <ReportJointState+0x80>)
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	4413      	add	r3, r2
 8000dc6:	011b      	lsls	r3, r3, #4
 8000dc8:	4403      	add	r3, r0
 8000dca:	330c      	adds	r3, #12
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	461d      	mov	r5, r3
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	4813      	ldr	r0, [pc, #76]	; (8000e20 <ReportJointState+0x80>)
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	011b      	lsls	r3, r3, #4
 8000ddc:	4403      	add	r3, r0
 8000dde:	3304      	adds	r3, #4
 8000de0:	681c      	ldr	r4, [r3, #0]
 8000de2:	79fa      	ldrb	r2, [r7, #7]
 8000de4:	480e      	ldr	r0, [pc, #56]	; (8000e20 <ReportJointState+0x80>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4403      	add	r3, r0
 8000df0:	3328      	adds	r3, #40	; 0x28
 8000df2:	ed93 7b00 	vldr	d7, [r3]
 8000df6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000e18 <ReportJointState+0x78>
 8000dfa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dfe:	79f8      	ldrb	r0, [r7, #7]
 8000e00:	eeb0 0b47 	vmov.f64	d0, d7
 8000e04:	4623      	mov	r3, r4
 8000e06:	462a      	mov	r2, r5
 8000e08:	f000 f898 	bl	8000f3c <JointStateMessage>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bdb0      	pop	{r4, r5, r7, pc}
 8000e14:	f3af 8000 	nop.w
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	40c38800 	.word	0x40c38800
 8000e20:	240002f8 	.word	0x240002f8
 8000e24:	00000000 	.word	0x00000000

08000e28 <ReportJointsState>:

void ReportJointsState(void){
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
	for(int i = 0; i < JOINT_COUNT; i++){
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e034      	b.n	8000e9e <ReportJointsState+0x76>
		JointStateMessage(i, ArmJoints[i].init, ArmJoints[i].back_to_home, ArmJoints[i].current_possition, ArmJoints[i].stepper.speed_step * CLOCK_STEP);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	b2d8      	uxtb	r0, r3
 8000e38:	491f      	ldr	r1, [pc, #124]	; (8000eb8 <ReportJointsState+0x90>)
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	4413      	add	r3, r2
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	440b      	add	r3, r1
 8000e46:	3316      	adds	r3, #22
 8000e48:	7819      	ldrb	r1, [r3, #0]
 8000e4a:	4c1b      	ldr	r4, [pc, #108]	; (8000eb8 <ReportJointsState+0x90>)
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	4613      	mov	r3, r2
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	4413      	add	r3, r2
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4423      	add	r3, r4
 8000e58:	330c      	adds	r3, #12
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	461e      	mov	r6, r3
 8000e5e:	4c16      	ldr	r4, [pc, #88]	; (8000eb8 <ReportJointsState+0x90>)
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	4613      	mov	r3, r2
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	4413      	add	r3, r2
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	4423      	add	r3, r4
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	4d11      	ldr	r5, [pc, #68]	; (8000eb8 <ReportJointsState+0x90>)
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	4613      	mov	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	011b      	lsls	r3, r3, #4
 8000e7c:	442b      	add	r3, r5
 8000e7e:	3328      	adds	r3, #40	; 0x28
 8000e80:	ed93 7b00 	vldr	d7, [r3]
 8000e84:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000eb0 <ReportJointsState+0x88>
 8000e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e8c:	eeb0 0b47 	vmov.f64	d0, d7
 8000e90:	4623      	mov	r3, r4
 8000e92:	4632      	mov	r2, r6
 8000e94:	f000 f852 	bl	8000f3c <JointStateMessage>
	for(int i = 0; i < JOINT_COUNT; i++){
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b05      	cmp	r3, #5
 8000ea2:	ddc7      	ble.n	8000e34 <ReportJointsState+0xc>
	}

}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	40c38800 	.word	0x40c38800
 8000eb8:	240002f8 	.word	0x240002f8

08000ebc <SendMessage>:
#include "stdlib.h"
#include "joint.h"
#include "stdbool.h"
#include "math.h"

void SendMessage(char *msg){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//uint8_t res = USBD_BUSY;
	//while (res == USBD_BUSY){
	CDC_Transmit((uint8_t *)msg, strlen((char *)msg));
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fa5b 	bl	8000380 <strlen>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	b29b      	uxth	r3, r3
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f00d fb3d 	bl	800e550 <CDC_Transmit>
	//}
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <FindedHome>:

void FindedHome(void){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
	char *msg = "fh_end\n";
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <FindedHome+0x18>)
 8000ee8:	607b      	str	r3, [r7, #4]
	SendMessage(msg);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffe6 	bl	8000ebc <SendMessage>
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	08011b50 	.word	0x08011b50

08000efc <JointFindedHome>:

void JointFindedHome(JointNums joint){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	char msg[10];
	memset(&msg, '\0', 10);
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	220a      	movs	r2, #10
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f00e fd7f 	bl	800fa12 <memset>
	sprintf(&msg, "fh%i_end\n", joint + 1);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4906      	ldr	r1, [pc, #24]	; (8000f38 <JointFindedHome+0x3c>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f00e fd14 	bl	800f94c <siprintf>
	SendMessage(&msg);
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffc7 	bl	8000ebc <SendMessage>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	08011b58 	.word	0x08011b58

08000f3c <JointStateMessage>:
	memset(&msg, '\0', 15);
	sprintf(&msg, "j%i %i\n", joint + 1, pos);
	SendMessage(&msg);
}

void JointStateMessage(JointNums joint, bool _init, uint32_t stb, int32_t pos, double_t speed){
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b0a5      	sub	sp, #148	; 0x94
 8000f40:	af04      	add	r7, sp, #16
 8000f42:	613a      	str	r2, [r7, #16]
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	ed87 0b00 	vstr	d0, [r7]
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	75fb      	strb	r3, [r7, #23]
 8000f4e:	460b      	mov	r3, r1
 8000f50:	75bb      	strb	r3, [r7, #22]
	char msg[100];
	memset(&msg, '\0', 100);
 8000f52:	f107 0318 	add.w	r3, r7, #24
 8000f56:	2264      	movs	r2, #100	; 0x64
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f00e fd59 	bl	800fa12 <memset>
	char i = _init ? '1' : '0';
 8000f60:	7dbb      	ldrb	r3, [r7, #22]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <JointStateMessage+0x2e>
 8000f66:	2331      	movs	r3, #49	; 0x31
 8000f68:	e000      	b.n	8000f6c <JointStateMessage+0x30>
 8000f6a:	2330      	movs	r3, #48	; 0x30
 8000f6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	sprintf(&msg, "st%i %c %i 0 %i %f\n", joint + 1, i, stb, pos, speed);
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	1c59      	adds	r1, r3, #1
 8000f74:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8000f78:	f107 0018 	add.w	r0, r7, #24
 8000f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	460a      	mov	r2, r1
 8000f90:	4905      	ldr	r1, [pc, #20]	; (8000fa8 <JointStateMessage+0x6c>)
 8000f92:	f00e fcdb 	bl	800f94c <siprintf>
	SendMessage(&msg);
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ff8e 	bl	8000ebc <SendMessage>
}
 8000fa0:	bf00      	nop
 8000fa2:	3784      	adds	r7, #132	; 0x84
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	08011b6c 	.word	0x08011b6c

08000fac <MoveEndMessage>:

void MoveEndMessage(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	char *msg = "m_end\n";
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <MoveEndMessage+0x18>)
 8000fb4:	607b      	str	r3, [r7, #4]
	SendMessage(msg);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff80 	bl	8000ebc <SendMessage>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	08011b80 	.word	0x08011b80

08000fc8 <BlockMoveEndMessage>:

void BlockMoveEndMessage(void){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	char *msg = "b_end\n";
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <BlockMoveEndMessage+0x18>)
 8000fd0:	607b      	str	r3, [r7, #4]
	SendMessage(msg);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff72 	bl	8000ebc <SendMessage>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	08011b88 	.word	0x08011b88

08000fe4 <PongMessage>:

void PongMessage(void){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	char *msg = "PP\n";
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <PongMessage+0x18>)
 8000fec:	607b      	str	r3, [r7, #4]
	SendMessage(msg);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff64 	bl	8000ebc <SendMessage>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08011b90 	.word	0x08011b90

08001000 <InitJointInvDirStep>:
		uint16_t pin_step,
		GPIO_TypeDef *port_limit,
		uint16_t pin_limit,
		InvertPinType inv_dir,
		InvertPinType inv_step)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	460b      	mov	r3, r1
 800100c:	72fb      	strb	r3, [r7, #11]
 800100e:	4613      	mov	r3, r2
 8001010:	72bb      	strb	r3, [r7, #10]
	joint->number = num;
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	7afa      	ldrb	r2, [r7, #11]
 8001016:	701a      	strb	r2, [r3, #0]
	joint->current_possition = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
	joint->target_possition = 0;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
	joint->invert_direction = invert_direction;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	7aba      	ldrb	r2, [r7, #10]
 8001028:	751a      	strb	r2, [r3, #20]
	joint->back_to_home = 500;
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001030:	60da      	str	r2, [r3, #12]
	joint->stepper.inc_step = 0;
 8001032:	68f9      	ldr	r1, [r7, #12]
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	joint->stepper.speed_step = 0.05;
 8001040:	68f9      	ldr	r1, [r7, #12]
 8001042:	a317      	add	r3, pc, #92	; (adr r3, 80010a0 <InitJointInvDirStep+0xa0>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	joint->stepper.direction = 0;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	joint->stepper.port_dir = port_dir;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
	joint->stepper.pin_dir = pin_dir;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	8b3a      	ldrh	r2, [r7, #24]
 800105e:	871a      	strh	r2, [r3, #56]	; 0x38
	joint->stepper.port_step = port_step;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c
	joint->stepper.pin_step = pin_step;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8c3a      	ldrh	r2, [r7, #32]
 800106a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	joint->stepper.port_limit = port_limit;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
	joint->stepper.pin_limit = pin_limit;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001078:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	joint->stepper.invert_dir = inv_dir;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001082:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	joint->stepper.invert_step = inv_step;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800108c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	f3af 8000 	nop.w
 80010a0:	9999999a 	.word	0x9999999a
 80010a4:	3fa99999 	.word	0x3fa99999

080010a8 <InitJointInvDir>:
		GPIO_TypeDef *port_step,
		uint16_t pin_step,
		GPIO_TypeDef *port_limit,
		uint16_t pin_limit,
		InvertPinType inv_dir)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af08      	add	r7, sp, #32
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	460b      	mov	r3, r1
 80010b4:	72fb      	strb	r3, [r7, #11]
 80010b6:	4613      	mov	r3, r2
 80010b8:	72bb      	strb	r3, [r7, #10]
	InitJointInvDirStep(joint, num, invert_direction, port_dir, pin_dir, port_step, pin_step, port_limit, pin_limit, inv_dir, NOT_INVERT_PIN);
 80010ba:	7aba      	ldrb	r2, [r7, #10]
 80010bc:	7af9      	ldrb	r1, [r7, #11]
 80010be:	2300      	movs	r3, #0
 80010c0:	9306      	str	r3, [sp, #24]
 80010c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80010c6:	9305      	str	r3, [sp, #20]
 80010c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010ca:	9304      	str	r3, [sp, #16]
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	9303      	str	r3, [sp, #12]
 80010d0:	8c3b      	ldrh	r3, [r7, #32]
 80010d2:	9302      	str	r3, [sp, #8]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	8b3b      	ldrh	r3, [r7, #24]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f7ff ff8e 	bl	8001000 <InitJointInvDirStep>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <InitJoint>:
		uint16_t pin_dir,
		GPIO_TypeDef *port_step,
		uint16_t pin_step,
		GPIO_TypeDef *port_limit,
		uint16_t pin_limit)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af08      	add	r7, sp, #32
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	72fb      	strb	r3, [r7, #11]
 80010fa:	4613      	mov	r3, r2
 80010fc:	72bb      	strb	r3, [r7, #10]
	InitJointInvDirStep(joint, num, invert_direction, port_dir, pin_dir, port_step, pin_step, port_limit, pin_limit, NOT_INVERT_PIN, NOT_INVERT_PIN);
 80010fe:	7aba      	ldrb	r2, [r7, #10]
 8001100:	7af9      	ldrb	r1, [r7, #11]
 8001102:	2300      	movs	r3, #0
 8001104:	9306      	str	r3, [sp, #24]
 8001106:	2300      	movs	r3, #0
 8001108:	9305      	str	r3, [sp, #20]
 800110a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800110c:	9304      	str	r3, [sp, #16]
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	8c3b      	ldrh	r3, [r7, #32]
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	8b3b      	ldrh	r3, [r7, #24]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff6d 	bl	8001000 <InitJointInvDirStep>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <LeadingEdge>:

void LeadingEdge(JointState *joint){
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
	if (joint->stepper.direction == 1){
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800113c:	2b01      	cmp	r3, #1
 800113e:	d105      	bne.n	800114c <LeadingEdge+0x1e>
		joint->current_possition++;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	e004      	b.n	8001156 <LeadingEdge+0x28>
	}
	else{
		joint->current_possition--;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
	}
	if (joint->stepper.invert_step == NOT_INVERT_PIN)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800115c:	2b00      	cmp	r3, #0
 800115e:	d109      	bne.n	8001174 <LeadingEdge+0x46>
	{
		HAL_GPIO_WritePin(joint->stepper.port_step, joint->stepper.pin_step, 1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800116a:	2201      	movs	r2, #1
 800116c:	4619      	mov	r1, r3
 800116e:	f002 fc7f 	bl	8003a70 <HAL_GPIO_WritePin>
 8001172:	e008      	b.n	8001186 <LeadingEdge+0x58>
	}
	else
	{
		HAL_GPIO_WritePin(joint->stepper.port_step, joint->stepper.pin_step, 0);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	f002 fc75 	bl	8003a70 <HAL_GPIO_WritePin>
	}
	joint->stepper.impulse = true;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <TrailingEdge>:

void TrailingEdge(JointState *joint){
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	if (joint->stepper.invert_step == NOT_INVERT_PIN)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <TrailingEdge+0x26>
	{
		HAL_GPIO_WritePin(joint->stepper.port_step, joint->stepper.pin_step, 0);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011b2:	2200      	movs	r2, #0
 80011b4:	4619      	mov	r1, r3
 80011b6:	f002 fc5b 	bl	8003a70 <HAL_GPIO_WritePin>
 80011ba:	e008      	b.n	80011ce <TrailingEdge+0x38>
	}
	else
	{
		HAL_GPIO_WritePin(joint->stepper.port_step, joint->stepper.pin_step, 1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80011c6:	2201      	movs	r2, #1
 80011c8:	4619      	mov	r1, r3
 80011ca:	f002 fc51 	bl	8003a70 <HAL_GPIO_WritePin>
	}
	joint->stepper.impulse = false;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <SetDirectionForward>:

void SetDirectionForward(JointState *joint){
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	if (joint->invert_direction == NOT_INVERT_PIN){
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7d1b      	ldrb	r3, [r3, #20]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d104      	bne.n	80011f8 <SetDirectionForward+0x1a>
		joint->stepper.direction = 1;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80011f6:	e003      	b.n	8001200 <SetDirectionForward+0x22>
	}
	else{
		joint->stepper.direction = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	if (joint->stepper.invert_dir == NOT_INVERT_PIN)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8001206:	2b00      	cmp	r3, #0
 8001208:	d108      	bne.n	800121c <SetDirectionForward+0x3e>
	{
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 1);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	f002 fc2b 	bl	8003a70 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 0);
	}
}
 800121a:	e007      	b.n	800122c <SetDirectionForward+0x4e>
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 0);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	f002 fc22 	bl	8003a70 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <SetDirectionBackward>:

void SetDirectionBackward(JointState *joint){
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	if (joint->invert_direction == NOT_INVERT_PIN){
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	7d1b      	ldrb	r3, [r3, #20]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d104      	bne.n	800124e <SetDirectionBackward+0x1a>
		joint->stepper.direction = 0;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800124c:	e003      	b.n	8001256 <SetDirectionBackward+0x22>
	}
	else{
		joint->stepper.direction = 1;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	}
	if (joint->stepper.invert_dir == NOT_INVERT_PIN)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800125c:	2b00      	cmp	r3, #0
 800125e:	d108      	bne.n	8001272 <SetDirectionBackward+0x3e>
	{
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 0);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	f002 fc00 	bl	8003a70 <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 1);
	}
}
 8001270:	e007      	b.n	8001282 <SetDirectionBackward+0x4e>
		HAL_GPIO_WritePin(joint->stepper.port_dir, joint->stepper.pin_dir, 1);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f002 fbf7 	bl	8003a70 <HAL_GPIO_WritePin>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <ResetPosition>:

void ResetPosition(JointState *joint){
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
	joint->current_possition = 0;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
	joint->target_possition = 0;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <DistanceToTarget>:

uint32_t DistanceToTarget(JointState *joint){
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
	return abs(joint->target_possition - joint->current_possition);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b00      	cmp	r3, #0
 80012be:	bfb8      	it	lt
 80012c0:	425b      	neglt	r3, r3
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <NeedSteps>:

bool NeedSteps(JointState *joint){
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b082      	sub	sp, #8
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
	return DistanceToTarget(joint) > 0;
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff ffe7 	bl	80012aa <DistanceToTarget>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <SetTarget>:

void SetTarget(JointState *joint, int32_t position){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	joint->target_possition = position;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	609a      	str	r2, [r3, #8]
	if ((joint->target_possition - joint->current_possition) >= 0){
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	db03      	blt.n	8001316 <SetTarget+0x26>
		SetDirectionForward(joint);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff ff65 	bl	80011de <SetDirectionForward>
 8001314:	e002      	b.n	800131c <SetTarget+0x2c>
	}
	else{
		SetDirectionBackward(joint);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff8c 	bl	8001234 <SetDirectionBackward>
	}
	if (NeedSteps(joint)){
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f7ff ffd6 	bl	80012ce <NeedSteps>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SetTarget+0x3e>
		joint->mooving = true;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	755a      	strb	r2, [r3, #21]
	}
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <CheckLimiter>:

bool CheckLimiter(JointState *joint){
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	return HAL_GPIO_ReadPin(joint->stepper.port_limit, joint->stepper.pin_limit) == GPIO_PIN_RESET ? true : false;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8001348:	4619      	mov	r1, r3
 800134a:	4610      	mov	r0, r2
 800134c:	f002 fb78 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2db      	uxtb	r3, r3
}
 800135c:	4618      	mov	r0, r3
 800135e:	3708      	adds	r7, #8
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <InitProcStart>:

void InitProcStart(JointState *joint, double_t speed){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	ed87 0b00 	vstr	d0, [r7]
	joint->find_limiter = false;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2200      	movs	r2, #0
 8001374:	761a      	strb	r2, [r3, #24]
	joint->init = false;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	759a      	strb	r2, [r3, #22]
	joint->init_proc = true;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2201      	movs	r2, #1
 8001380:	75da      	strb	r2, [r3, #23]
	joint->stepper.speed_step = speed;
 8001382:	68f9      	ldr	r1, [r7, #12]
 8001384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001388:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	SetTarget(joint, INT32_MIN);
 800138c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001390:	68f8      	ldr	r0, [r7, #12]
 8001392:	f7ff ffad 	bl	80012f0 <SetTarget>
}
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <StepFindHome>:

void StepFindHome(JointState *joint){
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	if (!joint->find_limiter){
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7e1b      	ldrb	r3, [r3, #24]
 80013aa:	f083 0301 	eor.w	r3, r3, #1
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d012      	beq.n	80013da <StepFindHome+0x3c>
		if(CheckLimiter(joint)){
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff ffbe 	bl	8001336 <CheckLimiter>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d025      	beq.n	800140c <StepFindHome+0x6e>
			joint->find_limiter = true;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	761a      	strb	r2, [r3, #24]
			ResetPosition(joint);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff ff5f 	bl	800128a <ResetPosition>
			SetTarget(joint, joint->back_to_home);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	4619      	mov	r1, r3
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff8c 	bl	80012f0 <SetTarget>
			joint->init_proc = false;
			ResetPosition(joint);
			JointFindedHome(joint->number - 1);
		}
	}
}
 80013d8:	e018      	b.n	800140c <StepFindHome+0x6e>
		if (!NeedSteps(joint)){
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff77 	bl	80012ce <NeedSteps>
 80013e0:	4603      	mov	r3, r0
 80013e2:	f083 0301 	eor.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00f      	beq.n	800140c <StepFindHome+0x6e>
			joint->init = true;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	759a      	strb	r2, [r3, #22]
			joint->init_proc = false;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	75da      	strb	r2, [r3, #23]
			ResetPosition(joint);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff46 	bl	800128a <ResetPosition>
			JointFindedHome(joint->number - 1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	3b01      	subs	r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fd78 	bl	8000efc <JointFindedHome>
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <TickStepperChanel1>:

void TickStepperChanel1(JointState *joint){
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if (!joint->stepper.impulse){
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d026      	beq.n	800147a <TickStepperChanel1+0x66>
		if (joint->mooving){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	7d5b      	ldrb	r3, [r3, #21]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d022      	beq.n	800147a <TickStepperChanel1+0x66>
			joint->stepper.inc_step += joint->stepper.speed_step;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	ed93 6b08 	vldr	d6, [r3, #32]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001440:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	ed83 7b08 	vstr	d7, [r3, #32]
			if (joint->stepper.inc_step >= 1){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001450:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001454:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	da00      	bge.n	8001460 <TickStepperChanel1+0x4c>
				LeadingEdge(joint);
				joint->stepper.inc_step -= 1;
			}
		}
	}
}
 800145e:	e00c      	b.n	800147a <TickStepperChanel1+0x66>
				LeadingEdge(joint);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff fe64 	bl	800112e <LeadingEdge>
				joint->stepper.inc_step -= 1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	ed93 7b08 	vldr	d7, [r3, #32]
 800146c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001470:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	ed83 7b08 	vstr	d7, [r3, #32]
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <TickStepperChanel2>:

void TickStepperChanel2(JointState *joint){
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
	if (joint->stepper.impulse){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00e      	beq.n	80014b2 <TickStepperChanel2+0x30>
		TrailingEdge(joint);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fe7e 	bl	8001196 <TrailingEdge>
		if (!NeedSteps(joint)){
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff ff17 	bl	80012ce <NeedSteps>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f083 0301 	eor.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <TickStepperChanel2+0x30>
			joint->mooving = false;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	755a      	strb	r2, [r3, #21]
		}
	}
	if (joint->init_proc){
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	7ddb      	ldrb	r3, [r3, #23]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <TickStepperChanel2+0x3e>
		StepFindHome(joint);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff6f 	bl	800139e <StepFindHome>
	}
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <ReciveCommand>:
/* USER CODE BEGIN 0 */

uint8_t res_buf[1024];
char speed[5], j1b[5], j2b[5], j3b[5], j4b[5], j5b[5], j6b[5];

void ReciveCommand(){
 80014c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014cc:	ed2d 8b02 	vpush	{d8}
 80014d0:	b085      	sub	sp, #20
 80014d2:	af02      	add	r7, sp, #8
	if (res_buf[0] == 'f'){
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <ReciveCommand+0x20c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b66      	cmp	r3, #102	; 0x66
 80014da:	d137      	bne.n	800154c <ReciveCommand+0x84>
		if (res_buf[1] == 'H'){
 80014dc:	4b7d      	ldr	r3, [pc, #500]	; (80016d4 <ReciveCommand+0x20c>)
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	2b48      	cmp	r3, #72	; 0x48
 80014e2:	d102      	bne.n	80014ea <ReciveCommand+0x22>
			FindHomeArm();
 80014e4:	f7ff fa2a 	bl	800093c <FindHomeArm>
		}
	}
	//if (strcmp((char *)&res_buf, "PP\n") == 0){
	//	PongMessage();
	//}
}
 80014e8:	e291      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '1'){
 80014ea:	4b7a      	ldr	r3, [pc, #488]	; (80016d4 <ReciveCommand+0x20c>)
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b31      	cmp	r3, #49	; 0x31
 80014f0:	d103      	bne.n	80014fa <ReciveCommand+0x32>
			FindHomeJoint(JOINT1);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f7ff f9e8 	bl	80008c8 <FindHomeJoint>
}
 80014f8:	e289      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <ReciveCommand+0x20c>)
 80014fc:	785b      	ldrb	r3, [r3, #1]
 80014fe:	2b32      	cmp	r3, #50	; 0x32
 8001500:	d103      	bne.n	800150a <ReciveCommand+0x42>
			FindHomeJoint(JOINT2);
 8001502:	2001      	movs	r0, #1
 8001504:	f7ff f9e0 	bl	80008c8 <FindHomeJoint>
}
 8001508:	e281      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 800150a:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <ReciveCommand+0x20c>)
 800150c:	785b      	ldrb	r3, [r3, #1]
 800150e:	2b33      	cmp	r3, #51	; 0x33
 8001510:	d103      	bne.n	800151a <ReciveCommand+0x52>
			FindHomeJoint(JOINT3);
 8001512:	2002      	movs	r0, #2
 8001514:	f7ff f9d8 	bl	80008c8 <FindHomeJoint>
}
 8001518:	e279      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 800151a:	4b6e      	ldr	r3, [pc, #440]	; (80016d4 <ReciveCommand+0x20c>)
 800151c:	785b      	ldrb	r3, [r3, #1]
 800151e:	2b34      	cmp	r3, #52	; 0x34
 8001520:	d103      	bne.n	800152a <ReciveCommand+0x62>
			FindHomeJoint(JOINT4);
 8001522:	2003      	movs	r0, #3
 8001524:	f7ff f9d0 	bl	80008c8 <FindHomeJoint>
}
 8001528:	e271      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 800152a:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <ReciveCommand+0x20c>)
 800152c:	785b      	ldrb	r3, [r3, #1]
 800152e:	2b35      	cmp	r3, #53	; 0x35
 8001530:	d103      	bne.n	800153a <ReciveCommand+0x72>
			FindHomeJoint(JOINT5);
 8001532:	2004      	movs	r0, #4
 8001534:	f7ff f9c8 	bl	80008c8 <FindHomeJoint>
}
 8001538:	e269      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '6'){
 800153a:	4b66      	ldr	r3, [pc, #408]	; (80016d4 <ReciveCommand+0x20c>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	2b36      	cmp	r3, #54	; 0x36
 8001540:	f040 8265 	bne.w	8001a0e <ReciveCommand+0x546>
			FindHomeJoint(JOINT6);
 8001544:	2005      	movs	r0, #5
 8001546:	f7ff f9bf 	bl	80008c8 <FindHomeJoint>
}
 800154a:	e260      	b.n	8001a0e <ReciveCommand+0x546>
	else if (res_buf[0] == 'F'){
 800154c:	4b61      	ldr	r3, [pc, #388]	; (80016d4 <ReciveCommand+0x20c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b46      	cmp	r3, #70	; 0x46
 8001552:	d137      	bne.n	80015c4 <ReciveCommand+0xfc>
		if (res_buf[1] == 'H'){
 8001554:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <ReciveCommand+0x20c>)
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	2b48      	cmp	r3, #72	; 0x48
 800155a:	d102      	bne.n	8001562 <ReciveCommand+0x9a>
			FindHomeArmForce();
 800155c:	f7ff fa04 	bl	8000968 <FindHomeArmForce>
}
 8001560:	e255      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '1'){
 8001562:	4b5c      	ldr	r3, [pc, #368]	; (80016d4 <ReciveCommand+0x20c>)
 8001564:	785b      	ldrb	r3, [r3, #1]
 8001566:	2b31      	cmp	r3, #49	; 0x31
 8001568:	d103      	bne.n	8001572 <ReciveCommand+0xaa>
			FindHomeForce(JOINT1);
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff f9ca 	bl	8000904 <FindHomeForce>
}
 8001570:	e24d      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 8001572:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <ReciveCommand+0x20c>)
 8001574:	785b      	ldrb	r3, [r3, #1]
 8001576:	2b32      	cmp	r3, #50	; 0x32
 8001578:	d103      	bne.n	8001582 <ReciveCommand+0xba>
			FindHomeForce(JOINT2);
 800157a:	2001      	movs	r0, #1
 800157c:	f7ff f9c2 	bl	8000904 <FindHomeForce>
}
 8001580:	e245      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 8001582:	4b54      	ldr	r3, [pc, #336]	; (80016d4 <ReciveCommand+0x20c>)
 8001584:	785b      	ldrb	r3, [r3, #1]
 8001586:	2b33      	cmp	r3, #51	; 0x33
 8001588:	d103      	bne.n	8001592 <ReciveCommand+0xca>
			FindHomeForce(JOINT3);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff f9ba 	bl	8000904 <FindHomeForce>
}
 8001590:	e23d      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 8001592:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <ReciveCommand+0x20c>)
 8001594:	785b      	ldrb	r3, [r3, #1]
 8001596:	2b34      	cmp	r3, #52	; 0x34
 8001598:	d103      	bne.n	80015a2 <ReciveCommand+0xda>
			FindHomeForce(JOINT4);
 800159a:	2003      	movs	r0, #3
 800159c:	f7ff f9b2 	bl	8000904 <FindHomeForce>
}
 80015a0:	e235      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 80015a2:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <ReciveCommand+0x20c>)
 80015a4:	785b      	ldrb	r3, [r3, #1]
 80015a6:	2b35      	cmp	r3, #53	; 0x35
 80015a8:	d103      	bne.n	80015b2 <ReciveCommand+0xea>
			FindHomeForce(JOINT5);
 80015aa:	2004      	movs	r0, #4
 80015ac:	f7ff f9aa 	bl	8000904 <FindHomeForce>
}
 80015b0:	e22d      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '6'){
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <ReciveCommand+0x20c>)
 80015b4:	785b      	ldrb	r3, [r3, #1]
 80015b6:	2b36      	cmp	r3, #54	; 0x36
 80015b8:	f040 8229 	bne.w	8001a0e <ReciveCommand+0x546>
			FindHomeForce(JOINT6);
 80015bc:	2005      	movs	r0, #5
 80015be:	f7ff f9a1 	bl	8000904 <FindHomeForce>
}
 80015c2:	e224      	b.n	8001a0e <ReciveCommand+0x546>
	else if (res_buf[0] == 's'){
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <ReciveCommand+0x20c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b73      	cmp	r3, #115	; 0x73
 80015ca:	d137      	bne.n	800163c <ReciveCommand+0x174>
		if (res_buf[1] == '1'){
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <ReciveCommand+0x20c>)
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	2b31      	cmp	r3, #49	; 0x31
 80015d2:	d103      	bne.n	80015dc <ReciveCommand+0x114>
			ReportJointState(JOINT1);
 80015d4:	2000      	movs	r0, #0
 80015d6:	f7ff fbe3 	bl	8000da0 <ReportJointState>
}
 80015da:	e218      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 80015dc:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <ReciveCommand+0x20c>)
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	2b32      	cmp	r3, #50	; 0x32
 80015e2:	d103      	bne.n	80015ec <ReciveCommand+0x124>
			ReportJointState(JOINT2);
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fbdb 	bl	8000da0 <ReportJointState>
}
 80015ea:	e210      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 80015ec:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <ReciveCommand+0x20c>)
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	2b33      	cmp	r3, #51	; 0x33
 80015f2:	d103      	bne.n	80015fc <ReciveCommand+0x134>
			ReportJointState(JOINT3);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff fbd3 	bl	8000da0 <ReportJointState>
}
 80015fa:	e208      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <ReciveCommand+0x20c>)
 80015fe:	785b      	ldrb	r3, [r3, #1]
 8001600:	2b34      	cmp	r3, #52	; 0x34
 8001602:	d103      	bne.n	800160c <ReciveCommand+0x144>
			ReportJointState(JOINT4);
 8001604:	2003      	movs	r0, #3
 8001606:	f7ff fbcb 	bl	8000da0 <ReportJointState>
}
 800160a:	e200      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 800160c:	4b31      	ldr	r3, [pc, #196]	; (80016d4 <ReciveCommand+0x20c>)
 800160e:	785b      	ldrb	r3, [r3, #1]
 8001610:	2b35      	cmp	r3, #53	; 0x35
 8001612:	d103      	bne.n	800161c <ReciveCommand+0x154>
			ReportJointState(JOINT5);
 8001614:	2004      	movs	r0, #4
 8001616:	f7ff fbc3 	bl	8000da0 <ReportJointState>
}
 800161a:	e1f8      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '6'){
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <ReciveCommand+0x20c>)
 800161e:	785b      	ldrb	r3, [r3, #1]
 8001620:	2b36      	cmp	r3, #54	; 0x36
 8001622:	d103      	bne.n	800162c <ReciveCommand+0x164>
			ReportJointState(JOINT6);
 8001624:	2005      	movs	r0, #5
 8001626:	f7ff fbbb 	bl	8000da0 <ReportJointState>
}
 800162a:	e1f0      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 't'){
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <ReciveCommand+0x20c>)
 800162e:	785b      	ldrb	r3, [r3, #1]
 8001630:	2b74      	cmp	r3, #116	; 0x74
 8001632:	f040 81ec 	bne.w	8001a0e <ReciveCommand+0x546>
			ReportJointsState();
 8001636:	f7ff fbf7 	bl	8000e28 <ReportJointsState>
}
 800163a:	e1e8      	b.n	8001a0e <ReciveCommand+0x546>
	else if (res_buf[0] == 'M'){
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <ReciveCommand+0x20c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b4d      	cmp	r3, #77	; 0x4d
 8001642:	d161      	bne.n	8001708 <ReciveCommand+0x240>
		if (res_buf[1] == 'E'){
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <ReciveCommand+0x20c>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	2b45      	cmp	r3, #69	; 0x45
 800164a:	d13e      	bne.n	80016ca <ReciveCommand+0x202>
			strncpy((char *)&j1b, (char *)&res_buf[3], 5);
 800164c:	2205      	movs	r2, #5
 800164e:	4922      	ldr	r1, [pc, #136]	; (80016d8 <ReciveCommand+0x210>)
 8001650:	4822      	ldr	r0, [pc, #136]	; (80016dc <ReciveCommand+0x214>)
 8001652:	f00e f9f5 	bl	800fa40 <strncpy>
			strncpy((char *)&j2b, (char *)&res_buf[9], 5);
 8001656:	2205      	movs	r2, #5
 8001658:	4921      	ldr	r1, [pc, #132]	; (80016e0 <ReciveCommand+0x218>)
 800165a:	4822      	ldr	r0, [pc, #136]	; (80016e4 <ReciveCommand+0x21c>)
 800165c:	f00e f9f0 	bl	800fa40 <strncpy>
			strncpy((char *)&j3b, (char *)&res_buf[15], 5);
 8001660:	2205      	movs	r2, #5
 8001662:	4921      	ldr	r1, [pc, #132]	; (80016e8 <ReciveCommand+0x220>)
 8001664:	4821      	ldr	r0, [pc, #132]	; (80016ec <ReciveCommand+0x224>)
 8001666:	f00e f9eb 	bl	800fa40 <strncpy>
			strncpy((char *)&j4b, (char *)&res_buf[21], 5);
 800166a:	2205      	movs	r2, #5
 800166c:	4920      	ldr	r1, [pc, #128]	; (80016f0 <ReciveCommand+0x228>)
 800166e:	4821      	ldr	r0, [pc, #132]	; (80016f4 <ReciveCommand+0x22c>)
 8001670:	f00e f9e6 	bl	800fa40 <strncpy>
			strncpy((char *)&j5b, (char *)&res_buf[27], 5);
 8001674:	2205      	movs	r2, #5
 8001676:	4920      	ldr	r1, [pc, #128]	; (80016f8 <ReciveCommand+0x230>)
 8001678:	4820      	ldr	r0, [pc, #128]	; (80016fc <ReciveCommand+0x234>)
 800167a:	f00e f9e1 	bl	800fa40 <strncpy>
			strncpy((char *)&j6b, (char *)&res_buf[33], 5);
 800167e:	2205      	movs	r2, #5
 8001680:	491f      	ldr	r1, [pc, #124]	; (8001700 <ReciveCommand+0x238>)
 8001682:	4820      	ldr	r0, [pc, #128]	; (8001704 <ReciveCommand+0x23c>)
 8001684:	f00e f9dc 	bl	800fa40 <strncpy>
			SetTargetPointEqSpeed(atoi((char *)&j1b), atoi((char *)&j2b), atoi((char *)&j3b), atoi((char *)&j4b), atoi((char *)&j5b), atoi((char *)&j6b));
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <ReciveCommand+0x214>)
 800168a:	f00d fbe5 	bl	800ee58 <atoi>
 800168e:	4605      	mov	r5, r0
 8001690:	4814      	ldr	r0, [pc, #80]	; (80016e4 <ReciveCommand+0x21c>)
 8001692:	f00d fbe1 	bl	800ee58 <atoi>
 8001696:	4606      	mov	r6, r0
 8001698:	4814      	ldr	r0, [pc, #80]	; (80016ec <ReciveCommand+0x224>)
 800169a:	f00d fbdd 	bl	800ee58 <atoi>
 800169e:	4680      	mov	r8, r0
 80016a0:	4814      	ldr	r0, [pc, #80]	; (80016f4 <ReciveCommand+0x22c>)
 80016a2:	f00d fbd9 	bl	800ee58 <atoi>
 80016a6:	4681      	mov	r9, r0
 80016a8:	4814      	ldr	r0, [pc, #80]	; (80016fc <ReciveCommand+0x234>)
 80016aa:	f00d fbd5 	bl	800ee58 <atoi>
 80016ae:	4604      	mov	r4, r0
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <ReciveCommand+0x23c>)
 80016b2:	f00d fbd1 	bl	800ee58 <atoi>
 80016b6:	4603      	mov	r3, r0
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9400      	str	r4, [sp, #0]
 80016bc:	464b      	mov	r3, r9
 80016be:	4642      	mov	r2, r8
 80016c0:	4631      	mov	r1, r6
 80016c2:	4628      	mov	r0, r5
 80016c4:	f7ff fa10 	bl	8000ae8 <SetTargetPointEqSpeed>
}
 80016c8:	e1a1      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'M'){
 80016ca:	4b02      	ldr	r3, [pc, #8]	; (80016d4 <ReciveCommand+0x20c>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	2b4d      	cmp	r3, #77	; 0x4d
}
 80016d0:	e19d      	b.n	8001a0e <ReciveCommand+0x546>
 80016d2:	bf00      	nop
 80016d4:	240005b8 	.word	0x240005b8
 80016d8:	240005bb 	.word	0x240005bb
 80016dc:	240009c0 	.word	0x240009c0
 80016e0:	240005c1 	.word	0x240005c1
 80016e4:	240009c8 	.word	0x240009c8
 80016e8:	240005c7 	.word	0x240005c7
 80016ec:	240009d0 	.word	0x240009d0
 80016f0:	240005cd 	.word	0x240005cd
 80016f4:	240009d8 	.word	0x240009d8
 80016f8:	240005d3 	.word	0x240005d3
 80016fc:	240009e0 	.word	0x240009e0
 8001700:	240005d9 	.word	0x240005d9
 8001704:	240009e8 	.word	0x240009e8
	else if (res_buf[0] == 'P'){
 8001708:	4ba5      	ldr	r3, [pc, #660]	; (80019a0 <ReciveCommand+0x4d8>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b50      	cmp	r3, #80	; 0x50
 800170e:	d16f      	bne.n	80017f0 <ReciveCommand+0x328>
		if (res_buf[1] == 'A'){
 8001710:	4ba3      	ldr	r3, [pc, #652]	; (80019a0 <ReciveCommand+0x4d8>)
 8001712:	785b      	ldrb	r3, [r3, #1]
 8001714:	2b41      	cmp	r3, #65	; 0x41
 8001716:	d155      	bne.n	80017c4 <ReciveCommand+0x2fc>
			strncpy((char *)&speed, (char *)&res_buf[3], 5);
 8001718:	2205      	movs	r2, #5
 800171a:	49a2      	ldr	r1, [pc, #648]	; (80019a4 <ReciveCommand+0x4dc>)
 800171c:	48a2      	ldr	r0, [pc, #648]	; (80019a8 <ReciveCommand+0x4e0>)
 800171e:	f00e f98f 	bl	800fa40 <strncpy>
			strncpy((char *)&j1b, (char *)&res_buf[9], 5);
 8001722:	2205      	movs	r2, #5
 8001724:	49a1      	ldr	r1, [pc, #644]	; (80019ac <ReciveCommand+0x4e4>)
 8001726:	48a2      	ldr	r0, [pc, #648]	; (80019b0 <ReciveCommand+0x4e8>)
 8001728:	f00e f98a 	bl	800fa40 <strncpy>
			strncpy((char *)&j2b, (char *)&res_buf[15], 5);
 800172c:	2205      	movs	r2, #5
 800172e:	49a1      	ldr	r1, [pc, #644]	; (80019b4 <ReciveCommand+0x4ec>)
 8001730:	48a1      	ldr	r0, [pc, #644]	; (80019b8 <ReciveCommand+0x4f0>)
 8001732:	f00e f985 	bl	800fa40 <strncpy>
			strncpy((char *)&j3b, (char *)&res_buf[21], 5);
 8001736:	2205      	movs	r2, #5
 8001738:	49a0      	ldr	r1, [pc, #640]	; (80019bc <ReciveCommand+0x4f4>)
 800173a:	48a1      	ldr	r0, [pc, #644]	; (80019c0 <ReciveCommand+0x4f8>)
 800173c:	f00e f980 	bl	800fa40 <strncpy>
			strncpy((char *)&j4b, (char *)&res_buf[27], 5);
 8001740:	2205      	movs	r2, #5
 8001742:	49a0      	ldr	r1, [pc, #640]	; (80019c4 <ReciveCommand+0x4fc>)
 8001744:	48a0      	ldr	r0, [pc, #640]	; (80019c8 <ReciveCommand+0x500>)
 8001746:	f00e f97b 	bl	800fa40 <strncpy>
			strncpy((char *)&j5b, (char *)&res_buf[33], 5);
 800174a:	2205      	movs	r2, #5
 800174c:	499f      	ldr	r1, [pc, #636]	; (80019cc <ReciveCommand+0x504>)
 800174e:	48a0      	ldr	r0, [pc, #640]	; (80019d0 <ReciveCommand+0x508>)
 8001750:	f00e f976 	bl	800fa40 <strncpy>
			strncpy((char *)&j6b, (char *)&res_buf[39], 5);
 8001754:	2205      	movs	r2, #5
 8001756:	499f      	ldr	r1, [pc, #636]	; (80019d4 <ReciveCommand+0x50c>)
 8001758:	489f      	ldr	r0, [pc, #636]	; (80019d8 <ReciveCommand+0x510>)
 800175a:	f00e f971 	bl	800fa40 <strncpy>
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 800175e:	4892      	ldr	r0, [pc, #584]	; (80019a8 <ReciveCommand+0x4e0>)
 8001760:	f00d fb7a 	bl	800ee58 <atoi>
 8001764:	ee07 0a90 	vmov	s15, r0
 8001768:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800176c:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8001998 <ReciveCommand+0x4d0>
 8001770:	ee87 8b06 	vdiv.f64	d8, d7, d6
					atoi((char *)&j1b),
 8001774:	488e      	ldr	r0, [pc, #568]	; (80019b0 <ReciveCommand+0x4e8>)
 8001776:	f00d fb6f 	bl	800ee58 <atoi>
 800177a:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 800177c:	461d      	mov	r5, r3
					atoi((char *)&j2b),
 800177e:	488e      	ldr	r0, [pc, #568]	; (80019b8 <ReciveCommand+0x4f0>)
 8001780:	f00d fb6a 	bl	800ee58 <atoi>
 8001784:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 8001786:	461e      	mov	r6, r3
					atoi((char *)&j3b),
 8001788:	488d      	ldr	r0, [pc, #564]	; (80019c0 <ReciveCommand+0x4f8>)
 800178a:	f00d fb65 	bl	800ee58 <atoi>
 800178e:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 8001790:	4698      	mov	r8, r3
					atoi((char *)&j4b),
 8001792:	488d      	ldr	r0, [pc, #564]	; (80019c8 <ReciveCommand+0x500>)
 8001794:	f00d fb60 	bl	800ee58 <atoi>
 8001798:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 800179a:	4699      	mov	r9, r3
					atoi((char *)&j5b),
 800179c:	488c      	ldr	r0, [pc, #560]	; (80019d0 <ReciveCommand+0x508>)
 800179e:	f00d fb5b 	bl	800ee58 <atoi>
 80017a2:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 80017a4:	461c      	mov	r4, r3
					atoi((char *)&j6b));
 80017a6:	488c      	ldr	r0, [pc, #560]	; (80019d8 <ReciveCommand+0x510>)
 80017a8:	f00d fb56 	bl	800ee58 <atoi>
 80017ac:	4603      	mov	r3, r0
			AddPathPoint(atoi((char *)&speed) / CLOCK_STEP,
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	9400      	str	r4, [sp, #0]
 80017b2:	464b      	mov	r3, r9
 80017b4:	4642      	mov	r2, r8
 80017b6:	4631      	mov	r1, r6
 80017b8:	4628      	mov	r0, r5
 80017ba:	eeb0 0b48 	vmov.f64	d0, d8
 80017be:	f000 fd1d 	bl	80021fc <AddPathPoint>
}
 80017c2:	e124      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'M'){
 80017c4:	4b76      	ldr	r3, [pc, #472]	; (80019a0 <ReciveCommand+0x4d8>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	2b4d      	cmp	r3, #77	; 0x4d
 80017ca:	d102      	bne.n	80017d2 <ReciveCommand+0x30a>
			StartMovePath();
 80017cc:	f000 fe2c 	bl	8002428 <StartMovePath>
}
 80017d0:	e11d      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'C'){
 80017d2:	4b73      	ldr	r3, [pc, #460]	; (80019a0 <ReciveCommand+0x4d8>)
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	2b43      	cmp	r3, #67	; 0x43
 80017d8:	d102      	bne.n	80017e0 <ReciveCommand+0x318>
			ClearPath();
 80017da:	f000 fd67 	bl	80022ac <ClearPath>
}
 80017de:	e116      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'P'){
 80017e0:	4b6f      	ldr	r3, [pc, #444]	; (80019a0 <ReciveCommand+0x4d8>)
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2b50      	cmp	r3, #80	; 0x50
 80017e6:	f040 8112 	bne.w	8001a0e <ReciveCommand+0x546>
			PongMessage();
 80017ea:	f7ff fbfb 	bl	8000fe4 <PongMessage>
}
 80017ee:	e10e      	b.n	8001a0e <ReciveCommand+0x546>
	else if (res_buf[0] == 'Z'){
 80017f0:	4b6b      	ldr	r3, [pc, #428]	; (80019a0 <ReciveCommand+0x4d8>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b5a      	cmp	r3, #90	; 0x5a
 80017f6:	d14e      	bne.n	8001896 <ReciveCommand+0x3ce>
		if (res_buf[1] == '1'){
 80017f8:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <ReciveCommand+0x4d8>)
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	2b31      	cmp	r3, #49	; 0x31
 80017fe:	d108      	bne.n	8001812 <ReciveCommand+0x34a>
			SetBackToZeroJoint(JOINT1, atoi((char *)&res_buf[2]));
 8001800:	4876      	ldr	r0, [pc, #472]	; (80019dc <ReciveCommand+0x514>)
 8001802:	f00d fb29 	bl	800ee58 <atoi>
 8001806:	4603      	mov	r3, r0
 8001808:	4619      	mov	r1, r3
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fa74 	bl	8000cf8 <SetBackToZeroJoint>
}
 8001810:	e0fd      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <ReciveCommand+0x4d8>)
 8001814:	785b      	ldrb	r3, [r3, #1]
 8001816:	2b32      	cmp	r3, #50	; 0x32
 8001818:	d108      	bne.n	800182c <ReciveCommand+0x364>
			SetBackToZeroJoint(JOINT2, atoi((char *)&res_buf[2]));
 800181a:	4870      	ldr	r0, [pc, #448]	; (80019dc <ReciveCommand+0x514>)
 800181c:	f00d fb1c 	bl	800ee58 <atoi>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff fa67 	bl	8000cf8 <SetBackToZeroJoint>
}
 800182a:	e0f0      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 800182c:	4b5c      	ldr	r3, [pc, #368]	; (80019a0 <ReciveCommand+0x4d8>)
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	2b33      	cmp	r3, #51	; 0x33
 8001832:	d108      	bne.n	8001846 <ReciveCommand+0x37e>
			SetBackToZeroJoint(JOINT3, atoi((char *)&res_buf[2]));
 8001834:	4869      	ldr	r0, [pc, #420]	; (80019dc <ReciveCommand+0x514>)
 8001836:	f00d fb0f 	bl	800ee58 <atoi>
 800183a:	4603      	mov	r3, r0
 800183c:	4619      	mov	r1, r3
 800183e:	2002      	movs	r0, #2
 8001840:	f7ff fa5a 	bl	8000cf8 <SetBackToZeroJoint>
}
 8001844:	e0e3      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 8001846:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <ReciveCommand+0x4d8>)
 8001848:	785b      	ldrb	r3, [r3, #1]
 800184a:	2b34      	cmp	r3, #52	; 0x34
 800184c:	d108      	bne.n	8001860 <ReciveCommand+0x398>
			SetBackToZeroJoint(JOINT4, atoi((char *)&res_buf[2]));
 800184e:	4863      	ldr	r0, [pc, #396]	; (80019dc <ReciveCommand+0x514>)
 8001850:	f00d fb02 	bl	800ee58 <atoi>
 8001854:	4603      	mov	r3, r0
 8001856:	4619      	mov	r1, r3
 8001858:	2003      	movs	r0, #3
 800185a:	f7ff fa4d 	bl	8000cf8 <SetBackToZeroJoint>
}
 800185e:	e0d6      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 8001860:	4b4f      	ldr	r3, [pc, #316]	; (80019a0 <ReciveCommand+0x4d8>)
 8001862:	785b      	ldrb	r3, [r3, #1]
 8001864:	2b35      	cmp	r3, #53	; 0x35
 8001866:	d108      	bne.n	800187a <ReciveCommand+0x3b2>
			SetBackToZeroJoint(JOINT5, atoi((char *)&res_buf[2]));
 8001868:	485c      	ldr	r0, [pc, #368]	; (80019dc <ReciveCommand+0x514>)
 800186a:	f00d faf5 	bl	800ee58 <atoi>
 800186e:	4603      	mov	r3, r0
 8001870:	4619      	mov	r1, r3
 8001872:	2004      	movs	r0, #4
 8001874:	f7ff fa40 	bl	8000cf8 <SetBackToZeroJoint>
}
 8001878:	e0c9      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '6'){
 800187a:	4b49      	ldr	r3, [pc, #292]	; (80019a0 <ReciveCommand+0x4d8>)
 800187c:	785b      	ldrb	r3, [r3, #1]
 800187e:	2b36      	cmp	r3, #54	; 0x36
 8001880:	f040 80c5 	bne.w	8001a0e <ReciveCommand+0x546>
			SetBackToZeroJoint(JOINT6, atoi((char *)&res_buf[2]));
 8001884:	4855      	ldr	r0, [pc, #340]	; (80019dc <ReciveCommand+0x514>)
 8001886:	f00d fae7 	bl	800ee58 <atoi>
 800188a:	4603      	mov	r3, r0
 800188c:	4619      	mov	r1, r3
 800188e:	2005      	movs	r0, #5
 8001890:	f7ff fa32 	bl	8000cf8 <SetBackToZeroJoint>
}
 8001894:	e0bb      	b.n	8001a0e <ReciveCommand+0x546>
	else if (res_buf[0] == 'S'){
 8001896:	4b42      	ldr	r3, [pc, #264]	; (80019a0 <ReciveCommand+0x4d8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b53      	cmp	r3, #83	; 0x53
 800189c:	f040 80a0 	bne.w	80019e0 <ReciveCommand+0x518>
		if (res_buf[1] == '1'){
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <ReciveCommand+0x4d8>)
 80018a2:	785b      	ldrb	r3, [r3, #1]
 80018a4:	2b31      	cmp	r3, #49	; 0x31
 80018a6:	d108      	bne.n	80018ba <ReciveCommand+0x3f2>
			SetFullStepsJoint(JOINT1, atoi((char *)&res_buf[2]));
 80018a8:	484c      	ldr	r0, [pc, #304]	; (80019dc <ReciveCommand+0x514>)
 80018aa:	f00d fad5 	bl	800ee58 <atoi>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fa38 	bl	8000d28 <SetFullStepsJoint>
}
 80018b8:	e0a9      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <ReciveCommand+0x4d8>)
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2b32      	cmp	r3, #50	; 0x32
 80018c0:	d108      	bne.n	80018d4 <ReciveCommand+0x40c>
			SetFullStepsJoint(JOINT2, atoi((char *)&res_buf[2]));
 80018c2:	4846      	ldr	r0, [pc, #280]	; (80019dc <ReciveCommand+0x514>)
 80018c4:	f00d fac8 	bl	800ee58 <atoi>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4619      	mov	r1, r3
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff fa2b 	bl	8000d28 <SetFullStepsJoint>
}
 80018d2:	e09c      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 80018d4:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <ReciveCommand+0x4d8>)
 80018d6:	785b      	ldrb	r3, [r3, #1]
 80018d8:	2b33      	cmp	r3, #51	; 0x33
 80018da:	d108      	bne.n	80018ee <ReciveCommand+0x426>
			SetFullStepsJoint(JOINT3, atoi((char *)&res_buf[2]));
 80018dc:	483f      	ldr	r0, [pc, #252]	; (80019dc <ReciveCommand+0x514>)
 80018de:	f00d fabb 	bl	800ee58 <atoi>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4619      	mov	r1, r3
 80018e6:	2002      	movs	r0, #2
 80018e8:	f7ff fa1e 	bl	8000d28 <SetFullStepsJoint>
}
 80018ec:	e08f      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <ReciveCommand+0x4d8>)
 80018f0:	785b      	ldrb	r3, [r3, #1]
 80018f2:	2b34      	cmp	r3, #52	; 0x34
 80018f4:	d108      	bne.n	8001908 <ReciveCommand+0x440>
			SetFullStepsJoint(JOINT4, atoi((char *)&res_buf[2]));
 80018f6:	4839      	ldr	r0, [pc, #228]	; (80019dc <ReciveCommand+0x514>)
 80018f8:	f00d faae 	bl	800ee58 <atoi>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4619      	mov	r1, r3
 8001900:	2003      	movs	r0, #3
 8001902:	f7ff fa11 	bl	8000d28 <SetFullStepsJoint>
}
 8001906:	e082      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <ReciveCommand+0x4d8>)
 800190a:	785b      	ldrb	r3, [r3, #1]
 800190c:	2b35      	cmp	r3, #53	; 0x35
 800190e:	d108      	bne.n	8001922 <ReciveCommand+0x45a>
			SetFullStepsJoint(JOINT5, atoi((char *)&res_buf[2]));
 8001910:	4832      	ldr	r0, [pc, #200]	; (80019dc <ReciveCommand+0x514>)
 8001912:	f00d faa1 	bl	800ee58 <atoi>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	2004      	movs	r0, #4
 800191c:	f7ff fa04 	bl	8000d28 <SetFullStepsJoint>
}
 8001920:	e075      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '6'){
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <ReciveCommand+0x4d8>)
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	2b36      	cmp	r3, #54	; 0x36
 8001928:	d108      	bne.n	800193c <ReciveCommand+0x474>
			SetFullStepsJoint(JOINT6, atoi((char *)&res_buf[2]));
 800192a:	482c      	ldr	r0, [pc, #176]	; (80019dc <ReciveCommand+0x514>)
 800192c:	f00d fa94 	bl	800ee58 <atoi>
 8001930:	4603      	mov	r3, r0
 8001932:	4619      	mov	r1, r3
 8001934:	2005      	movs	r0, #5
 8001936:	f7ff f9f7 	bl	8000d28 <SetFullStepsJoint>
}
 800193a:	e068      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'F'){
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <ReciveCommand+0x4d8>)
 800193e:	785b      	ldrb	r3, [r3, #1]
 8001940:	2b46      	cmp	r3, #70	; 0x46
 8001942:	d111      	bne.n	8001968 <ReciveCommand+0x4a0>
			int s = atoi((char *)&res_buf[2]);
 8001944:	4825      	ldr	r0, [pc, #148]	; (80019dc <ReciveCommand+0x514>)
 8001946:	f00d fa87 	bl	800ee58 <atoi>
 800194a:	6038      	str	r0, [r7, #0]
			SetFindHomeSpeed((double)s / CLOCK_STEP);
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	ee07 3a90 	vmov	s15, r3
 8001952:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001956:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001998 <ReciveCommand+0x4d0>
 800195a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800195e:	eeb0 0b46 	vmov.f64	d0, d6
 8001962:	f7ff f9f9 	bl	8000d58 <SetFindHomeSpeed>
}
 8001966:	e052      	b.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == 'S'){
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <ReciveCommand+0x4d8>)
 800196a:	785b      	ldrb	r3, [r3, #1]
 800196c:	2b53      	cmp	r3, #83	; 0x53
 800196e:	d14e      	bne.n	8001a0e <ReciveCommand+0x546>
			int s = atoi((char *)&res_buf[2]);
 8001970:	481a      	ldr	r0, [pc, #104]	; (80019dc <ReciveCommand+0x514>)
 8001972:	f00d fa71 	bl	800ee58 <atoi>
 8001976:	6078      	str	r0, [r7, #4]
			SetMaxSpeed((double)s / CLOCK_STEP);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	ee07 3a90 	vmov	s15, r3
 800197e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001982:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8001998 <ReciveCommand+0x4d0>
 8001986:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800198a:	eeb0 0b46 	vmov.f64	d0, d6
 800198e:	f7ff f9f5 	bl	8000d7c <SetMaxSpeed>
}
 8001992:	e03c      	b.n	8001a0e <ReciveCommand+0x546>
 8001994:	f3af 8000 	nop.w
 8001998:	00000000 	.word	0x00000000
 800199c:	40c38800 	.word	0x40c38800
 80019a0:	240005b8 	.word	0x240005b8
 80019a4:	240005bb 	.word	0x240005bb
 80019a8:	240009b8 	.word	0x240009b8
 80019ac:	240005c1 	.word	0x240005c1
 80019b0:	240009c0 	.word	0x240009c0
 80019b4:	240005c7 	.word	0x240005c7
 80019b8:	240009c8 	.word	0x240009c8
 80019bc:	240005cd 	.word	0x240005cd
 80019c0:	240009d0 	.word	0x240009d0
 80019c4:	240005d3 	.word	0x240005d3
 80019c8:	240009d8 	.word	0x240009d8
 80019cc:	240005d9 	.word	0x240005d9
 80019d0:	240009e0 	.word	0x240009e0
 80019d4:	240005df 	.word	0x240005df
 80019d8:	240009e8 	.word	0x240009e8
 80019dc:	240005ba 	.word	0x240005ba
	else if (res_buf[0] == 't'){
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <ReciveCommand+0x554>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b74      	cmp	r3, #116	; 0x74
 80019e6:	d112      	bne.n	8001a0e <ReciveCommand+0x546>
		if (res_buf[1] == '1'){
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <ReciveCommand+0x554>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b31      	cmp	r3, #49	; 0x31
 80019ee:	d00e      	beq.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '2'){
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <ReciveCommand+0x554>)
 80019f2:	785b      	ldrb	r3, [r3, #1]
 80019f4:	2b32      	cmp	r3, #50	; 0x32
 80019f6:	d00a      	beq.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '3'){
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <ReciveCommand+0x554>)
 80019fa:	785b      	ldrb	r3, [r3, #1]
 80019fc:	2b33      	cmp	r3, #51	; 0x33
 80019fe:	d006      	beq.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '4'){
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <ReciveCommand+0x554>)
 8001a02:	785b      	ldrb	r3, [r3, #1]
 8001a04:	2b34      	cmp	r3, #52	; 0x34
 8001a06:	d002      	beq.n	8001a0e <ReciveCommand+0x546>
		else if (res_buf[1] == '5'){
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <ReciveCommand+0x554>)
 8001a0a:	785b      	ldrb	r3, [r3, #1]
 8001a0c:	2b35      	cmp	r3, #53	; 0x35
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	ecbd 8b02 	vpop	{d8}
 8001a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a1c:	240005b8 	.word	0x240005b8

08001a20 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a09      	ldr	r2, [pc, #36]	; (8001a54 <HAL_TIM_OC_DelayElapsedCallback+0x34>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d10c      	bne.n	8001a4c <HAL_TIM_OC_DelayElapsedCallback+0x2c>
    {
		switch(htim->Channel){
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7f1b      	ldrb	r3, [r3, #28]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d002      	beq.n	8001a40 <HAL_TIM_OC_DelayElapsedCallback+0x20>
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_OC_DelayElapsedCallback+0x26>
			{
				TickTimerChennel2();
				break;
			}
			default:
				break;
 8001a3e:	e005      	b.n	8001a4c <HAL_TIM_OC_DelayElapsedCallback+0x2c>
				TickTimerChennel1();
 8001a40:	f7fe ffa8 	bl	8000994 <TickTimerChennel1>
				break;
 8001a44:	e002      	b.n	8001a4c <HAL_TIM_OC_DelayElapsedCallback+0x2c>
				TickTimerChennel2();
 8001a46:	f7fe ffc3 	bl	80009d0 <TickTimerChennel2>
				break;
 8001a4a:	bf00      	nop
		}
    }
}
 8001a4c:	bf00      	nop
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40010000 	.word	0x40010000

08001a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001a5e:	4b84      	ldr	r3, [pc, #528]	; (8001c70 <main+0x218>)
 8001a60:	695b      	ldr	r3, [r3, #20]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d11b      	bne.n	8001aa2 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6a:	f3bf 8f4f 	dsb	sy
}
 8001a6e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a70:	f3bf 8f6f 	isb	sy
}
 8001a74:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001a76:	4b7e      	ldr	r3, [pc, #504]	; (8001c70 <main+0x218>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7e:	f3bf 8f4f 	dsb	sy
}
 8001a82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a84:	f3bf 8f6f 	isb	sy
}
 8001a88:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001a8a:	4b79      	ldr	r3, [pc, #484]	; (8001c70 <main+0x218>)
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	4a78      	ldr	r2, [pc, #480]	; (8001c70 <main+0x218>)
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a94:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a96:	f3bf 8f4f 	dsb	sy
}
 8001a9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a9c:	f3bf 8f6f 	isb	sy
}
 8001aa0:	e000      	b.n	8001aa4 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001aa2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001aa4:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <main+0x218>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d138      	bne.n	8001b22 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	; (8001c70 <main+0x218>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab8:	f3bf 8f4f 	dsb	sy
}
 8001abc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001abe:	4b6c      	ldr	r3, [pc, #432]	; (8001c70 <main+0x218>)
 8001ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac4:	60bb      	str	r3, [r7, #8]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	0b5b      	lsrs	r3, r3, #13
 8001aca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ace:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	08db      	lsrs	r3, r3, #3
 8001ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ad8:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	015a      	lsls	r2, r3, #5
 8001ade:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001ae2:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001ae8:	4961      	ldr	r1, [pc, #388]	; (8001c70 <main+0x218>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1e5a      	subs	r2, r3, #1
 8001af4:	603a      	str	r2, [r7, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ef      	bne.n	8001ada <main+0x82>
    } while(sets-- != 0U);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	1e5a      	subs	r2, r3, #1
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e5      	bne.n	8001ad0 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001b04:	f3bf 8f4f 	dsb	sy
}
 8001b08:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <main+0x218>)
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	4a58      	ldr	r2, [pc, #352]	; (8001c70 <main+0x218>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b16:	f3bf 8f4f 	dsb	sy
}
 8001b1a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b1c:	f3bf 8f6f 	isb	sy
}
 8001b20:	e000      	b.n	8001b24 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001b22:	bf00      	nop
  //}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b24:	f000 fea6 	bl	8002874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b28:	f000 f8ac 	bl	8001c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b2c:	f000 fa2a 	bl	8001f84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b30:	f000 f9dc 	bl	8001eec <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 8001b34:	f00c fbb2 	bl	800e29c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001b38:	f000 f920 	bl	8001d7c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  InitArm();
 8001b3c:	f7fe fe3c 	bl	80007b8 <InitArm>
  HAL_TIM_Base_Start(&htim1);
 8001b40:	484c      	ldr	r0, [pc, #304]	; (8001c74 <main+0x21c>)
 8001b42:	f006 f93b 	bl	8007dbc <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001b46:	2100      	movs	r1, #0
 8001b48:	484a      	ldr	r0, [pc, #296]	; (8001c74 <main+0x21c>)
 8001b4a:	f006 fa09 	bl	8007f60 <HAL_TIM_OC_Start_IT>
  HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_2);
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4848      	ldr	r0, [pc, #288]	; (8001c74 <main+0x21c>)
 8001b52:	f006 fa05 	bl	8007f60 <HAL_TIM_OC_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //CDC_Transmit_FS((uint8_t *)data, strlen(data));
	  bool f = false;
 8001b56:	2300      	movs	r3, #0
 8001b58:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL1_GPIO_Port, JL1_Pin) == GPIO_PIN_RESET ? true : false;
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	4846      	ldr	r0, [pc, #280]	; (8001c78 <main+0x220>)
 8001b5e:	f001 ff6f 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL2_GPIO_Port, JL2_Pin) == GPIO_PIN_RESET ? true : false;
 8001b7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b82:	483e      	ldr	r0, [pc, #248]	; (8001c7c <main+0x224>)
 8001b84:	f001 ff5c 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	bf0c      	ite	eq
 8001b8e:	2301      	moveq	r3, #1
 8001b90:	2300      	movne	r3, #0
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	461a      	mov	r2, r3
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL3_GPIO_Port, JL3_Pin) == GPIO_PIN_RESET ? true : false;
 8001ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ba8:	4834      	ldr	r0, [pc, #208]	; (8001c7c <main+0x224>)
 8001baa:	f001 ff49 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL4_GPIO_Port, JL4_Pin) == GPIO_PIN_RESET ? true : false;
 8001bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bce:	482b      	ldr	r0, [pc, #172]	; (8001c7c <main+0x224>)
 8001bd0:	f001 ff36 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf0c      	ite	eq
 8001bda:	2301      	moveq	r3, #1
 8001bdc:	2300      	movne	r3, #0
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	bf14      	ite	ne
 8001bea:	2301      	movne	r3, #1
 8001bec:	2300      	moveq	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL5_GPIO_Port, JL5_Pin) == GPIO_PIN_RESET ? true : false;
 8001bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bf4:	4821      	ldr	r0, [pc, #132]	; (8001c7c <main+0x224>)
 8001bf6:	f001 ff23 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	461a      	mov	r2, r3
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]
	  f |= HAL_GPIO_ReadPin(JL6_GPIO_Port, JL6_Pin) == GPIO_PIN_RESET ? true : false;
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	4818      	ldr	r0, [pc, #96]	; (8001c7c <main+0x224>)
 8001c1c:	f001 ff10 	bl	8003a40 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	bf14      	ite	ne
 8001c36:	2301      	movne	r3, #1
 8001c38:	2300      	moveq	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]
	  if (f){
 8001c3c:	7bfb      	ldrb	r3, [r7, #15]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d006      	beq.n	8001c50 <main+0x1f8>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8001c42:	2201      	movs	r2, #1
 8001c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c48:	480d      	ldr	r0, [pc, #52]	; (8001c80 <main+0x228>)
 8001c4a:	f001 ff11 	bl	8003a70 <HAL_GPIO_WritePin>
 8001c4e:	e005      	b.n	8001c5c <main+0x204>
	  }else{
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c56:	480a      	ldr	r0, [pc, #40]	; (8001c80 <main+0x228>)
 8001c58:	f001 ff0a 	bl	8003a70 <HAL_GPIO_WritePin>
	  }
	  if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET){
 8001c5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c60:	4806      	ldr	r0, [pc, #24]	; (8001c7c <main+0x224>)
 8001c62:	f001 feed 	bl	8003a40 <HAL_GPIO_ReadPin>
		  //FindHomeJoint(JOINT6);
		  //JointFindedHome(1);
	  }
	  HAL_Delay(1);
 8001c66:	2001      	movs	r0, #1
 8001c68:	f000 fe96 	bl	8002998 <HAL_Delay>
  {
 8001c6c:	e773      	b.n	8001b56 <main+0xfe>
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	240004d8 	.word	0x240004d8
 8001c78:	58020c00 	.word	0x58020c00
 8001c7c:	58020800 	.word	0x58020800
 8001c80:	58020400 	.word	0x58020400

08001c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b09c      	sub	sp, #112	; 0x70
 8001c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	224c      	movs	r2, #76	; 0x4c
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00d febd 	bl	800fa12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f00d feb7 	bl	800fa12 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ca4:	2004      	movs	r0, #4
 8001ca6:	f003 f9b5 	bl	8005014 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001caa:	2300      	movs	r3, #0
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	4a30      	ldr	r2, [pc, #192]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001cba:	4b2e      	ldr	r3, [pc, #184]	; (8001d74 <SystemClock_Config+0xf0>)
 8001cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	603b      	str	r3, [r7, #0]
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <SystemClock_Config+0xf4>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ccc:	4a2a      	ldr	r2, [pc, #168]	; (8001d78 <SystemClock_Config+0xf4>)
 8001cce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b28      	ldr	r3, [pc, #160]	; (8001d78 <SystemClock_Config+0xf4>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001ce0:	bf00      	nop
 8001ce2:	4b25      	ldr	r3, [pc, #148]	; (8001d78 <SystemClock_Config+0xf4>)
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cee:	d1f8      	bne.n	8001ce2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d06:	2332      	movs	r3, #50	; 0x32
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d16:	230c      	movs	r3, #12
 8001d18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f9de 	bl	80050e8 <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d32:	f000 fa5d 	bl	80021f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	233f      	movs	r3, #63	; 0x3f
 8001d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d42:	2308      	movs	r3, #8
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	2102      	movs	r1, #2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fe1e 	bl	800599c <HAL_RCC_ClockConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001d66:	f000 fa43 	bl	80021f0 <Error_Handler>
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	3770      	adds	r7, #112	; 0x70
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58024800 	.word	0x58024800

08001d7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09a      	sub	sp, #104	; 0x68
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	222c      	movs	r2, #44	; 0x2c
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00d fe2b 	bl	800fa12 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001dbc:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dbe:	4a4a      	ldr	r2, [pc, #296]	; (8001ee8 <MX_TIM1_Init+0x16c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8001dd0:	4b44      	ldr	r3, [pc, #272]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dd2:	2209      	movs	r2, #9
 8001dd4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b43      	ldr	r3, [pc, #268]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ddc:	4b41      	ldr	r3, [pc, #260]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001de8:	483e      	ldr	r0, [pc, #248]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001dea:	f005 ff8f 	bl	8007d0c <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001df4:	f000 f9fc 	bl	80021f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e02:	4619      	mov	r1, r3
 8001e04:	4837      	ldr	r0, [pc, #220]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001e06:	f006 fb9f 	bl	8008548 <HAL_TIM_ConfigClockSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001e10:	f000 f9ee 	bl	80021f0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001e14:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001e16:	f006 f841 	bl	8007e9c <HAL_TIM_OC_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001e20:	f000 f9e6 	bl	80021f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e30:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001e34:	4619      	mov	r1, r3
 8001e36:	482b      	ldr	r0, [pc, #172]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001e38:	f007 f8da 	bl	8008ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001e42:	f000 f9d5 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e46:	2300      	movs	r3, #0
 8001e48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e52:	2300      	movs	r3, #0
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e66:	2200      	movs	r2, #0
 8001e68:	4619      	mov	r1, r3
 8001e6a:	481e      	ldr	r0, [pc, #120]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001e6c:	f006 faf2 	bl	8008454 <HAL_TIM_OC_ConfigChannel>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001e76:	f000 f9bb 	bl	80021f0 <Error_Handler>
  }
  sConfigOC.Pulse = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e82:	2204      	movs	r2, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4817      	ldr	r0, [pc, #92]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001e88:	f006 fae4 	bl	8008454 <HAL_TIM_OC_ConfigChannel>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001e92:	f000 f9ad 	bl	80021f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001eb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <MX_TIM1_Init+0x168>)
 8001ecc:	f007 f91e 	bl	800910c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <MX_TIM1_Init+0x15e>
  {
    Error_Handler();
 8001ed6:	f000 f98b 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eda:	bf00      	nop
 8001edc:	3768      	adds	r7, #104	; 0x68
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	240004d8 	.word	0x240004d8
 8001ee8:	40010000 	.word	0x40010000

08001eec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ef0:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001ef2:	4a23      	ldr	r2, [pc, #140]	; (8001f80 <MX_USART3_UART_Init+0x94>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ef6:	4b21      	ldr	r3, [pc, #132]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f22:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f34:	4811      	ldr	r0, [pc, #68]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f36:	f007 f985 	bl	8009244 <HAL_UART_Init>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f40:	f000 f956 	bl	80021f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f44:	2100      	movs	r1, #0
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f48:	f008 fdc0 	bl	800aacc <HAL_UARTEx_SetTxFifoThreshold>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f52:	f000 f94d 	bl	80021f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f56:	2100      	movs	r1, #0
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f5a:	f008 fdf5 	bl	800ab48 <HAL_UARTEx_SetRxFifoThreshold>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f000 f944 	bl	80021f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f68:	4804      	ldr	r0, [pc, #16]	; (8001f7c <MX_USART3_UART_Init+0x90>)
 8001f6a:	f008 fd76 	bl	800aa5a <HAL_UARTEx_DisableFifoMode>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f74:	f000 f93c 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	24000524 	.word	0x24000524
 8001f80:	40004800 	.word	0x40004800

08001f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9a:	4b8e      	ldr	r3, [pc, #568]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	4a8c      	ldr	r2, [pc, #560]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001faa:	4b8a      	ldr	r3, [pc, #552]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a85      	ldr	r2, [pc, #532]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fc0:	f043 0304 	orr.w	r3, r3, #4
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b82      	ldr	r3, [pc, #520]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	61fb      	str	r3, [r7, #28]
 8001fd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a7d      	ldr	r2, [pc, #500]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fde:	f043 0320 	orr.w	r3, r3, #32
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ff4:	4b77      	ldr	r3, [pc, #476]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a76      	ldr	r2, [pc, #472]	; (80021d4 <MX_GPIO_Init+0x250>)
 8001ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002018:	4a6e      	ldr	r2, [pc, #440]	; (80021d4 <MX_GPIO_Init+0x250>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002022:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	4a67      	ldr	r2, [pc, #412]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	4a5f      	ldr	r2, [pc, #380]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800205a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205e:	4b5d      	ldr	r3, [pc, #372]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206c:	4b59      	ldr	r3, [pc, #356]	; (80021d4 <MX_GPIO_Init+0x250>)
 800206e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002072:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <MX_GPIO_Init+0x250>)
 8002074:	f043 0301 	orr.w	r3, r3, #1
 8002078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800207c:	4b55      	ldr	r3, [pc, #340]	; (80021d4 <MX_GPIO_Init+0x250>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, J4P_Pin|J2P_Pin|J4D_Pin|J3P_Pin
 800208a:	2200      	movs	r2, #0
 800208c:	217e      	movs	r1, #126	; 0x7e
 800208e:	4852      	ldr	r0, [pc, #328]	; (80021d8 <MX_GPIO_Init+0x254>)
 8002090:	f001 fcee 	bl	8003a70 <HAL_GPIO_WritePin>
                          |J3D_Pin|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, J1P_Pin|J2D_Pin|J1D_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	f44f 7160 	mov.w	r1, #896	; 0x380
 800209a:	4850      	ldr	r0, [pc, #320]	; (80021dc <MX_GPIO_Init+0x258>)
 800209c:	f001 fce8 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020a6:	484e      	ldr	r0, [pc, #312]	; (80021e0 <MX_GPIO_Init+0x25c>)
 80020a8:	f001 fce2 	bl	8003a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|J5D_Pin|J5P_Pin|J6D_Pin
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 618f 	mov.w	r1, #1144	; 0x478
 80020b2:	484c      	ldr	r0, [pc, #304]	; (80021e4 <MX_GPIO_Init+0x260>)
 80020b4:	f001 fcdc 	bl	8003a70 <HAL_GPIO_WritePin>
                          |J6P_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : J4P_Pin J2P_Pin J4D_Pin J3P_Pin
                           J3D_Pin */
  GPIO_InitStruct.Pin = J4P_Pin|J2P_Pin|J4D_Pin|J3P_Pin
 80020b8:	237c      	movs	r3, #124	; 0x7c
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |J3D_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020bc:	2311      	movs	r3, #17
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c4:	2302      	movs	r3, #2
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020cc:	4619      	mov	r1, r3
 80020ce:	4842      	ldr	r0, [pc, #264]	; (80021d8 <MX_GPIO_Init+0x254>)
 80020d0:	f001 fb06 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	483f      	ldr	r0, [pc, #252]	; (80021e8 <MX_GPIO_Init+0x264>)
 80020ea:	f001 faf9 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : J1P_Pin J2D_Pin J1D_Pin */
  GPIO_InitStruct.Pin = J1P_Pin|J2D_Pin|J1D_Pin;
 80020ee:	f44f 7360 	mov.w	r3, #896	; 0x380
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020f4:	2311      	movs	r3, #17
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020fc:	2302      	movs	r3, #2
 80020fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002104:	4619      	mov	r1, r3
 8002106:	4835      	ldr	r0, [pc, #212]	; (80021dc <MX_GPIO_Init+0x258>)
 8002108:	f001 faea 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800210c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002112:	2301      	movs	r3, #1
 8002114:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800211e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002122:	4619      	mov	r1, r3
 8002124:	482e      	ldr	r0, [pc, #184]	; (80021e0 <MX_GPIO_Init+0x25c>)
 8002126:	f001 fadb 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800212a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002130:	2301      	movs	r3, #1
 8002132:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4619      	mov	r1, r3
 8002142:	4828      	ldr	r0, [pc, #160]	; (80021e4 <MX_GPIO_Init+0x260>)
 8002144:	f001 facc 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800214c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	4619      	mov	r1, r3
 800215c:	4823      	ldr	r0, [pc, #140]	; (80021ec <MX_GPIO_Init+0x268>)
 800215e:	f001 fabf 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : JL6_Pin JL5_Pin JL4_Pin JL3_Pin
                           JL2_Pin */
  GPIO_InitStruct.Pin = JL6_Pin|JL5_Pin|JL4_Pin|JL3_Pin
 8002162:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
                          |JL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002168:	2300      	movs	r3, #0
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800216c:	2301      	movs	r3, #1
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	481c      	ldr	r0, [pc, #112]	; (80021e8 <MX_GPIO_Init+0x264>)
 8002178:	f001 fab2 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : JL1_Pin */
  GPIO_InitStruct.Pin = JL1_Pin;
 800217c:	2304      	movs	r3, #4
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JL1_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	4815      	ldr	r0, [pc, #84]	; (80021e4 <MX_GPIO_Init+0x260>)
 8002190:	f001 faa6 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : J5D_Pin J5P_Pin J6D_Pin J6P_Pin */
  GPIO_InitStruct.Pin = J5D_Pin|J5P_Pin|J6D_Pin|J6P_Pin;
 8002194:	2378      	movs	r3, #120	; 0x78
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002198:	2311      	movs	r3, #17
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	2300      	movs	r3, #0
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021a0:	2302      	movs	r3, #2
 80021a2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a8:	4619      	mov	r1, r3
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <MX_GPIO_Init+0x260>)
 80021ac:	f001 fa98 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80021b0:	2302      	movs	r3, #2
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <MX_GPIO_Init+0x254>)
 80021c8:	f001 fa8a 	bl	80036e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021cc:	bf00      	nop
 80021ce:	3738      	adds	r7, #56	; 0x38
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58021000 	.word	0x58021000
 80021dc:	58021400 	.word	0x58021400
 80021e0:	58020400 	.word	0x58020400
 80021e4:	58020c00 	.word	0x58020c00
 80021e8:	58020800 	.word	0x58020800
 80021ec:	58021800 	.word	0x58021800

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>
	...

080021fc <AddPathPoint>:

uint32_t current_point = 0;
uint32_t all_point = 0;
bool moving_path = false;

void AddPathPoint(double speed, uint32_t j1, uint32_t j2, uint32_t j3, uint32_t j4, uint32_t j5, uint32_t j6){
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	ed87 0b04 	vstr	d0, [r7, #16]
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
 800220c:	603b      	str	r3, [r7, #0]
	uint32_t ins = all_point % COUNT_POINT_PATH;
 800220e:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <AddPathPoint+0xa4>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <AddPathPoint+0xa8>)
 8002214:	fba2 1203 	umull	r1, r2, r2, r3
 8002218:	0952      	lsrs	r2, r2, #5
 800221a:	2164      	movs	r1, #100	; 0x64
 800221c:	fb01 f202 	mul.w	r2, r1, r2
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	61fb      	str	r3, [r7, #28]
	path[ins].speed = speed;
 8002224:	4a20      	ldr	r2, [pc, #128]	; (80022a8 <AddPathPoint+0xac>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	015b      	lsls	r3, r3, #5
 800222a:	18d1      	adds	r1, r2, r3
 800222c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002230:	e9c1 2300 	strd	r2, r3, [r1]
	path[ins].j1 = j1;
 8002234:	4a1c      	ldr	r2, [pc, #112]	; (80022a8 <AddPathPoint+0xac>)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	015b      	lsls	r3, r3, #5
 800223a:	4413      	add	r3, r2
 800223c:	3308      	adds	r3, #8
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	601a      	str	r2, [r3, #0]
	path[ins].j2 = j2;
 8002242:	4a19      	ldr	r2, [pc, #100]	; (80022a8 <AddPathPoint+0xac>)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	015b      	lsls	r3, r3, #5
 8002248:	4413      	add	r3, r2
 800224a:	330c      	adds	r3, #12
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	601a      	str	r2, [r3, #0]
	path[ins].j3 = j3;
 8002250:	4a15      	ldr	r2, [pc, #84]	; (80022a8 <AddPathPoint+0xac>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	4413      	add	r3, r2
 8002258:	3310      	adds	r3, #16
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	601a      	str	r2, [r3, #0]
	path[ins].j4 = j4;
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <AddPathPoint+0xac>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	015b      	lsls	r3, r3, #5
 8002264:	4413      	add	r3, r2
 8002266:	3314      	adds	r3, #20
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	601a      	str	r2, [r3, #0]
	path[ins].j5 = j5;
 800226c:	4a0e      	ldr	r2, [pc, #56]	; (80022a8 <AddPathPoint+0xac>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	015b      	lsls	r3, r3, #5
 8002272:	4413      	add	r3, r2
 8002274:	3318      	adds	r3, #24
 8002276:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002278:	601a      	str	r2, [r3, #0]
	path[ins].j6 = j6;
 800227a:	4a0b      	ldr	r2, [pc, #44]	; (80022a8 <AddPathPoint+0xac>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	4413      	add	r3, r2
 8002282:	331c      	adds	r3, #28
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002286:	601a      	str	r2, [r3, #0]
	all_point++;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <AddPathPoint+0xa4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	3301      	adds	r3, #1
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <AddPathPoint+0xa4>)
 8002290:	6013      	str	r3, [r2, #0]
}
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	24001674 	.word	0x24001674
 80022a4:	51eb851f 	.word	0x51eb851f
 80022a8:	240009f0 	.word	0x240009f0

080022ac <ClearPath>:

void ClearPath(void){
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
	current_point = 0;
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <ClearPath+0x1c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
	all_point = 0;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <ClearPath+0x20>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	24001670 	.word	0x24001670
 80022cc:	24001674 	.word	0x24001674

080022d0 <GetNextPoint>:

int GetNextPoint(void){
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
	if (current_point < all_point){
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <GetNextPoint+0x44>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <GetNextPoint+0x48>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d20c      	bcs.n	80022fc <GetNextPoint+0x2c>
		uint32_t p = current_point % COUNT_POINT_PATH;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <GetNextPoint+0x44>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a0d      	ldr	r2, [pc, #52]	; (800231c <GetNextPoint+0x4c>)
 80022e8:	fba2 1203 	umull	r1, r2, r2, r3
 80022ec:	0952      	lsrs	r2, r2, #5
 80022ee:	2164      	movs	r1, #100	; 0x64
 80022f0:	fb01 f202 	mul.w	r2, r1, r2
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	607b      	str	r3, [r7, #4]
		return p;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	e004      	b.n	8002306 <GetNextPoint+0x36>
	}
	moving_path = false;
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <GetNextPoint+0x50>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
	return -1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	24001670 	.word	0x24001670
 8002318:	24001674 	.word	0x24001674
 800231c:	51eb851f 	.word	0x51eb851f
 8002320:	24001678 	.word	0x24001678

08002324 <GetNextPointWithStep>:

int GetNextPointWithStep(void){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
	int f = GetNextPoint();
 800232a:	f7ff ffd1 	bl	80022d0 <GetNextPoint>
 800232e:	6078      	str	r0, [r7, #4]
	if (f >= 0){
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db16      	blt.n	8002364 <GetNextPointWithStep+0x40>
		if ((current_point % BLOCK_COUNT) == 0 && current_point != 0){
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <GetNextPointWithStep+0x4c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <GetNextPointWithStep+0x50>)
 800233c:	fba3 1302 	umull	r1, r3, r3, r2
 8002340:	091b      	lsrs	r3, r3, #4
 8002342:	2132      	movs	r1, #50	; 0x32
 8002344:	fb01 f303 	mul.w	r3, r1, r3
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d105      	bne.n	800235a <GetNextPointWithStep+0x36>
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <GetNextPointWithStep+0x4c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <GetNextPointWithStep+0x36>
			BlockMoveEndMessage();
 8002356:	f7fe fe37 	bl	8000fc8 <BlockMoveEndMessage>
		}
		current_point++;
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <GetNextPointWithStep+0x4c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <GetNextPointWithStep+0x4c>)
 8002362:	6013      	str	r3, [r2, #0]
	}
	return f;
 8002364:	687b      	ldr	r3, [r7, #4]
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	24001670 	.word	0x24001670
 8002374:	51eb851f 	.word	0x51eb851f

08002378 <PathMoving>:

bool PathMoving(void){
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
	return moving_path;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <PathMoving+0x14>)
 800237e:	781b      	ldrb	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	24001678 	.word	0x24001678

08002390 <PathStep>:

bool PathStep(void){
 8002390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002392:	b085      	sub	sp, #20
 8002394:	af02      	add	r7, sp, #8
	int p = GetNextPointWithStep();
 8002396:	f7ff ffc5 	bl	8002324 <GetNextPointWithStep>
 800239a:	6078      	str	r0, [r7, #4]
	if (p >= 0){
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db3b      	blt.n	800241a <PathStep+0x8a>
		SetMaxSpeed(path[p].speed);
 80023a2:	4a20      	ldr	r2, [pc, #128]	; (8002424 <PathStep+0x94>)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	015b      	lsls	r3, r3, #5
 80023a8:	4413      	add	r3, r2
 80023aa:	ed93 7b00 	vldr	d7, [r3]
 80023ae:	eeb0 0b47 	vmov.f64	d0, d7
 80023b2:	f7fe fce3 	bl	8000d7c <SetMaxSpeed>
		SetTargetPointEqSpeed(path[p].j1, path[p].j2, path[p].j3, path[p].j4, path[p].j5, path[p].j6);
 80023b6:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <PathStep+0x94>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	015b      	lsls	r3, r3, #5
 80023bc:	4413      	add	r3, r2
 80023be:	3308      	adds	r3, #8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	4a17      	ldr	r2, [pc, #92]	; (8002424 <PathStep+0x94>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	015b      	lsls	r3, r3, #5
 80023ca:	4413      	add	r3, r2
 80023cc:	330c      	adds	r3, #12
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	461c      	mov	r4, r3
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <PathStep+0x94>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	4413      	add	r3, r2
 80023da:	3310      	adds	r3, #16
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	461d      	mov	r5, r3
 80023e0:	4a10      	ldr	r2, [pc, #64]	; (8002424 <PathStep+0x94>)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	4413      	add	r3, r2
 80023e8:	3314      	adds	r3, #20
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	461e      	mov	r6, r3
 80023ee:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <PathStep+0x94>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	4413      	add	r3, r2
 80023f6:	3318      	adds	r3, #24
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4a09      	ldr	r2, [pc, #36]	; (8002424 <PathStep+0x94>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	015b      	lsls	r3, r3, #5
 8002402:	4413      	add	r3, r2
 8002404:	331c      	adds	r3, #28
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	9301      	str	r3, [sp, #4]
 800240a:	9100      	str	r1, [sp, #0]
 800240c:	4633      	mov	r3, r6
 800240e:	462a      	mov	r2, r5
 8002410:	4621      	mov	r1, r4
 8002412:	f7fe fb69 	bl	8000ae8 <SetTargetPointEqSpeed>
		return true;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <PathStep+0x8c>
	}
	else{
		return false;
 800241a:	2300      	movs	r3, #0
	}
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002424:	240009f0 	.word	0x240009f0

08002428 <StartMovePath>:

void StartMovePath(void){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	if (!moving_path && all_point > 0){
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <StartMovePath+0x30>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00b      	beq.n	8002452 <StartMovePath+0x2a>
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <StartMovePath+0x34>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d007      	beq.n	8002452 <StartMovePath+0x2a>
		moving_path = true;
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <StartMovePath+0x30>)
 8002444:	2201      	movs	r2, #1
 8002446:	701a      	strb	r2, [r3, #0]
		current_point = 0;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <StartMovePath+0x38>)
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
		PathStep();
 800244e:	f7ff ff9f 	bl	8002390 <PathStep>
	}
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	24001678 	.word	0x24001678
 800245c:	24001674 	.word	0x24001674
 8002460:	24001670 	.word	0x24001670

08002464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_MspInit+0x30>)
 800246c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002470:	4a08      	ldr	r2, [pc, #32]	; (8002494 <HAL_MspInit+0x30>)
 8002472:	f043 0302 	orr.w	r3, r3, #2
 8002476:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <HAL_MspInit+0x30>)
 800247c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	58024400 	.word	0x58024400

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a12      	ldr	r2, [pc, #72]	; (80024f0 <HAL_TIM_Base_MspInit+0x58>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d11e      	bne.n	80024e8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_TIM_Base_MspInit+0x5c>)
 80024ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_TIM_Base_MspInit+0x5c>)
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_TIM_Base_MspInit+0x5c>)
 80024bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80024c8:	2200      	movs	r2, #0
 80024ca:	2100      	movs	r1, #0
 80024cc:	2019      	movs	r0, #25
 80024ce:	f000 fb6e 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80024d2:	2019      	movs	r0, #25
 80024d4:	f000 fb85 	bl	8002be2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80024d8:	2200      	movs	r2, #0
 80024da:	2100      	movs	r1, #0
 80024dc:	201b      	movs	r0, #27
 80024de:	f000 fb66 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80024e2:	201b      	movs	r0, #27
 80024e4:	f000 fb7d 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40010000 	.word	0x40010000
 80024f4:	58024400 	.word	0x58024400

080024f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0ba      	sub	sp, #232	; 0xe8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	22c0      	movs	r2, #192	; 0xc0
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f00d fa7a 	bl	800fa12 <memset>
  if(huart->Instance==USART3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <HAL_UART_MspInit+0xd8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d14e      	bne.n	80025c6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002528:	f04f 0202 	mov.w	r2, #2
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fdb8 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800254a:	f7ff fe51 	bl	80021f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800254e:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	4a1f      	ldr	r2, [pc, #124]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 8002556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 8002560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002564:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002568:	60fb      	str	r3, [r7, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 800256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002572:	4a18      	ldr	r2, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0xdc>)
 800257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800258a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800258e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80025a4:	2307      	movs	r3, #7
 80025a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025ae:	4619      	mov	r1, r3
 80025b0:	4809      	ldr	r0, [pc, #36]	; (80025d8 <HAL_UART_MspInit+0xe0>)
 80025b2:	f001 f895 	bl	80036e0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2027      	movs	r0, #39	; 0x27
 80025bc:	f000 faf7 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025c0:	2027      	movs	r0, #39	; 0x27
 80025c2:	f000 fb0e 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	37e8      	adds	r7, #232	; 0xe8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40004800 	.word	0x40004800
 80025d4:	58024400 	.word	0x58024400
 80025d8:	58020c00 	.word	0x58020c00

080025dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025e0:	e7fe      	b.n	80025e0 <NMI_Handler+0x4>

080025e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025e6:	e7fe      	b.n	80025e6 <HardFault_Handler+0x4>

080025e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <MemManage_Handler+0x4>

080025ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <BusFault_Handler+0x4>

080025f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <UsageFault_Handler+0x4>

080025fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002628:	f000 f996 	bl	8002958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}

08002630 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002634:	4802      	ldr	r0, [pc, #8]	; (8002640 <TIM1_UP_IRQHandler+0x10>)
 8002636:	f005 fded 	bl	8008214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	240004d8 	.word	0x240004d8

08002644 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002648:	4802      	ldr	r0, [pc, #8]	; (8002654 <TIM1_CC_IRQHandler+0x10>)
 800264a:	f005 fde3 	bl	8008214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	240004d8 	.word	0x240004d8

08002658 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800265c:	4802      	ldr	r0, [pc, #8]	; (8002668 <USART3_IRQHandler+0x10>)
 800265e:	f006 fe41 	bl	80092e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	24000524 	.word	0x24000524

0800266c <OTG_FS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS End Point 1 In global interrupt.
  */
void OTG_FS_EP1_IN_IRQHandler(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <OTG_FS_EP1_IN_IRQHandler+0x10>)
 8002672:	f001 fb6f 	bl	8003d54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_FS_EP1_IN_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	24002f68 	.word	0x24002f68

08002680 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002684:	4802      	ldr	r0, [pc, #8]	; (8002690 <OTG_FS_IRQHandler+0x10>)
 8002686:	f001 fb65 	bl	8003d54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	24002f68 	.word	0x24002f68

08002694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_kill>:

int _kill(int pid, int sig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026ae:	f00d fa25 	bl	800fafc <__errno>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2216      	movs	r2, #22
 80026b6:	601a      	str	r2, [r3, #0]
  return -1;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <_exit>:

void _exit (int status)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ffe7 	bl	80026a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026d6:	e7fe      	b.n	80026d6 <_exit+0x12>

080026d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	e00a      	b.n	8002700 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026ea:	f3af 8000 	nop.w
 80026ee:	4601      	mov	r1, r0
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	60ba      	str	r2, [r7, #8]
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	dbf0      	blt.n	80026ea <_read+0x12>
  }

  return len;
 8002708:	687b      	ldr	r3, [r7, #4]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b086      	sub	sp, #24
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e009      	b.n	8002738 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	1c5a      	adds	r2, r3, #1
 8002728:	60ba      	str	r2, [r7, #8]
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	3301      	adds	r3, #1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	dbf1      	blt.n	8002724 <_write+0x12>
  }
  return len;
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <_close>:

int _close(int file)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002752:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002772:	605a      	str	r2, [r3, #4]
  return 0;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <_isatty>:

int _isatty(int file)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027bc:	4a14      	ldr	r2, [pc, #80]	; (8002810 <_sbrk+0x5c>)
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <_sbrk+0x60>)
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c8:	4b13      	ldr	r3, [pc, #76]	; (8002818 <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d0:	4b11      	ldr	r3, [pc, #68]	; (8002818 <_sbrk+0x64>)
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <_sbrk+0x68>)
 80027d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <_sbrk+0x64>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d207      	bcs.n	80027f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e4:	f00d f98a 	bl	800fafc <__errno>
 80027e8:	4603      	mov	r3, r0
 80027ea:	220c      	movs	r2, #12
 80027ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ee:	f04f 33ff 	mov.w	r3, #4294967295
 80027f2:	e009      	b.n	8002808 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f4:	4b08      	ldr	r3, [pc, #32]	; (8002818 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <_sbrk+0x64>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <_sbrk+0x64>)
 8002804:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002806:	68fb      	ldr	r3, [r7, #12]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	24080000 	.word	0x24080000
 8002814:	00004000 	.word	0x00004000
 8002818:	2400167c 	.word	0x2400167c
 800281c:	240037e0 	.word	0x240037e0

08002820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002824:	f7fd ff32 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002828:	480c      	ldr	r0, [pc, #48]	; (800285c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800282a:	490d      	ldr	r1, [pc, #52]	; (8002860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800282c:	4a0d      	ldr	r2, [pc, #52]	; (8002864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002830:	e002      	b.n	8002838 <LoopCopyDataInit>

08002832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002836:	3304      	adds	r3, #4

08002838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800283a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800283c:	d3f9      	bcc.n	8002832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002844:	e001      	b.n	800284a <LoopFillZerobss>

08002846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002848:	3204      	adds	r2, #4

0800284a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800284a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800284c:	d3fb      	bcc.n	8002846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800284e:	f00d f95b 	bl	800fb08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002852:	f7ff f901 	bl	8001a58 <main>
  bx  lr
 8002856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002858:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800285c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002860:	240002d8 	.word	0x240002d8
  ldr r2, =_sidata
 8002864:	08011fa4 	.word	0x08011fa4
  ldr r2, =_sbss
 8002868:	240002d8 	.word	0x240002d8
  ldr r4, =_ebss
 800286c:	240037e0 	.word	0x240037e0

08002870 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC3_IRQHandler>
	...

08002874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800287a:	2003      	movs	r0, #3
 800287c:	f000 f98c 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002880:	f003 fa42 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <HAL_Init+0x68>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	4913      	ldr	r1, [pc, #76]	; (80028e0 <HAL_Init+0x6c>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <HAL_Init+0x68>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_Init+0x6c>)
 80028a8:	5cd3      	ldrb	r3, [r2, r3]
 80028aa:	f003 031f 	and.w	r3, r3, #31
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
 80028b4:	4a0b      	ldr	r2, [pc, #44]	; (80028e4 <HAL_Init+0x70>)
 80028b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b8:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_Init+0x74>)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028be:	2000      	movs	r0, #0
 80028c0:	f000 f814 	bl	80028ec <HAL_InitTick>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e002      	b.n	80028d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ce:	f7ff fdc9 	bl	8002464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	58024400 	.word	0x58024400
 80028e0:	08011be8 	.word	0x08011be8
 80028e4:	24000004 	.word	0x24000004
 80028e8:	24000000 	.word	0x24000000

080028ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028f4:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_InitTick+0x60>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e021      	b.n	8002944 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_InitTick+0x64>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_InitTick+0x60>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f971 	bl	8002bfe <HAL_SYSTICK_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e00e      	b.n	8002944 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d80a      	bhi.n	8002942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800292c:	2200      	movs	r2, #0
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	f04f 30ff 	mov.w	r0, #4294967295
 8002934:	f000 f93b 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002938:	4a06      	ldr	r2, [pc, #24]	; (8002954 <HAL_InitTick+0x68>)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	e000      	b.n	8002944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2400001c 	.word	0x2400001c
 8002950:	24000000 	.word	0x24000000
 8002954:	24000018 	.word	0x24000018

08002958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x20>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_IncTick+0x24>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4413      	add	r3, r2
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <HAL_IncTick+0x24>)
 800296a:	6013      	str	r3, [r2, #0]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	2400001c 	.word	0x2400001c
 800297c:	24001680 	.word	0x24001680

08002980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return uwTick;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_GetTick+0x14>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	24001680 	.word	0x24001680

08002998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a0:	f7ff ffee 	bl	8002980 <HAL_GetTick>
 80029a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d005      	beq.n	80029be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029b2:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <HAL_Delay+0x44>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029be:	bf00      	nop
 80029c0:	f7ff ffde 	bl	8002980 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d8f7      	bhi.n	80029c0 <HAL_Delay+0x28>
  {
  }
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2400001c 	.word	0x2400001c

080029e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_GetREVID+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0c1b      	lsrs	r3, r3, #16
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	5c001000 	.word	0x5c001000

080029f8 <__NVIC_SetPriorityGrouping>:
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00
 8002a3c:	05fa0000 	.word	0x05fa0000

08002a40 <__NVIC_GetPriorityGrouping>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	; (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	; (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	; (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	88fb      	ldrh	r3, [r7, #6]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	; 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	; 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	; (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bbc:	f7ff ff40 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	68b9      	ldr	r1, [r7, #8]
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff ff90 	bl	8002aec <NVIC_EncodePriority>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff ff5f 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bda:	bf00      	nop
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff ff33 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b082      	sub	sp, #8
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f7ff ffa4 	bl	8002b54 <SysTick_Config>
 8002c0c:	4603      	mov	r3, r0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002c20:	f7ff feae 	bl	8002980 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e2dc      	b.n	80031ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d008      	beq.n	8002c4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e2cd      	b.n	80031ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a76      	ldr	r2, [pc, #472]	; (8002e2c <HAL_DMA_Abort+0x214>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d04a      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_DMA_Abort+0x218>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d045      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a73      	ldr	r2, [pc, #460]	; (8002e34 <HAL_DMA_Abort+0x21c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d040      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a71      	ldr	r2, [pc, #452]	; (8002e38 <HAL_DMA_Abort+0x220>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d03b      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a70      	ldr	r2, [pc, #448]	; (8002e3c <HAL_DMA_Abort+0x224>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d036      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a6e      	ldr	r2, [pc, #440]	; (8002e40 <HAL_DMA_Abort+0x228>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d031      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6d      	ldr	r2, [pc, #436]	; (8002e44 <HAL_DMA_Abort+0x22c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d02c      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a6b      	ldr	r2, [pc, #428]	; (8002e48 <HAL_DMA_Abort+0x230>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d027      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <HAL_DMA_Abort+0x234>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d022      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a68      	ldr	r2, [pc, #416]	; (8002e50 <HAL_DMA_Abort+0x238>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d01d      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a67      	ldr	r2, [pc, #412]	; (8002e54 <HAL_DMA_Abort+0x23c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d018      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	; (8002e58 <HAL_DMA_Abort+0x240>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d013      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a64      	ldr	r2, [pc, #400]	; (8002e5c <HAL_DMA_Abort+0x244>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00e      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a62      	ldr	r2, [pc, #392]	; (8002e60 <HAL_DMA_Abort+0x248>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a61      	ldr	r2, [pc, #388]	; (8002e64 <HAL_DMA_Abort+0x24c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d004      	beq.n	8002cee <HAL_DMA_Abort+0xd6>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a5f      	ldr	r2, [pc, #380]	; (8002e68 <HAL_DMA_Abort+0x250>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_DMA_Abort+0xda>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_DMA_Abort+0xdc>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 021e 	bic.w	r2, r2, #30
 8002d06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695a      	ldr	r2, [r3, #20]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e00a      	b.n	8002d36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 020e 	bic.w	r2, r2, #14
 8002d2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3c      	ldr	r2, [pc, #240]	; (8002e2c <HAL_DMA_Abort+0x214>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d072      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3a      	ldr	r2, [pc, #232]	; (8002e30 <HAL_DMA_Abort+0x218>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d06d      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a39      	ldr	r2, [pc, #228]	; (8002e34 <HAL_DMA_Abort+0x21c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d068      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a37      	ldr	r2, [pc, #220]	; (8002e38 <HAL_DMA_Abort+0x220>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d063      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a36      	ldr	r2, [pc, #216]	; (8002e3c <HAL_DMA_Abort+0x224>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d05e      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a34      	ldr	r2, [pc, #208]	; (8002e40 <HAL_DMA_Abort+0x228>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d059      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a33      	ldr	r2, [pc, #204]	; (8002e44 <HAL_DMA_Abort+0x22c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d054      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a31      	ldr	r2, [pc, #196]	; (8002e48 <HAL_DMA_Abort+0x230>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d04f      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a30      	ldr	r2, [pc, #192]	; (8002e4c <HAL_DMA_Abort+0x234>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d04a      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2e      	ldr	r2, [pc, #184]	; (8002e50 <HAL_DMA_Abort+0x238>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d045      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2d      	ldr	r2, [pc, #180]	; (8002e54 <HAL_DMA_Abort+0x23c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d040      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <HAL_DMA_Abort+0x240>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d03b      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2a      	ldr	r2, [pc, #168]	; (8002e5c <HAL_DMA_Abort+0x244>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d036      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a28      	ldr	r2, [pc, #160]	; (8002e60 <HAL_DMA_Abort+0x248>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d031      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a27      	ldr	r2, [pc, #156]	; (8002e64 <HAL_DMA_Abort+0x24c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d02c      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a25      	ldr	r2, [pc, #148]	; (8002e68 <HAL_DMA_Abort+0x250>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d027      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <HAL_DMA_Abort+0x254>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d022      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a22      	ldr	r2, [pc, #136]	; (8002e70 <HAL_DMA_Abort+0x258>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d01d      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_DMA_Abort+0x25c>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <HAL_DMA_Abort+0x260>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d013      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_DMA_Abort+0x264>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1c      	ldr	r2, [pc, #112]	; (8002e80 <HAL_DMA_Abort+0x268>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1b      	ldr	r2, [pc, #108]	; (8002e84 <HAL_DMA_Abort+0x26c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_DMA_Abort+0x20e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <HAL_DMA_Abort+0x270>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d132      	bne.n	8002e8c <HAL_DMA_Abort+0x274>
 8002e26:	2301      	movs	r3, #1
 8002e28:	e031      	b.n	8002e8e <HAL_DMA_Abort+0x276>
 8002e2a:	bf00      	nop
 8002e2c:	40020010 	.word	0x40020010
 8002e30:	40020028 	.word	0x40020028
 8002e34:	40020040 	.word	0x40020040
 8002e38:	40020058 	.word	0x40020058
 8002e3c:	40020070 	.word	0x40020070
 8002e40:	40020088 	.word	0x40020088
 8002e44:	400200a0 	.word	0x400200a0
 8002e48:	400200b8 	.word	0x400200b8
 8002e4c:	40020410 	.word	0x40020410
 8002e50:	40020428 	.word	0x40020428
 8002e54:	40020440 	.word	0x40020440
 8002e58:	40020458 	.word	0x40020458
 8002e5c:	40020470 	.word	0x40020470
 8002e60:	40020488 	.word	0x40020488
 8002e64:	400204a0 	.word	0x400204a0
 8002e68:	400204b8 	.word	0x400204b8
 8002e6c:	58025408 	.word	0x58025408
 8002e70:	5802541c 	.word	0x5802541c
 8002e74:	58025430 	.word	0x58025430
 8002e78:	58025444 	.word	0x58025444
 8002e7c:	58025458 	.word	0x58025458
 8002e80:	5802546c 	.word	0x5802546c
 8002e84:	58025480 	.word	0x58025480
 8002e88:	58025494 	.word	0x58025494
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6d      	ldr	r2, [pc, #436]	; (800305c <HAL_DMA_Abort+0x444>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d04a      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6b      	ldr	r2, [pc, #428]	; (8003060 <HAL_DMA_Abort+0x448>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d045      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a6a      	ldr	r2, [pc, #424]	; (8003064 <HAL_DMA_Abort+0x44c>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d040      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a68      	ldr	r2, [pc, #416]	; (8003068 <HAL_DMA_Abort+0x450>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d03b      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_DMA_Abort+0x454>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d036      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_DMA_Abort+0x458>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d031      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a64      	ldr	r2, [pc, #400]	; (8003074 <HAL_DMA_Abort+0x45c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d02c      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a62      	ldr	r2, [pc, #392]	; (8003078 <HAL_DMA_Abort+0x460>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d027      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a61      	ldr	r2, [pc, #388]	; (800307c <HAL_DMA_Abort+0x464>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_DMA_Abort+0x468>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01d      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5e      	ldr	r2, [pc, #376]	; (8003084 <HAL_DMA_Abort+0x46c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d018      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_DMA_Abort+0x470>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d013      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5b      	ldr	r2, [pc, #364]	; (800308c <HAL_DMA_Abort+0x474>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d00e      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a59      	ldr	r2, [pc, #356]	; (8003090 <HAL_DMA_Abort+0x478>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d009      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a58      	ldr	r2, [pc, #352]	; (8003094 <HAL_DMA_Abort+0x47c>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d004      	beq.n	8002f42 <HAL_DMA_Abort+0x32a>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_DMA_Abort+0x480>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <HAL_DMA_Abort+0x33c>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_DMA_Abort+0x34c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0201 	bic.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f64:	e013      	b.n	8002f8e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f66:	f7ff fd0b 	bl	8002980 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	d90c      	bls.n	8002f8e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2220      	movs	r2, #32
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2203      	movs	r2, #3
 8002f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e12d      	b.n	80031ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	; (800305c <HAL_DMA_Abort+0x444>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d04a      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <HAL_DMA_Abort+0x448>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d045      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a2c      	ldr	r2, [pc, #176]	; (8003064 <HAL_DMA_Abort+0x44c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d040      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_DMA_Abort+0x450>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d03b      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a29      	ldr	r2, [pc, #164]	; (800306c <HAL_DMA_Abort+0x454>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d036      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_DMA_Abort+0x458>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d031      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a26      	ldr	r2, [pc, #152]	; (8003074 <HAL_DMA_Abort+0x45c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d02c      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_DMA_Abort+0x460>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d027      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_DMA_Abort+0x464>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a21      	ldr	r2, [pc, #132]	; (8003080 <HAL_DMA_Abort+0x468>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01d      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a20      	ldr	r2, [pc, #128]	; (8003084 <HAL_DMA_Abort+0x46c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d018      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_DMA_Abort+0x470>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_DMA_Abort+0x474>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Abort+0x422>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_DMA_Abort+0x478>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d009      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1a      	ldr	r2, [pc, #104]	; (8003094 <HAL_DMA_Abort+0x47c>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d004      	beq.n	800303a <HAL_DMA_Abort+0x422>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <HAL_DMA_Abort+0x480>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d101      	bne.n	800303e <HAL_DMA_Abort+0x426>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_DMA_Abort+0x428>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d02b      	beq.n	800309c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003048:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	f003 031f 	and.w	r3, r3, #31
 8003052:	223f      	movs	r2, #63	; 0x3f
 8003054:	409a      	lsls	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	609a      	str	r2, [r3, #8]
 800305a:	e02a      	b.n	80030b2 <HAL_DMA_Abort+0x49a>
 800305c:	40020010 	.word	0x40020010
 8003060:	40020028 	.word	0x40020028
 8003064:	40020040 	.word	0x40020040
 8003068:	40020058 	.word	0x40020058
 800306c:	40020070 	.word	0x40020070
 8003070:	40020088 	.word	0x40020088
 8003074:	400200a0 	.word	0x400200a0
 8003078:	400200b8 	.word	0x400200b8
 800307c:	40020410 	.word	0x40020410
 8003080:	40020428 	.word	0x40020428
 8003084:	40020440 	.word	0x40020440
 8003088:	40020458 	.word	0x40020458
 800308c:	40020470 	.word	0x40020470
 8003090:	40020488 	.word	0x40020488
 8003094:	400204a0 	.word	0x400204a0
 8003098:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a6:	f003 031f 	and.w	r3, r3, #31
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a4f      	ldr	r2, [pc, #316]	; (80031f4 <HAL_DMA_Abort+0x5dc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d072      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a4d      	ldr	r2, [pc, #308]	; (80031f8 <HAL_DMA_Abort+0x5e0>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d06d      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a4c      	ldr	r2, [pc, #304]	; (80031fc <HAL_DMA_Abort+0x5e4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d068      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a4a      	ldr	r2, [pc, #296]	; (8003200 <HAL_DMA_Abort+0x5e8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d063      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a49      	ldr	r2, [pc, #292]	; (8003204 <HAL_DMA_Abort+0x5ec>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d05e      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a47      	ldr	r2, [pc, #284]	; (8003208 <HAL_DMA_Abort+0x5f0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d059      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a46      	ldr	r2, [pc, #280]	; (800320c <HAL_DMA_Abort+0x5f4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d054      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a44      	ldr	r2, [pc, #272]	; (8003210 <HAL_DMA_Abort+0x5f8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04f      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a43      	ldr	r2, [pc, #268]	; (8003214 <HAL_DMA_Abort+0x5fc>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d04a      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a41      	ldr	r2, [pc, #260]	; (8003218 <HAL_DMA_Abort+0x600>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d045      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a40      	ldr	r2, [pc, #256]	; (800321c <HAL_DMA_Abort+0x604>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d040      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a3e      	ldr	r2, [pc, #248]	; (8003220 <HAL_DMA_Abort+0x608>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d03b      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <HAL_DMA_Abort+0x60c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d036      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3b      	ldr	r2, [pc, #236]	; (8003228 <HAL_DMA_Abort+0x610>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d031      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a3a      	ldr	r2, [pc, #232]	; (800322c <HAL_DMA_Abort+0x614>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d02c      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a38      	ldr	r2, [pc, #224]	; (8003230 <HAL_DMA_Abort+0x618>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d027      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a37      	ldr	r2, [pc, #220]	; (8003234 <HAL_DMA_Abort+0x61c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d022      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a35      	ldr	r2, [pc, #212]	; (8003238 <HAL_DMA_Abort+0x620>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01d      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a34      	ldr	r2, [pc, #208]	; (800323c <HAL_DMA_Abort+0x624>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d018      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a32      	ldr	r2, [pc, #200]	; (8003240 <HAL_DMA_Abort+0x628>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d013      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a31      	ldr	r2, [pc, #196]	; (8003244 <HAL_DMA_Abort+0x62c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00e      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <HAL_DMA_Abort+0x630>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d009      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_DMA_Abort+0x634>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d004      	beq.n	80031a2 <HAL_DMA_Abort+0x58a>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_DMA_Abort+0x638>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d101      	bne.n	80031a6 <HAL_DMA_Abort+0x58e>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_DMA_Abort+0x590>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d015      	beq.n	80031d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80031b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80031d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40020010 	.word	0x40020010
 80031f8:	40020028 	.word	0x40020028
 80031fc:	40020040 	.word	0x40020040
 8003200:	40020058 	.word	0x40020058
 8003204:	40020070 	.word	0x40020070
 8003208:	40020088 	.word	0x40020088
 800320c:	400200a0 	.word	0x400200a0
 8003210:	400200b8 	.word	0x400200b8
 8003214:	40020410 	.word	0x40020410
 8003218:	40020428 	.word	0x40020428
 800321c:	40020440 	.word	0x40020440
 8003220:	40020458 	.word	0x40020458
 8003224:	40020470 	.word	0x40020470
 8003228:	40020488 	.word	0x40020488
 800322c:	400204a0 	.word	0x400204a0
 8003230:	400204b8 	.word	0x400204b8
 8003234:	58025408 	.word	0x58025408
 8003238:	5802541c 	.word	0x5802541c
 800323c:	58025430 	.word	0x58025430
 8003240:	58025444 	.word	0x58025444
 8003244:	58025458 	.word	0x58025458
 8003248:	5802546c 	.word	0x5802546c
 800324c:	58025480 	.word	0x58025480
 8003250:	58025494 	.word	0x58025494

08003254 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e237      	b.n	80036d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800326c:	b2db      	uxtb	r3, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d004      	beq.n	800327c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2280      	movs	r2, #128	; 0x80
 8003276:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e22c      	b.n	80036d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a5c      	ldr	r2, [pc, #368]	; (80033f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d04a      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a5b      	ldr	r2, [pc, #364]	; (80033f8 <HAL_DMA_Abort_IT+0x1a4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d045      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a59      	ldr	r2, [pc, #356]	; (80033fc <HAL_DMA_Abort_IT+0x1a8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d040      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_DMA_Abort_IT+0x1ac>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d03b      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_DMA_Abort_IT+0x1b0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d036      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a55      	ldr	r2, [pc, #340]	; (8003408 <HAL_DMA_Abort_IT+0x1b4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d031      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a53      	ldr	r2, [pc, #332]	; (800340c <HAL_DMA_Abort_IT+0x1b8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02c      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_DMA_Abort_IT+0x1bc>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d027      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a50      	ldr	r2, [pc, #320]	; (8003414 <HAL_DMA_Abort_IT+0x1c0>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d022      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4f      	ldr	r2, [pc, #316]	; (8003418 <HAL_DMA_Abort_IT+0x1c4>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01d      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a4d      	ldr	r2, [pc, #308]	; (800341c <HAL_DMA_Abort_IT+0x1c8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d018      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a4c      	ldr	r2, [pc, #304]	; (8003420 <HAL_DMA_Abort_IT+0x1cc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a4a      	ldr	r2, [pc, #296]	; (8003424 <HAL_DMA_Abort_IT+0x1d0>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00e      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a49      	ldr	r2, [pc, #292]	; (8003428 <HAL_DMA_Abort_IT+0x1d4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d009      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a47      	ldr	r2, [pc, #284]	; (800342c <HAL_DMA_Abort_IT+0x1d8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d004      	beq.n	800331c <HAL_DMA_Abort_IT+0xc8>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a46      	ldr	r2, [pc, #280]	; (8003430 <HAL_DMA_Abort_IT+0x1dc>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d101      	bne.n	8003320 <HAL_DMA_Abort_IT+0xcc>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <HAL_DMA_Abort_IT+0xce>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 8086 	beq.w	8003434 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2204      	movs	r2, #4
 800332c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d04a      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <HAL_DMA_Abort_IT+0x1a4>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d045      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <HAL_DMA_Abort_IT+0x1a8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d040      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2b      	ldr	r2, [pc, #172]	; (8003400 <HAL_DMA_Abort_IT+0x1ac>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d03b      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_DMA_Abort_IT+0x1b0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d036      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a28      	ldr	r2, [pc, #160]	; (8003408 <HAL_DMA_Abort_IT+0x1b4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d031      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a26      	ldr	r2, [pc, #152]	; (800340c <HAL_DMA_Abort_IT+0x1b8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d02c      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a25      	ldr	r2, [pc, #148]	; (8003410 <HAL_DMA_Abort_IT+0x1bc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d027      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a23      	ldr	r2, [pc, #140]	; (8003414 <HAL_DMA_Abort_IT+0x1c0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d022      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a22      	ldr	r2, [pc, #136]	; (8003418 <HAL_DMA_Abort_IT+0x1c4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d01d      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a20      	ldr	r2, [pc, #128]	; (800341c <HAL_DMA_Abort_IT+0x1c8>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d018      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1f      	ldr	r2, [pc, #124]	; (8003420 <HAL_DMA_Abort_IT+0x1cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d013      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1d      	ldr	r2, [pc, #116]	; (8003424 <HAL_DMA_Abort_IT+0x1d0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00e      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1c      	ldr	r2, [pc, #112]	; (8003428 <HAL_DMA_Abort_IT+0x1d4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d009      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1a      	ldr	r2, [pc, #104]	; (800342c <HAL_DMA_Abort_IT+0x1d8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_DMA_Abort_IT+0x17c>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_DMA_Abort_IT+0x1dc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d108      	bne.n	80033e2 <HAL_DMA_Abort_IT+0x18e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e178      	b.n	80036d4 <HAL_DMA_Abort_IT+0x480>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 0201 	bic.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e16f      	b.n	80036d4 <HAL_DMA_Abort_IT+0x480>
 80033f4:	40020010 	.word	0x40020010
 80033f8:	40020028 	.word	0x40020028
 80033fc:	40020040 	.word	0x40020040
 8003400:	40020058 	.word	0x40020058
 8003404:	40020070 	.word	0x40020070
 8003408:	40020088 	.word	0x40020088
 800340c:	400200a0 	.word	0x400200a0
 8003410:	400200b8 	.word	0x400200b8
 8003414:	40020410 	.word	0x40020410
 8003418:	40020428 	.word	0x40020428
 800341c:	40020440 	.word	0x40020440
 8003420:	40020458 	.word	0x40020458
 8003424:	40020470 	.word	0x40020470
 8003428:	40020488 	.word	0x40020488
 800342c:	400204a0 	.word	0x400204a0
 8003430:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020e 	bic.w	r2, r2, #14
 8003442:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6c      	ldr	r2, [pc, #432]	; (80035fc <HAL_DMA_Abort_IT+0x3a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04a      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6b      	ldr	r2, [pc, #428]	; (8003600 <HAL_DMA_Abort_IT+0x3ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d045      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a69      	ldr	r2, [pc, #420]	; (8003604 <HAL_DMA_Abort_IT+0x3b0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d040      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a68      	ldr	r2, [pc, #416]	; (8003608 <HAL_DMA_Abort_IT+0x3b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d03b      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a66      	ldr	r2, [pc, #408]	; (800360c <HAL_DMA_Abort_IT+0x3b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d036      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_DMA_Abort_IT+0x3bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d031      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a63      	ldr	r2, [pc, #396]	; (8003614 <HAL_DMA_Abort_IT+0x3c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02c      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a62      	ldr	r2, [pc, #392]	; (8003618 <HAL_DMA_Abort_IT+0x3c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d027      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a60      	ldr	r2, [pc, #384]	; (800361c <HAL_DMA_Abort_IT+0x3c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a5f      	ldr	r2, [pc, #380]	; (8003620 <HAL_DMA_Abort_IT+0x3cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a5d      	ldr	r2, [pc, #372]	; (8003624 <HAL_DMA_Abort_IT+0x3d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a5c      	ldr	r2, [pc, #368]	; (8003628 <HAL_DMA_Abort_IT+0x3d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5a      	ldr	r2, [pc, #360]	; (800362c <HAL_DMA_Abort_IT+0x3d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a59      	ldr	r2, [pc, #356]	; (8003630 <HAL_DMA_Abort_IT+0x3dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a57      	ldr	r2, [pc, #348]	; (8003634 <HAL_DMA_Abort_IT+0x3e0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_Abort_IT+0x290>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a56      	ldr	r2, [pc, #344]	; (8003638 <HAL_DMA_Abort_IT+0x3e4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_DMA_Abort_IT+0x2a2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e007      	b.n	8003506 <HAL_DMA_Abort_IT+0x2b2>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <HAL_DMA_Abort_IT+0x3a8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d072      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <HAL_DMA_Abort_IT+0x3ac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d06d      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a39      	ldr	r2, [pc, #228]	; (8003604 <HAL_DMA_Abort_IT+0x3b0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d068      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a37      	ldr	r2, [pc, #220]	; (8003608 <HAL_DMA_Abort_IT+0x3b4>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d063      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a36      	ldr	r2, [pc, #216]	; (800360c <HAL_DMA_Abort_IT+0x3b8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d05e      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a34      	ldr	r2, [pc, #208]	; (8003610 <HAL_DMA_Abort_IT+0x3bc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d059      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_DMA_Abort_IT+0x3c0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d054      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_DMA_Abort_IT+0x3c4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d04f      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a30      	ldr	r2, [pc, #192]	; (800361c <HAL_DMA_Abort_IT+0x3c8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d04a      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2e      	ldr	r2, [pc, #184]	; (8003620 <HAL_DMA_Abort_IT+0x3cc>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d045      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <HAL_DMA_Abort_IT+0x3d0>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d040      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a2b      	ldr	r2, [pc, #172]	; (8003628 <HAL_DMA_Abort_IT+0x3d4>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d03b      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a2a      	ldr	r2, [pc, #168]	; (800362c <HAL_DMA_Abort_IT+0x3d8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d036      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a28      	ldr	r2, [pc, #160]	; (8003630 <HAL_DMA_Abort_IT+0x3dc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d031      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a27      	ldr	r2, [pc, #156]	; (8003634 <HAL_DMA_Abort_IT+0x3e0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d02c      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a25      	ldr	r2, [pc, #148]	; (8003638 <HAL_DMA_Abort_IT+0x3e4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d027      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a24      	ldr	r2, [pc, #144]	; (800363c <HAL_DMA_Abort_IT+0x3e8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d022      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	; (8003640 <HAL_DMA_Abort_IT+0x3ec>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01d      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_DMA_Abort_IT+0x3f0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d018      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_DMA_Abort_IT+0x3f4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d013      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	; (800364c <HAL_DMA_Abort_IT+0x3f8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00e      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <HAL_DMA_Abort_IT+0x3fc>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d009      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_DMA_Abort_IT+0x400>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x3a2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a19      	ldr	r2, [pc, #100]	; (8003658 <HAL_DMA_Abort_IT+0x404>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d132      	bne.n	800365c <HAL_DMA_Abort_IT+0x408>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e031      	b.n	800365e <HAL_DMA_Abort_IT+0x40a>
 80035fa:	bf00      	nop
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
 800363c:	58025408 	.word	0x58025408
 8003640:	5802541c 	.word	0x5802541c
 8003644:	58025430 	.word	0x58025430
 8003648:	58025444 	.word	0x58025444
 800364c:	58025458 	.word	0x58025458
 8003650:	5802546c 	.word	0x5802546c
 8003654:	58025480 	.word	0x58025480
 8003658:	58025494 	.word	0x58025494
 800365c:	2300      	movs	r3, #0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003670:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	2201      	movs	r2, #1
 8003682:	409a      	lsls	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003690:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00c      	beq.n	80036b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <HAL_GPIO_Init+0x234>)
 80036f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036f2:	e194      	b.n	8003a1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	4013      	ands	r3, r2
 8003702:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 8186 	beq.w	8003a18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0303 	and.w	r3, r3, #3
 8003714:	2b01      	cmp	r3, #1
 8003716:	d005      	beq.n	8003724 <HAL_GPIO_Init+0x44>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0303 	and.w	r3, r3, #3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d130      	bne.n	8003786 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	2203      	movs	r2, #3
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	43db      	mvns	r3, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4013      	ands	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4313      	orrs	r3, r2
 800374c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800375a:	2201      	movs	r2, #1
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	091b      	lsrs	r3, r3, #4
 8003770:	f003 0201 	and.w	r2, r3, #1
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b03      	cmp	r3, #3
 8003790:	d017      	beq.n	80037c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	2203      	movs	r2, #3
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4013      	ands	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f003 0303 	and.w	r3, r3, #3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d123      	bne.n	8003816 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	08da      	lsrs	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3208      	adds	r2, #8
 80037d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	220f      	movs	r2, #15
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43db      	mvns	r3, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4013      	ands	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4313      	orrs	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	2203      	movs	r2, #3
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0203 	and.w	r2, r3, #3
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4313      	orrs	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80e0 	beq.w	8003a18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003858:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_GPIO_Init+0x238>)
 800385a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800385e:	4a2e      	ldr	r2, [pc, #184]	; (8003918 <HAL_GPIO_Init+0x238>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_GPIO_Init+0x238>)
 800386a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003876:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_GPIO_Init+0x23c>)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	220f      	movs	r2, #15
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43db      	mvns	r3, r3
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	4013      	ands	r3, r2
 8003898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a20      	ldr	r2, [pc, #128]	; (8003920 <HAL_GPIO_Init+0x240>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d052      	beq.n	8003948 <HAL_GPIO_Init+0x268>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a1f      	ldr	r2, [pc, #124]	; (8003924 <HAL_GPIO_Init+0x244>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d031      	beq.n	800390e <HAL_GPIO_Init+0x22e>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a1e      	ldr	r2, [pc, #120]	; (8003928 <HAL_GPIO_Init+0x248>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02b      	beq.n	800390a <HAL_GPIO_Init+0x22a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	; (800392c <HAL_GPIO_Init+0x24c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d025      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <HAL_GPIO_Init+0x250>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <HAL_GPIO_Init+0x254>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1a      	ldr	r2, [pc, #104]	; (8003938 <HAL_GPIO_Init+0x258>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x21a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <HAL_GPIO_Init+0x25c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x216>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <HAL_GPIO_Init+0x260>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x212>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <HAL_GPIO_Init+0x264>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x20e>
 80038ea:	2309      	movs	r3, #9
 80038ec:	e02d      	b.n	800394a <HAL_GPIO_Init+0x26a>
 80038ee:	230a      	movs	r3, #10
 80038f0:	e02b      	b.n	800394a <HAL_GPIO_Init+0x26a>
 80038f2:	2308      	movs	r3, #8
 80038f4:	e029      	b.n	800394a <HAL_GPIO_Init+0x26a>
 80038f6:	2307      	movs	r3, #7
 80038f8:	e027      	b.n	800394a <HAL_GPIO_Init+0x26a>
 80038fa:	2306      	movs	r3, #6
 80038fc:	e025      	b.n	800394a <HAL_GPIO_Init+0x26a>
 80038fe:	2305      	movs	r3, #5
 8003900:	e023      	b.n	800394a <HAL_GPIO_Init+0x26a>
 8003902:	2304      	movs	r3, #4
 8003904:	e021      	b.n	800394a <HAL_GPIO_Init+0x26a>
 8003906:	2303      	movs	r3, #3
 8003908:	e01f      	b.n	800394a <HAL_GPIO_Init+0x26a>
 800390a:	2302      	movs	r3, #2
 800390c:	e01d      	b.n	800394a <HAL_GPIO_Init+0x26a>
 800390e:	2301      	movs	r3, #1
 8003910:	e01b      	b.n	800394a <HAL_GPIO_Init+0x26a>
 8003912:	bf00      	nop
 8003914:	58000080 	.word	0x58000080
 8003918:	58024400 	.word	0x58024400
 800391c:	58000400 	.word	0x58000400
 8003920:	58020000 	.word	0x58020000
 8003924:	58020400 	.word	0x58020400
 8003928:	58020800 	.word	0x58020800
 800392c:	58020c00 	.word	0x58020c00
 8003930:	58021000 	.word	0x58021000
 8003934:	58021400 	.word	0x58021400
 8003938:	58021800 	.word	0x58021800
 800393c:	58021c00 	.word	0x58021c00
 8003940:	58022000 	.word	0x58022000
 8003944:	58022400 	.word	0x58022400
 8003948:	2300      	movs	r3, #0
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	f002 0203 	and.w	r2, r2, #3
 8003950:	0092      	lsls	r2, r2, #2
 8003952:	4093      	lsls	r3, r2
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800395a:	4938      	ldr	r1, [pc, #224]	; (8003a3c <HAL_GPIO_Init+0x35c>)
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	3302      	adds	r3, #2
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	43db      	mvns	r3, r3
 8003974:	69ba      	ldr	r2, [r7, #24]
 8003976:	4013      	ands	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800398e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4013      	ands	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa22 f303 	lsr.w	r3, r2, r3
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f47f ae63 	bne.w	80036f4 <HAL_GPIO_Init+0x14>
  }
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	3724      	adds	r7, #36	; 0x24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	58000400 	.word	0x58000400

08003a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	887b      	ldrh	r3, [r7, #2]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e001      	b.n	8003a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a80:	787b      	ldrb	r3, [r7, #1]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a86:	887a      	ldrh	r2, [r7, #2]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a8c:	e003      	b.n	8003a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	041a      	lsls	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	619a      	str	r2, [r3, #24]
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa4:	b08f      	sub	sp, #60	; 0x3c
 8003aa6:	af0a      	add	r7, sp, #40	; 0x28
 8003aa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e116      	b.n	8003ce2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f00a fe72 	bl	800e7b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2203      	movs	r2, #3
 8003ad8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d102      	bne.n	8003aee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f007 f9d5 	bl	800aea2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	603b      	str	r3, [r7, #0]
 8003afe:	687e      	ldr	r6, [r7, #4]
 8003b00:	466d      	mov	r5, sp
 8003b02:	f106 0410 	add.w	r4, r6, #16
 8003b06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b12:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b16:	1d33      	adds	r3, r6, #4
 8003b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b1a:	6838      	ldr	r0, [r7, #0]
 8003b1c:	f007 f8a0 	bl	800ac60 <USB_CoreInit>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0d7      	b.n	8003ce2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2100      	movs	r1, #0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f007 f9c3 	bl	800aec4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
 8003b42:	e04a      	b.n	8003bda <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b44:	7bfa      	ldrb	r2, [r7, #15]
 8003b46:	6879      	ldr	r1, [r7, #4]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	4413      	add	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	333d      	adds	r3, #61	; 0x3d
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b58:	7bfa      	ldrb	r2, [r7, #15]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	333c      	adds	r3, #60	; 0x3c
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b6c:	7bfa      	ldrb	r2, [r7, #15]
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	b298      	uxth	r0, r3
 8003b72:	6879      	ldr	r1, [r7, #4]
 8003b74:	4613      	mov	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	4413      	add	r3, r2
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	440b      	add	r3, r1
 8003b7e:	3356      	adds	r3, #86	; 0x56
 8003b80:	4602      	mov	r2, r0
 8003b82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b84:	7bfa      	ldrb	r2, [r7, #15]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	3340      	adds	r3, #64	; 0x40
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b98:	7bfa      	ldrb	r2, [r7, #15]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3344      	adds	r3, #68	; 0x44
 8003ba8:	2200      	movs	r2, #0
 8003baa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3348      	adds	r3, #72	; 0x48
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	4413      	add	r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334c      	adds	r3, #76	; 0x4c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	73fb      	strb	r3, [r7, #15]
 8003bda:	7bfa      	ldrb	r2, [r7, #15]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3af      	bcc.n	8003b44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	e044      	b.n	8003c74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bea:	7bfa      	ldrb	r2, [r7, #15]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c00:	7bfa      	ldrb	r2, [r7, #15]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c16:	7bfa      	ldrb	r2, [r7, #15]
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c42:	7bfa      	ldrb	r2, [r7, #15]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	3301      	adds	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
 8003c74:	7bfa      	ldrb	r2, [r7, #15]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d3b5      	bcc.n	8003bea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	687e      	ldr	r6, [r7, #4]
 8003c86:	466d      	mov	r5, sp
 8003c88:	f106 0410 	add.w	r4, r6, #16
 8003c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c98:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c9c:	1d33      	adds	r3, r6, #4
 8003c9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca0:	6838      	ldr	r0, [r7, #0]
 8003ca2:	f007 f95b 	bl	800af5c <USB_DevInit>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e014      	b.n	8003ce2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d102      	bne.n	8003cd6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f001 f96f 	bl	8004fb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f008 f99d 	bl	800c01a <USB_DevDisconnect>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_PCD_Start+0x1c>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e022      	b.n	8003d4c <HAL_PCD_Start+0x62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d109      	bne.n	8003d2e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d105      	bne.n	8003d2e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f007 f8a4 	bl	800ae80 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f008 f94b 	bl	800bfd8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d54:	b590      	push	{r4, r7, lr}
 8003d56:	b08d      	sub	sp, #52	; 0x34
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f008 fa09 	bl	800c182 <USB_GetMode>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f040 84b7 	bne.w	80046e6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f008 f96d 	bl	800c05c <USB_ReadInterrupts>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 84ad 	beq.w	80046e4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	0a1b      	lsrs	r3, r3, #8
 8003d94:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f008 f95a 	bl	800c05c <USB_ReadInterrupts>
 8003da8:	4603      	mov	r3, r0
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d107      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695a      	ldr	r2, [r3, #20]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 0202 	and.w	r2, r2, #2
 8003dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f008 f948 	bl	800c05c <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b10      	cmp	r3, #16
 8003dd4:	d161      	bne.n	8003e9a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699a      	ldr	r2, [r3, #24]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f022 0210 	bic.w	r2, r2, #16
 8003de4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	3304      	adds	r3, #4
 8003e04:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	0c5b      	lsrs	r3, r3, #17
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d124      	bne.n	8003e5c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d035      	beq.n	8003e8a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	6a38      	ldr	r0, [r7, #32]
 8003e32:	f007 ff7f 	bl	800bd34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	68da      	ldr	r2, [r3, #12]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e42:	441a      	add	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e54:	441a      	add	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	615a      	str	r2, [r3, #20]
 8003e5a:	e016      	b.n	8003e8a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	0c5b      	lsrs	r3, r3, #17
 8003e60:	f003 030f 	and.w	r3, r3, #15
 8003e64:	2b06      	cmp	r3, #6
 8003e66:	d110      	bne.n	8003e8a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e6e:	2208      	movs	r2, #8
 8003e70:	4619      	mov	r1, r3
 8003e72:	6a38      	ldr	r0, [r7, #32]
 8003e74:	f007 ff5e 	bl	800bd34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	695a      	ldr	r2, [r3, #20]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	091b      	lsrs	r3, r3, #4
 8003e80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e84:	441a      	add	r2, r3
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0210 	orr.w	r2, r2, #16
 8003e98:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f008 f8dc 	bl	800c05c <USB_ReadInterrupts>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eaa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003eae:	f040 80a7 	bne.w	8004000 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f008 f8e1 	bl	800c082 <USB_ReadDevAllOutEpInterrupt>
 8003ec0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ec2:	e099      	b.n	8003ff8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 808e 	beq.w	8003fec <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f008 f905 	bl	800c0ea <USB_ReadDevOutEPInterrupt>
 8003ee0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00c      	beq.n	8003f06 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2301      	movs	r3, #1
 8003efc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 fed1 	bl	8004ca8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00c      	beq.n	8003f2a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f12:	015a      	lsls	r2, r3, #5
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	4413      	add	r3, r2
 8003f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2308      	movs	r3, #8
 8003f20:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 ffa7 	bl	8004e78 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2310      	movs	r3, #16
 8003f44:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d030      	beq.n	8003fb2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003f50:	6a3b      	ldr	r3, [r7, #32]
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f58:	2b80      	cmp	r3, #128	; 0x80
 8003f5a:	d109      	bne.n	8003f70 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f6e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	78db      	ldrb	r3, [r3, #3]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d108      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f00a fd4a 	bl	800ea34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	461a      	mov	r2, r3
 8003fae:	2302      	movs	r3, #2
 8003fb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0320 	and.w	r3, r3, #32
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2320      	movs	r3, #32
 8003fcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	3301      	adds	r3, #1
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f47f af62 	bne.w	8003ec4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f008 f829 	bl	800c05c <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004014:	f040 80db 	bne.w	80041ce <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f008 f84a 	bl	800c0b6 <USB_ReadDevAllInEpInterrupt>
 8004022:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004028:	e0cd      	b.n	80041c6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800402a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80c2 	beq.w	80041ba <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f008 f870 	bl	800c126 <USB_ReadDevInEPInterrupt>
 8004046:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d057      	beq.n	8004102 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2201      	movs	r2, #1
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	43db      	mvns	r3, r3
 800406c:	69f9      	ldr	r1, [r7, #28]
 800406e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004072:	4013      	ands	r3, r2
 8004074:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	461a      	mov	r2, r3
 8004084:	2301      	movs	r3, #1
 8004086:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d132      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3348      	adds	r3, #72	; 0x48
 80040a0:	6819      	ldr	r1, [r3, #0]
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4403      	add	r3, r0
 80040b0:	3344      	adds	r3, #68	; 0x44
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4419      	add	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ba:	4613      	mov	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	4403      	add	r3, r0
 80040c4:	3348      	adds	r3, #72	; 0x48
 80040c6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d113      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x3a2>
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	334c      	adds	r3, #76	; 0x4c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d108      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040ee:	461a      	mov	r2, r3
 80040f0:	2101      	movs	r1, #1
 80040f2:	f008 f879 	bl	800c1e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	4619      	mov	r1, r3
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f00a fc14 	bl	800e92a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	461a      	mov	r2, r3
 800411a:	2308      	movs	r3, #8
 800411c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	4413      	add	r3, r2
 8004130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004134:	461a      	mov	r2, r3
 8004136:	2310      	movs	r3, #16
 8004138:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	461a      	mov	r2, r3
 8004152:	2340      	movs	r3, #64	; 0x40
 8004154:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004162:	6a38      	ldr	r0, [r7, #32]
 8004164:	f007 f858 	bl	800b218 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	3338      	adds	r3, #56	; 0x38
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	78db      	ldrb	r3, [r3, #3]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	b2db      	uxtb	r3, r3
 800418e:	4619      	mov	r1, r3
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f00a fc61 	bl	800ea58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	015a      	lsls	r2, r3, #5
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	4413      	add	r3, r2
 800419e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a2:	461a      	mov	r2, r3
 80041a4:	2302      	movs	r3, #2
 80041a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80041b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fcea 	bl	8004b8e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	3301      	adds	r3, #1
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80041c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c2:	085b      	lsrs	r3, r3, #1
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f47f af2e 	bne.w	800402a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f007 ff42 	bl	800c05c <USB_ReadInterrupts>
 80041d8:	4603      	mov	r3, r0
 80041da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041e2:	d122      	bne.n	800422a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	69fa      	ldr	r2, [r7, #28]
 80041ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d108      	bne.n	8004214 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800420a:	2100      	movs	r1, #0
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fef5 	bl	8004ffc <HAL_PCDEx_LPM_Callback>
 8004212:	e002      	b.n	800421a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f00a fbff 	bl	800ea18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f007 ff14 	bl	800c05c <USB_ReadInterrupts>
 8004234:	4603      	mov	r3, r0
 8004236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800423a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423e:	d112      	bne.n	8004266 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d102      	bne.n	8004256 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f00a fbbb 	bl	800e9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004264:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f007 fef6 	bl	800c05c <USB_ReadInterrupts>
 8004270:	4603      	mov	r3, r0
 8004272:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800427a:	d121      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800428a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004292:	2b00      	cmp	r3, #0
 8004294:	d111      	bne.n	80042ba <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	089b      	lsrs	r3, r3, #2
 80042a6:	f003 020f 	and.w	r2, r3, #15
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80042b0:	2101      	movs	r1, #1
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fea2 	bl	8004ffc <HAL_PCDEx_LPM_Callback>
 80042b8:	e002      	b.n	80042c0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f00a fb86 	bl	800e9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f007 fec9 	bl	800c05c <USB_ReadInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d4:	f040 80b7 	bne.w	8004446 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2110      	movs	r1, #16
 80042f2:	4618      	mov	r0, r3
 80042f4:	f006 ff90 	bl	800b218 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042fc:	e046      	b.n	800438c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430a:	461a      	mov	r2, r3
 800430c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004310:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004330:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004334:	015a      	lsls	r2, r3, #5
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	4413      	add	r3, r2
 800433a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433e:	461a      	mov	r2, r3
 8004340:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004344:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004348:	015a      	lsls	r2, r3, #5
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	4413      	add	r3, r2
 800434e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004356:	0151      	lsls	r1, r2, #5
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	440a      	add	r2, r1
 800435c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004360:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004364:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	015a      	lsls	r2, r3, #5
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	4413      	add	r3, r2
 800436e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004376:	0151      	lsls	r1, r2, #5
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	440a      	add	r2, r1
 800437c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004380:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004384:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004388:	3301      	adds	r3, #1
 800438a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d3b3      	bcc.n	80042fe <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80043a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043bc:	69fa      	ldr	r2, [r7, #28]
 80043be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c2:	f043 030b 	orr.w	r3, r3, #11
 80043c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	69fa      	ldr	r2, [r7, #28]
 80043d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043d8:	f043 030b 	orr.w	r3, r3, #11
 80043dc:	6453      	str	r3, [r2, #68]	; 0x44
 80043de:	e015      	b.n	800440c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	4619      	mov	r1, r3
 80043f0:	f242 032b 	movw	r3, #8235	; 0x202b
 80043f4:	4313      	orrs	r3, r2
 80043f6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004406:	f043 030b 	orr.w	r3, r3, #11
 800440a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800441e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004430:	461a      	mov	r2, r3
 8004432:	f007 fed9 	bl	800c1e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695a      	ldr	r2, [r3, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	f007 fe06 	bl	800c05c <USB_ReadInterrupts>
 8004450:	4603      	mov	r3, r0
 8004452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445a:	d124      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f007 fe9d 	bl	800c1a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4618      	mov	r0, r3
 800446c:	f006 ff51 	bl	800b312 <USB_GetDevSpeed>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	f001 fdbe 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8004480:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	4620      	mov	r0, r4
 800448c:	f006 fc56 	bl	800ad3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f00a fa72 	bl	800e97a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80044a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f007 fdd6 	bl	800c05c <USB_ReadInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d10a      	bne.n	80044d0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f00a fa4f 	bl	800e95e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f002 0208 	and.w	r2, r2, #8
 80044ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f007 fdc1 	bl	800c05c <USB_ReadInterrupts>
 80044da:	4603      	mov	r3, r0
 80044dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d122      	bne.n	800452a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f0:	2301      	movs	r3, #1
 80044f2:	627b      	str	r3, [r7, #36]	; 0x24
 80044f4:	e014      	b.n	8004520 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	4613      	mov	r3, r2
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d105      	bne.n	800451a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	b2db      	uxtb	r3, r3
 8004512:	4619      	mov	r1, r3
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 fb09 	bl	8004b2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800451a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004526:	429a      	cmp	r2, r3
 8004528:	d3e5      	bcc.n	80044f6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f007 fd94 	bl	800c05c <USB_ReadInterrupts>
 8004534:	4603      	mov	r3, r0
 8004536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800453e:	d13b      	bne.n	80045b8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004540:	2301      	movs	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e02b      	b.n	800459e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	3340      	adds	r3, #64	; 0x40
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d115      	bne.n	8004598 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800456c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	da12      	bge.n	8004598 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	333f      	adds	r3, #63	; 0x3f
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800458e:	b2db      	uxtb	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 faca 	bl	8004b2c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d3ce      	bcc.n	8004546 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f007 fd4d 	bl	800c05c <USB_ReadInterrupts>
 80045c2:	4603      	mov	r3, r0
 80045c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045cc:	d155      	bne.n	800467a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045ce:	2301      	movs	r3, #1
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	e045      	b.n	8004660 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d12e      	bne.n	800465a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80045fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80045fe:	2b00      	cmp	r3, #0
 8004600:	da2b      	bge.n	800465a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800460e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004612:	429a      	cmp	r2, r3
 8004614:	d121      	bne.n	800465a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004656:	6053      	str	r3, [r2, #4]
            break;
 8004658:	e007      	b.n	800466a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	3301      	adds	r3, #1
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	429a      	cmp	r2, r3
 8004668:	d3b4      	bcc.n	80045d4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	695a      	ldr	r2, [r3, #20]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004678:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4618      	mov	r0, r3
 8004680:	f007 fcec 	bl	800c05c <USB_ReadInterrupts>
 8004684:	4603      	mov	r3, r0
 8004686:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468e:	d10a      	bne.n	80046a6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f00a f9f3 	bl	800ea7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80046a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f007 fcd6 	bl	800c05c <USB_ReadInterrupts>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d115      	bne.n	80046e6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f00a f9e3 	bl	800ea98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e000      	b.n	80046e6 <HAL_PCD_IRQHandler+0x992>
      return;
 80046e4:	bf00      	nop
    }
  }
}
 80046e6:	3734      	adds	r7, #52	; 0x34
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd90      	pop	{r4, r7, pc}

080046ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <HAL_PCD_SetAddress+0x1a>
 8004702:	2302      	movs	r3, #2
 8004704:	e013      	b.n	800472e <HAL_PCD_SetAddress+0x42>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	78fa      	ldrb	r2, [r7, #3]
 8004712:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	78fa      	ldrb	r2, [r7, #3]
 800471c:	4611      	mov	r1, r2
 800471e:	4618      	mov	r0, r3
 8004720:	f007 fc34 	bl	800bf8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	461a      	mov	r2, r3
 8004744:	4603      	mov	r3, r0
 8004746:	70fb      	strb	r3, [r7, #3]
 8004748:	460b      	mov	r3, r1
 800474a:	803b      	strh	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004758:	2b00      	cmp	r3, #0
 800475a:	da0f      	bge.n	800477c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800475c:	78fb      	ldrb	r3, [r7, #3]
 800475e:	f003 020f 	and.w	r2, r3, #15
 8004762:	4613      	mov	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	4413      	add	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	3338      	adds	r3, #56	; 0x38
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	4413      	add	r3, r2
 8004770:	3304      	adds	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2201      	movs	r2, #1
 8004778:	705a      	strb	r2, [r3, #1]
 800477a:	e00f      	b.n	800479c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	4613      	mov	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	4413      	add	r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4413      	add	r3, r2
 8004792:	3304      	adds	r3, #4
 8004794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047a8:	883a      	ldrh	r2, [r7, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	78ba      	ldrb	r2, [r7, #2]
 80047b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047c6:	78bb      	ldrb	r3, [r7, #2]
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d102      	bne.n	80047d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d101      	bne.n	80047e0 <HAL_PCD_EP_Open+0xaa>
 80047dc:	2302      	movs	r3, #2
 80047de:	e00e      	b.n	80047fe <HAL_PCD_EP_Open+0xc8>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68f9      	ldr	r1, [r7, #12]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f006 fdb4 	bl	800b35c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80047fc:	7afb      	ldrb	r3, [r7, #11]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	460b      	mov	r3, r1
 8004810:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004816:	2b00      	cmp	r3, #0
 8004818:	da0f      	bge.n	800483a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 020f 	and.w	r2, r3, #15
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	3338      	adds	r3, #56	; 0x38
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	3304      	adds	r3, #4
 8004830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	705a      	strb	r2, [r3, #1]
 8004838:	e00f      	b.n	800485a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800483a:	78fb      	ldrb	r3, [r7, #3]
 800483c:	f003 020f 	and.w	r2, r3, #15
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	3304      	adds	r3, #4
 8004852:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_PCD_EP_Close+0x6e>
 8004870:	2302      	movs	r3, #2
 8004872:	e00e      	b.n	8004892 <HAL_PCD_EP_Close+0x8c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68f9      	ldr	r1, [r7, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	f006 fdf2 	bl	800b46c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b086      	sub	sp, #24
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
 80048a6:	460b      	mov	r3, r1
 80048a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048aa:	7afb      	ldrb	r3, [r7, #11]
 80048ac:	f003 020f 	and.w	r2, r3, #15
 80048b0:	4613      	mov	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4413      	add	r3, r2
 80048c0:	3304      	adds	r3, #4
 80048c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2200      	movs	r2, #0
 80048d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2200      	movs	r2, #0
 80048da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d102      	bne.n	80048f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	6979      	ldr	r1, [r7, #20]
 8004904:	f006 fe8e 	bl	800b624 <USB_EPStartXfer>

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	f003 020f 	and.w	r2, r3, #15
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8004934:	681b      	ldr	r3, [r3, #0]
}
 8004936:	4618      	mov	r0, r3
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b086      	sub	sp, #24
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	607a      	str	r2, [r7, #4]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	460b      	mov	r3, r1
 8004950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004952:	7afb      	ldrb	r3, [r7, #11]
 8004954:	f003 020f 	and.w	r2, r3, #15
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	4413      	add	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	3338      	adds	r3, #56	; 0x38
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2201      	movs	r2, #1
 8004980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	f003 030f 	and.w	r3, r3, #15
 8004988:	b2da      	uxtb	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d102      	bne.n	800499c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	461a      	mov	r2, r3
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	f006 fe3b 	bl	800b624 <USB_EPStartXfer>

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	460b      	mov	r3, r1
 80049c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049c4:	78fb      	ldrb	r3, [r7, #3]
 80049c6:	f003 020f 	and.w	r2, r3, #15
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d901      	bls.n	80049d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e050      	b.n	8004a78 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da0f      	bge.n	80049fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	4613      	mov	r3, r2
 80049e6:	00db      	lsls	r3, r3, #3
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	3338      	adds	r3, #56	; 0x38
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	3304      	adds	r3, #4
 80049f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	705a      	strb	r2, [r3, #1]
 80049fc:	e00d      	b.n	8004a1a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	f003 030f 	and.w	r3, r3, #15
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d101      	bne.n	8004a3a <HAL_PCD_EP_SetStall+0x82>
 8004a36:	2302      	movs	r3, #2
 8004a38:	e01e      	b.n	8004a78 <HAL_PCD_EP_SetStall+0xc0>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f007 f9cb 	bl	800bde4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 030f 	and.w	r3, r3, #15
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	b2d9      	uxtb	r1, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f007 fbbd 	bl	800c1e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 020f 	and.w	r2, r3, #15
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d901      	bls.n	8004a9e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e042      	b.n	8004b24 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da0f      	bge.n	8004ac6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	3338      	adds	r3, #56	; 0x38
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3304      	adds	r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	705a      	strb	r2, [r3, #1]
 8004ac4:	e00f      	b.n	8004ae6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	3304      	adds	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_PCD_EP_ClrStall+0x86>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e00e      	b.n	8004b24 <HAL_PCD_EP_ClrStall+0xa4>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68f9      	ldr	r1, [r7, #12]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f007 f9d3 	bl	800bec0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da0c      	bge.n	8004b5a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	3338      	adds	r3, #56	; 0x38
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	3304      	adds	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e00c      	b.n	8004b74 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	4413      	add	r3, r2
 8004b70:	3304      	adds	r3, #4
 8004b72:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68f9      	ldr	r1, [r7, #12]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f006 fff2 	bl	800bb64 <USB_EPStopXfer>
 8004b80:	4603      	mov	r3, r0
 8004b82:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004b84:	7afb      	ldrb	r3, [r7, #11]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3710      	adds	r7, #16
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b08a      	sub	sp, #40	; 0x28
 8004b92:	af02      	add	r7, sp, #8
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	00db      	lsls	r3, r3, #3
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	3338      	adds	r3, #56	; 0x38
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d901      	bls.n	8004bc6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e06c      	b.n	8004ca0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	691a      	ldr	r2, [r3, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d902      	bls.n	8004be2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3303      	adds	r3, #3
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bea:	e02b      	b.n	8004c44 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d902      	bls.n	8004c08 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	3303      	adds	r3, #3
 8004c0c:	089b      	lsrs	r3, r3, #2
 8004c0e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	68d9      	ldr	r1, [r3, #12]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	9300      	str	r3, [sp, #0]
 8004c24:	4603      	mov	r3, r0
 8004c26:	6978      	ldr	r0, [r7, #20]
 8004c28:	f007 f846 	bl	800bcb8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	441a      	add	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	441a      	add	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	015a      	lsls	r2, r3, #5
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d809      	bhi.n	8004c6e <PCD_WriteEmptyTxFifo+0xe0>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	695a      	ldr	r2, [r3, #20]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d203      	bcs.n	8004c6e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1be      	bne.n	8004bec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d811      	bhi.n	8004c9e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	2201      	movs	r2, #1
 8004c82:	fa02 f303 	lsl.w	r3, r2, r3
 8004c86:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	43db      	mvns	r3, r3
 8004c94:	6939      	ldr	r1, [r7, #16]
 8004c96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3720      	adds	r7, #32
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	333c      	adds	r3, #60	; 0x3c
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d17b      	bne.n	8004dd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f003 0308 	and.w	r3, r3, #8
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	4a61      	ldr	r2, [pc, #388]	; (8004e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	f240 80b9 	bls.w	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f000 80b3 	beq.w	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d10:	6093      	str	r3, [r2, #8]
 8004d12:	e0a7      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	6093      	str	r3, [r2, #8]
 8004d30:	e098      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f040 8093 	bne.w	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	4a4b      	ldr	r2, [pc, #300]	; (8004e70 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d90f      	bls.n	8004d66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d62:	6093      	str	r3, [r2, #8]
 8004d64:	e07e      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	4413      	add	r3, r2
 8004d78:	3304      	adds	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1a      	ldr	r2, [r3, #32]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	0159      	lsls	r1, r3, #5
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	440b      	add	r3, r1
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d114      	bne.n	8004dc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d109      	bne.n	8004dba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004db0:	461a      	mov	r2, r3
 8004db2:	2101      	movs	r1, #1
 8004db4:	f007 fa18 	bl	800c1e8 <USB_EP0_OutStart>
 8004db8:	e006      	b.n	8004dc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	441a      	add	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f009 fd90 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
 8004dd4:	e046      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4a26      	ldr	r2, [pc, #152]	; (8004e74 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d124      	bne.n	8004e28 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00a      	beq.n	8004dfe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df4:	461a      	mov	r2, r3
 8004df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfa:	6093      	str	r3, [r2, #8]
 8004dfc:	e032      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 0320 	and.w	r3, r3, #32
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d008      	beq.n	8004e1a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	461a      	mov	r2, r3
 8004e16:	2320      	movs	r3, #32
 8004e18:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	4619      	mov	r1, r3
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f009 fd67 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
 8004e26:	e01d      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d114      	bne.n	8004e58 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	683a      	ldr	r2, [r7, #0]
 8004e32:	4613      	mov	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d108      	bne.n	8004e58 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e50:	461a      	mov	r2, r3
 8004e52:	2100      	movs	r1, #0
 8004e54:	f007 f9c8 	bl	800c1e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f009 fd48 	bl	800e8f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	4f54300a 	.word	0x4f54300a
 8004e74:	4f54310a 	.word	0x4f54310a

08004e78 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	333c      	adds	r3, #60	; 0x3c
 8004e90:	3304      	adds	r3, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d90e      	bls.n	8004ecc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d009      	beq.n	8004ecc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f009 fcff 	bl	800e8d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a0a      	ldr	r2, [pc, #40]	; (8004f00 <PCD_EP_OutSetupPacket_int+0x88>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d90c      	bls.n	8004ef4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d108      	bne.n	8004ef4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004eec:	461a      	mov	r2, r3
 8004eee:	2101      	movs	r1, #1
 8004ef0:	f007 f97a 	bl	800c1e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	4f54300a 	.word	0x4f54300a

08004f04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
 8004f10:	4613      	mov	r3, r2
 8004f12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f1c:	78fb      	ldrb	r3, [r7, #3]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f22:	883b      	ldrh	r3, [r7, #0]
 8004f24:	0419      	lsls	r1, r3, #16
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f30:	e028      	b.n	8004f84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f40:	2300      	movs	r3, #0
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e00d      	b.n	8004f62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	3340      	adds	r3, #64	; 0x40
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	0c1b      	lsrs	r3, r3, #16
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	4413      	add	r3, r2
 8004f5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	73fb      	strb	r3, [r7, #15]
 8004f62:	7bfa      	ldrb	r2, [r7, #15]
 8004f64:	78fb      	ldrb	r3, [r7, #3]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d3ec      	bcc.n	8004f46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f6c:	883b      	ldrh	r3, [r7, #0]
 8004f6e:	0418      	lsls	r0, r3, #16
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6819      	ldr	r1, [r3, #0]
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	4302      	orrs	r2, r0
 8004f7c:	3340      	adds	r3, #64	; 0x40
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	887a      	ldrh	r2, [r7, #2]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe2:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	10000003 	.word	0x10000003

08004ffc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800501c:	4b29      	ldr	r3, [pc, #164]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	2b06      	cmp	r3, #6
 8005026:	d00a      	beq.n	800503e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	429a      	cmp	r2, r3
 8005034:	d001      	beq.n	800503a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e040      	b.n	80050bc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	e03e      	b.n	80050bc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005046:	491f      	ldr	r1, [pc, #124]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4313      	orrs	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800504e:	f7fd fc97 	bl	8002980 <HAL_GetTick>
 8005052:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005054:	e009      	b.n	800506a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005056:	f7fd fc93 	bl	8002980 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005064:	d901      	bls.n	800506a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e028      	b.n	80050bc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800506a:	4b16      	ldr	r3, [pc, #88]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005072:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005076:	d1ee      	bne.n	8005056 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b1e      	cmp	r3, #30
 800507c:	d008      	beq.n	8005090 <HAL_PWREx_ConfigSupply+0x7c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b2e      	cmp	r3, #46	; 0x2e
 8005082:	d005      	beq.n	8005090 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b1d      	cmp	r3, #29
 8005088:	d002      	beq.n	8005090 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b2d      	cmp	r3, #45	; 0x2d
 800508e:	d114      	bne.n	80050ba <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005090:	f7fd fc76 	bl	8002980 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005096:	e009      	b.n	80050ac <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005098:	f7fd fc72 	bl	8002980 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050a6:	d901      	bls.n	80050ac <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e007      	b.n	80050bc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80050ac:	4b05      	ldr	r3, [pc, #20]	; (80050c4 <HAL_PWREx_ConfigSupply+0xb0>)
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b8:	d1ee      	bne.n	8005098 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	58024800 	.word	0x58024800

080050c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80050cc:	4b05      	ldr	r3, [pc, #20]	; (80050e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a04      	ldr	r2, [pc, #16]	; (80050e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80050d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d6:	60d3      	str	r3, [r2, #12]
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	58024800 	.word	0x58024800

080050e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08c      	sub	sp, #48	; 0x30
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f000 bc48 	b.w	800598c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8088 	beq.w	800521a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800510a:	4b99      	ldr	r3, [pc, #612]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005114:	4b96      	ldr	r3, [pc, #600]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	2b10      	cmp	r3, #16
 800511e:	d007      	beq.n	8005130 <HAL_RCC_OscConfig+0x48>
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	2b18      	cmp	r3, #24
 8005124:	d111      	bne.n	800514a <HAL_RCC_OscConfig+0x62>
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	f003 0303 	and.w	r3, r3, #3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10c      	bne.n	800514a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005130:	4b8f      	ldr	r3, [pc, #572]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d06d      	beq.n	8005218 <HAL_RCC_OscConfig+0x130>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d169      	bne.n	8005218 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f000 bc21 	b.w	800598c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005152:	d106      	bne.n	8005162 <HAL_RCC_OscConfig+0x7a>
 8005154:	4b86      	ldr	r3, [pc, #536]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a85      	ldr	r2, [pc, #532]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800515a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e02e      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10c      	bne.n	8005184 <HAL_RCC_OscConfig+0x9c>
 800516a:	4b81      	ldr	r3, [pc, #516]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a80      	ldr	r2, [pc, #512]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005174:	6013      	str	r3, [r2, #0]
 8005176:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a7d      	ldr	r2, [pc, #500]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800517c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005180:	6013      	str	r3, [r2, #0]
 8005182:	e01d      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800518c:	d10c      	bne.n	80051a8 <HAL_RCC_OscConfig+0xc0>
 800518e:	4b78      	ldr	r3, [pc, #480]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a77      	ldr	r2, [pc, #476]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	4b75      	ldr	r3, [pc, #468]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a74      	ldr	r2, [pc, #464]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	e00b      	b.n	80051c0 <HAL_RCC_OscConfig+0xd8>
 80051a8:	4b71      	ldr	r3, [pc, #452]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a70      	ldr	r2, [pc, #448]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b2:	6013      	str	r3, [r2, #0]
 80051b4:	4b6e      	ldr	r3, [pc, #440]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a6d      	ldr	r2, [pc, #436]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d013      	beq.n	80051f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c8:	f7fd fbda 	bl	8002980 <HAL_GetTick>
 80051cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051ce:	e008      	b.n	80051e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d0:	f7fd fbd6 	bl	8002980 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b64      	cmp	r3, #100	; 0x64
 80051dc:	d901      	bls.n	80051e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e3d4      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80051e2:	4b63      	ldr	r3, [pc, #396]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d0f0      	beq.n	80051d0 <HAL_RCC_OscConfig+0xe8>
 80051ee:	e014      	b.n	800521a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd fbc6 	bl	8002980 <HAL_GetTick>
 80051f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f8:	f7fd fbc2 	bl	8002980 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	; 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e3c0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800520a:	4b59      	ldr	r3, [pc, #356]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x110>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 80ca 	beq.w	80053bc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005228:	4b51      	ldr	r3, [pc, #324]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005230:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005232:	4b4f      	ldr	r3, [pc, #316]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005236:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005238:	6a3b      	ldr	r3, [r7, #32]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d007      	beq.n	800524e <HAL_RCC_OscConfig+0x166>
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	2b18      	cmp	r3, #24
 8005242:	d156      	bne.n	80052f2 <HAL_RCC_OscConfig+0x20a>
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d151      	bne.n	80052f2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800524e:	4b48      	ldr	r3, [pc, #288]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x17e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e392      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005266:	4b42      	ldr	r3, [pc, #264]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 0219 	bic.w	r2, r3, #25
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	493f      	ldr	r1, [pc, #252]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fd fb82 	bl	8002980 <HAL_GetTick>
 800527c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005280:	f7fd fb7e 	bl	8002980 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e37c      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005292:	4b37      	ldr	r3, [pc, #220]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800529e:	f7fd fb9f 	bl	80029e0 <HAL_GetREVID>
 80052a2:	4603      	mov	r3, r0
 80052a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d817      	bhi.n	80052dc <HAL_RCC_OscConfig+0x1f4>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d108      	bne.n	80052c6 <HAL_RCC_OscConfig+0x1de>
 80052b4:	4b2e      	ldr	r3, [pc, #184]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052bc:	4a2c      	ldr	r2, [pc, #176]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052c4:	e07a      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052c6:	4b2a      	ldr	r3, [pc, #168]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	031b      	lsls	r3, r3, #12
 80052d4:	4926      	ldr	r1, [pc, #152]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052da:	e06f      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052dc:	4b24      	ldr	r3, [pc, #144]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	061b      	lsls	r3, r3, #24
 80052ea:	4921      	ldr	r1, [pc, #132]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f0:	e064      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d047      	beq.n	800538a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f023 0219 	bic.w	r2, r3, #25
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	491a      	ldr	r1, [pc, #104]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005308:	4313      	orrs	r3, r2
 800530a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fb38 	bl	8002980 <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005314:	f7fd fb34 	bl	8002980 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e332      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005326:	4b12      	ldr	r3, [pc, #72]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005332:	f7fd fb55 	bl	80029e0 <HAL_GetREVID>
 8005336:	4603      	mov	r3, r0
 8005338:	f241 0203 	movw	r2, #4099	; 0x1003
 800533c:	4293      	cmp	r3, r2
 800533e:	d819      	bhi.n	8005374 <HAL_RCC_OscConfig+0x28c>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b40      	cmp	r3, #64	; 0x40
 8005346:	d108      	bne.n	800535a <HAL_RCC_OscConfig+0x272>
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005350:	4a07      	ldr	r2, [pc, #28]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005356:	6053      	str	r3, [r2, #4]
 8005358:	e030      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	031b      	lsls	r3, r3, #12
 8005368:	4901      	ldr	r1, [pc, #4]	; (8005370 <HAL_RCC_OscConfig+0x288>)
 800536a:	4313      	orrs	r3, r2
 800536c:	604b      	str	r3, [r1, #4]
 800536e:	e025      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
 8005370:	58024400 	.word	0x58024400
 8005374:	4b9a      	ldr	r3, [pc, #616]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	061b      	lsls	r3, r3, #24
 8005382:	4997      	ldr	r1, [pc, #604]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005384:	4313      	orrs	r3, r2
 8005386:	604b      	str	r3, [r1, #4]
 8005388:	e018      	b.n	80053bc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538a:	4b95      	ldr	r3, [pc, #596]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a94      	ldr	r2, [pc, #592]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005396:	f7fd faf3 	bl	8002980 <HAL_GetTick>
 800539a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800539c:	e008      	b.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800539e:	f7fd faef 	bl	8002980 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e2ed      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b0:	4b8b      	ldr	r3, [pc, #556]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1f0      	bne.n	800539e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a9 	beq.w	800551c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ca:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053d4:	4b82      	ldr	r3, [pc, #520]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d007      	beq.n	80053f0 <HAL_RCC_OscConfig+0x308>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b18      	cmp	r3, #24
 80053e4:	d13a      	bne.n	800545c <HAL_RCC_OscConfig+0x374>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d135      	bne.n	800545c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f0:	4b7b      	ldr	r3, [pc, #492]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x320>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69db      	ldr	r3, [r3, #28]
 8005400:	2b80      	cmp	r3, #128	; 0x80
 8005402:	d001      	beq.n	8005408 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e2c1      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005408:	f7fd faea 	bl	80029e0 <HAL_GetREVID>
 800540c:	4603      	mov	r3, r0
 800540e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005412:	4293      	cmp	r3, r2
 8005414:	d817      	bhi.n	8005446 <HAL_RCC_OscConfig+0x35e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	2b20      	cmp	r3, #32
 800541c:	d108      	bne.n	8005430 <HAL_RCC_OscConfig+0x348>
 800541e:	4b70      	ldr	r3, [pc, #448]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005426:	4a6e      	ldr	r2, [pc, #440]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800542c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800542e:	e075      	b.n	800551c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005430:	4b6b      	ldr	r3, [pc, #428]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	069b      	lsls	r3, r3, #26
 800543e:	4968      	ldr	r1, [pc, #416]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005444:	e06a      	b.n	800551c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005446:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	061b      	lsls	r3, r3, #24
 8005454:	4962      	ldr	r1, [pc, #392]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005456:	4313      	orrs	r3, r2
 8005458:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800545a:	e05f      	b.n	800551c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d042      	beq.n	80054ea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005464:	4b5e      	ldr	r3, [pc, #376]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5d      	ldr	r2, [pc, #372]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800546a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800546e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fd fa86 	bl	8002980 <HAL_GetTick>
 8005474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005478:	f7fd fa82 	bl	8002980 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e280      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800548a:	4b55      	ldr	r3, [pc, #340]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005492:	2b00      	cmp	r3, #0
 8005494:	d0f0      	beq.n	8005478 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005496:	f7fd faa3 	bl	80029e0 <HAL_GetREVID>
 800549a:	4603      	mov	r3, r0
 800549c:	f241 0203 	movw	r2, #4099	; 0x1003
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d817      	bhi.n	80054d4 <HAL_RCC_OscConfig+0x3ec>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d108      	bne.n	80054be <HAL_RCC_OscConfig+0x3d6>
 80054ac:	4b4c      	ldr	r3, [pc, #304]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80054b4:	4a4a      	ldr	r2, [pc, #296]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054ba:	6053      	str	r3, [r2, #4]
 80054bc:	e02e      	b.n	800551c <HAL_RCC_OscConfig+0x434>
 80054be:	4b48      	ldr	r3, [pc, #288]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	069b      	lsls	r3, r3, #26
 80054cc:	4944      	ldr	r1, [pc, #272]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	604b      	str	r3, [r1, #4]
 80054d2:	e023      	b.n	800551c <HAL_RCC_OscConfig+0x434>
 80054d4:	4b42      	ldr	r3, [pc, #264]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	061b      	lsls	r3, r3, #24
 80054e2:	493f      	ldr	r1, [pc, #252]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60cb      	str	r3, [r1, #12]
 80054e8:	e018      	b.n	800551c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3c      	ldr	r2, [pc, #240]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80054f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fd fa43 	bl	8002980 <HAL_GetTick>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80054fe:	f7fd fa3f 	bl	8002980 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e23d      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005510:	4b33      	ldr	r3, [pc, #204]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0308 	and.w	r3, r3, #8
 8005524:	2b00      	cmp	r3, #0
 8005526:	d036      	beq.n	8005596 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d019      	beq.n	8005564 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005530:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	4a2a      	ldr	r2, [pc, #168]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fd fa20 	bl	8002980 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005544:	f7fd fa1c 	bl	8002980 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e21a      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCC_OscConfig+0x45c>
 8005562:	e018      	b.n	8005596 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005564:	4b1e      	ldr	r3, [pc, #120]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 8005566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005568:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800556a:	f023 0301 	bic.w	r3, r3, #1
 800556e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd fa06 	bl	8002980 <HAL_GetTick>
 8005574:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005578:	f7fd fa02 	bl	8002980 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e200      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800558a:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 800558c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1f0      	bne.n	8005578 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d039      	beq.n	8005616 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d01c      	beq.n	80055e4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055aa:	4b0d      	ldr	r3, [pc, #52]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80055b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b6:	f7fd f9e3 	bl	8002980 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055be:	f7fd f9df 	bl	8002980 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e1dd      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80055d0:	4b03      	ldr	r3, [pc, #12]	; (80055e0 <HAL_RCC_OscConfig+0x4f8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d0f0      	beq.n	80055be <HAL_RCC_OscConfig+0x4d6>
 80055dc:	e01b      	b.n	8005616 <HAL_RCC_OscConfig+0x52e>
 80055de:	bf00      	nop
 80055e0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055e4:	4b9b      	ldr	r3, [pc, #620]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a9a      	ldr	r2, [pc, #616]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80055ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055f0:	f7fd f9c6 	bl	8002980 <HAL_GetTick>
 80055f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055f8:	f7fd f9c2 	bl	8002980 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e1c0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800560a:	4b92      	ldr	r3, [pc, #584]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1f0      	bne.n	80055f8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 8081 	beq.w	8005726 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005624:	4b8c      	ldr	r3, [pc, #560]	; (8005858 <HAL_RCC_OscConfig+0x770>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a8b      	ldr	r2, [pc, #556]	; (8005858 <HAL_RCC_OscConfig+0x770>)
 800562a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005630:	f7fd f9a6 	bl	8002980 <HAL_GetTick>
 8005634:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005636:	e008      	b.n	800564a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005638:	f7fd f9a2 	bl	8002980 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b64      	cmp	r3, #100	; 0x64
 8005644:	d901      	bls.n	800564a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	e1a0      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800564a:	4b83      	ldr	r3, [pc, #524]	; (8005858 <HAL_RCC_OscConfig+0x770>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0f0      	beq.n	8005638 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d106      	bne.n	800566c <HAL_RCC_OscConfig+0x584>
 800565e:	4b7d      	ldr	r3, [pc, #500]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005662:	4a7c      	ldr	r2, [pc, #496]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005664:	f043 0301 	orr.w	r3, r3, #1
 8005668:	6713      	str	r3, [r2, #112]	; 0x70
 800566a:	e02d      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10c      	bne.n	800568e <HAL_RCC_OscConfig+0x5a6>
 8005674:	4b77      	ldr	r3, [pc, #476]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005678:	4a76      	ldr	r2, [pc, #472]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800567a:	f023 0301 	bic.w	r3, r3, #1
 800567e:	6713      	str	r3, [r2, #112]	; 0x70
 8005680:	4b74      	ldr	r3, [pc, #464]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a73      	ldr	r2, [pc, #460]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005686:	f023 0304 	bic.w	r3, r3, #4
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x5c8>
 8005696:	4b6f      	ldr	r3, [pc, #444]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a6e      	ldr	r2, [pc, #440]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	4b6c      	ldr	r3, [pc, #432]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a6b      	ldr	r2, [pc, #428]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x5e0>
 80056b0:	4b68      	ldr	r3, [pc, #416]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a67      	ldr	r2, [pc, #412]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
 80056bc:	4b65      	ldr	r3, [pc, #404]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	4a64      	ldr	r2, [pc, #400]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fd f956 	bl	8002980 <HAL_GetTick>
 80056d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fd f952 	bl	8002980 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e14e      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056ee:	4b59      	ldr	r3, [pc, #356]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x5f0>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fd f940 	bl	8002980 <HAL_GetTick>
 8005700:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fd f93c 	bl	8002980 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e138      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800571a:	4b4e      	ldr	r3, [pc, #312]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 812d 	beq.w	800598a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005730:	4b48      	ldr	r3, [pc, #288]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005738:	2b18      	cmp	r3, #24
 800573a:	f000 80bd 	beq.w	80058b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005742:	2b02      	cmp	r3, #2
 8005744:	f040 809e 	bne.w	8005884 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b42      	ldr	r3, [pc, #264]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a41      	ldr	r2, [pc, #260]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fd f914 	bl	8002980 <HAL_GetTick>
 8005758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fd f910 	bl	8002980 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e10e      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800576e:	4b39      	ldr	r3, [pc, #228]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800577a:	4b36      	ldr	r3, [pc, #216]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800577c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577e:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCC_OscConfig+0x774>)
 8005780:	4013      	ands	r3, r2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800578a:	0112      	lsls	r2, r2, #4
 800578c:	430a      	orrs	r2, r1
 800578e:	4931      	ldr	r1, [pc, #196]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005790:	4313      	orrs	r3, r2
 8005792:	628b      	str	r3, [r1, #40]	; 0x28
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	3b01      	subs	r3, #1
 800579a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	3b01      	subs	r3, #1
 80057a4:	025b      	lsls	r3, r3, #9
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	3b01      	subs	r3, #1
 80057b0:	041b      	lsls	r3, r3, #16
 80057b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057bc:	3b01      	subs	r3, #1
 80057be:	061b      	lsls	r3, r3, #24
 80057c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057c4:	4923      	ldr	r1, [pc, #140]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	4a21      	ldr	r2, [pc, #132]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057d6:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057da:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCC_OscConfig+0x778>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057e2:	00d2      	lsls	r2, r2, #3
 80057e4:	491b      	ldr	r1, [pc, #108]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057ea:	4b1a      	ldr	r3, [pc, #104]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	f023 020c 	bic.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	4917      	ldr	r1, [pc, #92]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057fc:	4b15      	ldr	r3, [pc, #84]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	f023 0202 	bic.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005808:	4912      	ldr	r1, [pc, #72]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800580a:	4313      	orrs	r3, r2
 800580c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	4a10      	ldr	r2, [pc, #64]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581a:	4b0e      	ldr	r3, [pc, #56]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	4a0d      	ldr	r2, [pc, #52]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005826:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	4a0a      	ldr	r2, [pc, #40]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 800582c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	4a07      	ldr	r2, [pc, #28]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800583e:	4b05      	ldr	r3, [pc, #20]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a04      	ldr	r2, [pc, #16]	; (8005854 <HAL_RCC_OscConfig+0x76c>)
 8005844:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584a:	f7fd f899 	bl	8002980 <HAL_GetTick>
 800584e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005850:	e011      	b.n	8005876 <HAL_RCC_OscConfig+0x78e>
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400
 8005858:	58024800 	.word	0x58024800
 800585c:	fffffc0c 	.word	0xfffffc0c
 8005860:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005864:	f7fd f88c 	bl	8002980 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e08a      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005876:	4b47      	ldr	r3, [pc, #284]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d0f0      	beq.n	8005864 <HAL_RCC_OscConfig+0x77c>
 8005882:	e082      	b.n	800598a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005884:	4b43      	ldr	r3, [pc, #268]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a42      	ldr	r2, [pc, #264]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800588a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800588e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd f876 	bl	8002980 <HAL_GetTick>
 8005894:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005898:	f7fd f872 	bl	8002980 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e070      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058aa:	4b3a      	ldr	r3, [pc, #232]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1f0      	bne.n	8005898 <HAL_RCC_OscConfig+0x7b0>
 80058b6:	e068      	b.n	800598a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80058be:	4b35      	ldr	r3, [pc, #212]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d031      	beq.n	8005930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f003 0203 	and.w	r2, r3, #3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d12a      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	091b      	lsrs	r3, r3, #4
 80058de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d122      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d11a      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	0a5b      	lsrs	r3, r3, #9
 80058fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005908:	429a      	cmp	r2, r3
 800590a:	d111      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800591a:	429a      	cmp	r2, r3
 800591c:	d108      	bne.n	8005930 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	0e1b      	lsrs	r3, r3, #24
 8005922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e02b      	b.n	800598c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	08db      	lsrs	r3, r3, #3
 800593a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800593e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	429a      	cmp	r2, r3
 8005948:	d01f      	beq.n	800598a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800594c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005950:	f023 0301 	bic.w	r3, r3, #1
 8005954:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005956:	f7fd f813 	bl	8002980 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800595c:	bf00      	nop
 800595e:	f7fd f80f 	bl	8002980 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	4293      	cmp	r3, r2
 8005968:	d0f9      	beq.n	800595e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800596a:	4b0a      	ldr	r3, [pc, #40]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800596c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800596e:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <HAL_RCC_OscConfig+0x8b0>)
 8005970:	4013      	ands	r3, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005976:	00d2      	lsls	r2, r2, #3
 8005978:	4906      	ldr	r1, [pc, #24]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 800597a:	4313      	orrs	r3, r2
 800597c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	4a04      	ldr	r2, [pc, #16]	; (8005994 <HAL_RCC_OscConfig+0x8ac>)
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3730      	adds	r7, #48	; 0x30
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	58024400 	.word	0x58024400
 8005998:	ffff0007 	.word	0xffff0007

0800599c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e19c      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b8a      	ldr	r3, [pc, #552]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d910      	bls.n	80059e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b87      	ldr	r3, [pc, #540]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 020f 	bic.w	r2, r3, #15
 80059c6:	4985      	ldr	r1, [pc, #532]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b83      	ldr	r3, [pc, #524]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e184      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	4b7b      	ldr	r3, [pc, #492]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d908      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059fc:	4b78      	ldr	r3, [pc, #480]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	4975      	ldr	r1, [pc, #468]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d010      	beq.n	8005a3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	4b70      	ldr	r3, [pc, #448]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d908      	bls.n	8005a3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	496a      	ldr	r1, [pc, #424]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0310 	and.w	r3, r3, #16
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d010      	beq.n	8005a6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	4b64      	ldr	r3, [pc, #400]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d908      	bls.n	8005a6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a58:	4b61      	ldr	r3, [pc, #388]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	495e      	ldr	r1, [pc, #376]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0320 	and.w	r3, r3, #32
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d010      	beq.n	8005a98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69da      	ldr	r2, [r3, #28]
 8005a7a:	4b59      	ldr	r3, [pc, #356]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d908      	bls.n	8005a98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a86:	4b56      	ldr	r3, [pc, #344]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	69db      	ldr	r3, [r3, #28]
 8005a92:	4953      	ldr	r1, [pc, #332]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	4b4d      	ldr	r3, [pc, #308]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	f003 030f 	and.w	r3, r3, #15
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d908      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	f023 020f 	bic.w	r2, r3, #15
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4947      	ldr	r1, [pc, #284]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d055      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ad2:	4b43      	ldr	r3, [pc, #268]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4940      	ldr	r1, [pc, #256]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d107      	bne.n	8005afc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aec:	4b3c      	ldr	r3, [pc, #240]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d121      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e0f6      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b04:	4b36      	ldr	r3, [pc, #216]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d115      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0ea      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d107      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b1c:	4b30      	ldr	r3, [pc, #192]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d109      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e0de      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0d6      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b3c:	4b28      	ldr	r3, [pc, #160]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	f023 0207 	bic.w	r2, r3, #7
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4925      	ldr	r1, [pc, #148]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b4e:	f7fc ff17 	bl	8002980 <HAL_GetTick>
 8005b52:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b56:	f7fc ff13 	bl	8002980 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e0be      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d1eb      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	4b14      	ldr	r3, [pc, #80]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 030f 	and.w	r3, r3, #15
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d208      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9a:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	f023 020f 	bic.w	r2, r3, #15
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	490e      	ldr	r1, [pc, #56]	; (8005be0 <HAL_RCC_ClockConfig+0x244>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d214      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f023 020f 	bic.w	r2, r3, #15
 8005bc2:	4906      	ldr	r1, [pc, #24]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bca:	4b04      	ldr	r3, [pc, #16]	; (8005bdc <HAL_RCC_ClockConfig+0x240>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e086      	b.n	8005cea <HAL_RCC_ClockConfig+0x34e>
 8005bdc:	52002000 	.word	0x52002000
 8005be0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d010      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d208      	bcs.n	8005c12 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c00:	4b3c      	ldr	r3, [pc, #240]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	4939      	ldr	r1, [pc, #228]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d010      	beq.n	8005c40 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	4b34      	ldr	r3, [pc, #208]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d208      	bcs.n	8005c40 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c2e:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	492e      	ldr	r1, [pc, #184]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 0310 	and.w	r3, r3, #16
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d010      	beq.n	8005c6e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	4b28      	ldr	r3, [pc, #160]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d208      	bcs.n	8005c6e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c5c:	4b25      	ldr	r3, [pc, #148]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	4922      	ldr	r1, [pc, #136]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0320 	and.w	r3, r3, #32
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d010      	beq.n	8005c9c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d208      	bcs.n	8005c9c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c8c:	6a1b      	ldr	r3, [r3, #32]
 8005c8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	69db      	ldr	r3, [r3, #28]
 8005c96:	4917      	ldr	r1, [pc, #92]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c9c:	f000 f834 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	4912      	ldr	r1, [pc, #72]	; (8005cf8 <HAL_RCC_ClockConfig+0x35c>)
 8005cae:	5ccb      	ldrb	r3, [r1, r3]
 8005cb0:	f003 031f 	and.w	r3, r3, #31
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cb8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <HAL_RCC_ClockConfig+0x358>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <HAL_RCC_ClockConfig+0x35c>)
 8005cc4:	5cd3      	ldrb	r3, [r2, r3]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	; (8005cfc <HAL_RCC_ClockConfig+0x360>)
 8005cd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <HAL_RCC_ClockConfig+0x364>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005cda:	4b0a      	ldr	r3, [pc, #40]	; (8005d04 <HAL_RCC_ClockConfig+0x368>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc fe04 	bl	80028ec <HAL_InitTick>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	58024400 	.word	0x58024400
 8005cf8:	08011be8 	.word	0x08011be8
 8005cfc:	24000004 	.word	0x24000004
 8005d00:	24000000 	.word	0x24000000
 8005d04:	24000018 	.word	0x24000018

08005d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	; 0x24
 8005d0c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d0e:	4bb3      	ldr	r3, [pc, #716]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d16:	2b18      	cmp	r3, #24
 8005d18:	f200 8155 	bhi.w	8005fc6 <HAL_RCC_GetSysClockFreq+0x2be>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005fc7 	.word	0x08005fc7
 8005d2c:	08005fc7 	.word	0x08005fc7
 8005d30:	08005fc7 	.word	0x08005fc7
 8005d34:	08005fc7 	.word	0x08005fc7
 8005d38:	08005fc7 	.word	0x08005fc7
 8005d3c:	08005fc7 	.word	0x08005fc7
 8005d40:	08005fc7 	.word	0x08005fc7
 8005d44:	08005daf 	.word	0x08005daf
 8005d48:	08005fc7 	.word	0x08005fc7
 8005d4c:	08005fc7 	.word	0x08005fc7
 8005d50:	08005fc7 	.word	0x08005fc7
 8005d54:	08005fc7 	.word	0x08005fc7
 8005d58:	08005fc7 	.word	0x08005fc7
 8005d5c:	08005fc7 	.word	0x08005fc7
 8005d60:	08005fc7 	.word	0x08005fc7
 8005d64:	08005db5 	.word	0x08005db5
 8005d68:	08005fc7 	.word	0x08005fc7
 8005d6c:	08005fc7 	.word	0x08005fc7
 8005d70:	08005fc7 	.word	0x08005fc7
 8005d74:	08005fc7 	.word	0x08005fc7
 8005d78:	08005fc7 	.word	0x08005fc7
 8005d7c:	08005fc7 	.word	0x08005fc7
 8005d80:	08005fc7 	.word	0x08005fc7
 8005d84:	08005dbb 	.word	0x08005dbb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d88:	4b94      	ldr	r3, [pc, #592]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d009      	beq.n	8005da8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d94:	4b91      	ldr	r3, [pc, #580]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a90      	ldr	r2, [pc, #576]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005da6:	e111      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005da8:	4b8d      	ldr	r3, [pc, #564]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005daa:	61bb      	str	r3, [r7, #24]
      break;
 8005dac:	e10e      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005dae:	4b8d      	ldr	r3, [pc, #564]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005db0:	61bb      	str	r3, [r7, #24]
      break;
 8005db2:	e10b      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005db4:	4b8c      	ldr	r3, [pc, #560]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005db6:	61bb      	str	r3, [r7, #24]
      break;
 8005db8:	e108      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dba:	4b88      	ldr	r3, [pc, #544]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbe:	f003 0303 	and.w	r3, r3, #3
 8005dc2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005dc4:	4b85      	ldr	r3, [pc, #532]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc8:	091b      	lsrs	r3, r3, #4
 8005dca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005dd0:	4b82      	ldr	r3, [pc, #520]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dda:	4b80      	ldr	r3, [pc, #512]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dde:	08db      	lsrs	r3, r3, #3
 8005de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	ee07 3a90 	vmov	s15, r3
 8005dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005df2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80e1 	beq.w	8005fc0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	f000 8083 	beq.w	8005f0c <HAL_RCC_GetSysClockFreq+0x204>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	f200 80a1 	bhi.w	8005f50 <HAL_RCC_GetSysClockFreq+0x248>
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x114>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d056      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005e1a:	e099      	b.n	8005f50 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e1c:	4b6f      	ldr	r3, [pc, #444]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d02d      	beq.n	8005e84 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e28:	4b6c      	ldr	r3, [pc, #432]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	4a6b      	ldr	r2, [pc, #428]	; (8005fe0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e34:	fa22 f303 	lsr.w	r3, r2, r3
 8005e38:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	ee07 3a90 	vmov	s15, r3
 8005e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b62      	ldr	r3, [pc, #392]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e66:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e82:	e087      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005ff0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b51      	ldr	r3, [pc, #324]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eaa:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ec6:	e065      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b40      	ldr	r3, [pc, #256]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f0a:	e043      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005ff8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f32:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f4e:	e021      	b.n	8005f94 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005ff4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f62:	4b1e      	ldr	r3, [pc, #120]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f76:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005fec <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f92:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	0a5b      	lsrs	r3, r3, #9
 8005f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	ee07 3a90 	vmov	s15, r3
 8005fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fac:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb8:	ee17 3a90 	vmov	r3, s15
 8005fbc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005fbe:	e005      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
      break;
 8005fc4:	e002      	b.n	8005fcc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fc8:	61bb      	str	r3, [r7, #24]
      break;
 8005fca:	bf00      	nop
  }

  return sysclockfreq;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	; 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	58024400 	.word	0x58024400
 8005fe0:	03d09000 	.word	0x03d09000
 8005fe4:	003d0900 	.word	0x003d0900
 8005fe8:	007a1200 	.word	0x007a1200
 8005fec:	46000000 	.word	0x46000000
 8005ff0:	4c742400 	.word	0x4c742400
 8005ff4:	4a742400 	.word	0x4a742400
 8005ff8:	4af42400 	.word	0x4af42400

08005ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006002:	f7ff fe81 	bl	8005d08 <HAL_RCC_GetSysClockFreq>
 8006006:	4602      	mov	r2, r0
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <HAL_RCC_GetHCLKFreq+0x50>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	490f      	ldr	r1, [pc, #60]	; (8006050 <HAL_RCC_GetHCLKFreq+0x54>)
 8006014:	5ccb      	ldrb	r3, [r1, r3]
 8006016:	f003 031f 	and.w	r3, r3, #31
 800601a:	fa22 f303 	lsr.w	r3, r2, r3
 800601e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006020:	4b0a      	ldr	r3, [pc, #40]	; (800604c <HAL_RCC_GetHCLKFreq+0x50>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 030f 	and.w	r3, r3, #15
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <HAL_RCC_GetHCLKFreq+0x54>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	f003 031f 	and.w	r3, r3, #31
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	4a07      	ldr	r2, [pc, #28]	; (8006054 <HAL_RCC_GetHCLKFreq+0x58>)
 8006038:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800603a:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_RCC_GetHCLKFreq+0x5c>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006040:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_RCC_GetHCLKFreq+0x58>)
 8006042:	681b      	ldr	r3, [r3, #0]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	58024400 	.word	0x58024400
 8006050:	08011be8 	.word	0x08011be8
 8006054:	24000004 	.word	0x24000004
 8006058:	24000000 	.word	0x24000000

0800605c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006060:	f7ff ffcc 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	4904      	ldr	r1, [pc, #16]	; (8006084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	58024400 	.word	0x58024400
 8006084:	08011be8 	.word	0x08011be8

08006088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800608c:	f7ff ffb6 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006090:	4602      	mov	r2, r0
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	0a1b      	lsrs	r3, r3, #8
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	4904      	ldr	r1, [pc, #16]	; (80060b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800609e:	5ccb      	ldrb	r3, [r1, r3]
 80060a0:	f003 031f 	and.w	r3, r3, #31
 80060a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	58024400 	.word	0x58024400
 80060b0:	08011be8 	.word	0x08011be8

080060b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060b8:	b0ca      	sub	sp, #296	; 0x128
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060c6:	2300      	movs	r3, #0
 80060c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80060d8:	2500      	movs	r5, #0
 80060da:	ea54 0305 	orrs.w	r3, r4, r5
 80060de:	d049      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80060e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060ea:	d02f      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80060ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060f0:	d828      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060f6:	d01a      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80060f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060fc:	d822      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006106:	d007      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006108:	e01c      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800610a:	4bb8      	ldr	r3, [pc, #736]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610e:	4ab7      	ldr	r2, [pc, #732]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006114:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006116:	e01a      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006118:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611c:	3308      	adds	r3, #8
 800611e:	2102      	movs	r1, #2
 8006120:	4618      	mov	r0, r3
 8006122:	f001 fc8f 	bl	8007a44 <RCCEx_PLL2_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800612c:	e00f      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800612e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006132:	3328      	adds	r3, #40	; 0x28
 8006134:	2102      	movs	r1, #2
 8006136:	4618      	mov	r0, r3
 8006138:	f001 fd36 	bl	8007ba8 <RCCEx_PLL3_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006142:	e004      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10a      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006156:	4ba5      	ldr	r3, [pc, #660]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800615e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006164:	4aa1      	ldr	r2, [pc, #644]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006166:	430b      	orrs	r3, r1
 8006168:	6513      	str	r3, [r2, #80]	; 0x50
 800616a:	e003      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006180:	f04f 0900 	mov.w	r9, #0
 8006184:	ea58 0309 	orrs.w	r3, r8, r9
 8006188:	d047      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800618e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006190:	2b04      	cmp	r3, #4
 8006192:	d82a      	bhi.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061b1 	.word	0x080061b1
 80061a0:	080061bf 	.word	0x080061bf
 80061a4:	080061d5 	.word	0x080061d5
 80061a8:	080061f3 	.word	0x080061f3
 80061ac:	080061f3 	.word	0x080061f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b0:	4b8e      	ldr	r3, [pc, #568]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a8d      	ldr	r2, [pc, #564]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061bc:	e01a      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c2:	3308      	adds	r3, #8
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 fc3c 	bl	8007a44 <RCCEx_PLL2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061d2:	e00f      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	3328      	adds	r3, #40	; 0x28
 80061da:	2100      	movs	r1, #0
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fce3 	bl	8007ba8 <RCCEx_PLL3_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061e8:	e004      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80061f0:	e000      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80061f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061fc:	4b7b      	ldr	r3, [pc, #492]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80061fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006200:	f023 0107 	bic.w	r1, r3, #7
 8006204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a78      	ldr	r2, [pc, #480]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800620c:	430b      	orrs	r3, r1
 800620e:	6513      	str	r3, [r2, #80]	; 0x50
 8006210:	e003      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006212:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006216:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006222:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8006226:	f04f 0b00 	mov.w	fp, #0
 800622a:	ea5a 030b 	orrs.w	r3, sl, fp
 800622e:	d04c      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d030      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800623c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006240:	d829      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006242:	2bc0      	cmp	r3, #192	; 0xc0
 8006244:	d02d      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006246:	2bc0      	cmp	r3, #192	; 0xc0
 8006248:	d825      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800624a:	2b80      	cmp	r3, #128	; 0x80
 800624c:	d018      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800624e:	2b80      	cmp	r3, #128	; 0x80
 8006250:	d821      	bhi.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006256:	2b40      	cmp	r3, #64	; 0x40
 8006258:	d007      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800625a:	e01c      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800625c:	4b63      	ldr	r3, [pc, #396]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4a62      	ldr	r2, [pc, #392]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006268:	e01c      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800626e:	3308      	adds	r3, #8
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f001 fbe6 	bl	8007a44 <RCCEx_PLL2_Config>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800627e:	e011      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006280:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006284:	3328      	adds	r3, #40	; 0x28
 8006286:	2100      	movs	r1, #0
 8006288:	4618      	mov	r0, r3
 800628a:	f001 fc8d 	bl	8007ba8 <RCCEx_PLL3_Config>
 800628e:	4603      	mov	r3, r0
 8006290:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006294:	e006      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800629c:	e002      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800629e:	bf00      	nop
 80062a0:	e000      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80062a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80062ac:	4b4f      	ldr	r3, [pc, #316]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ba:	4a4c      	ldr	r2, [pc, #304]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80062bc:	430b      	orrs	r3, r1
 80062be:	6513      	str	r3, [r2, #80]	; 0x50
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80062d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062da:	2300      	movs	r3, #0
 80062dc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062e0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80062e4:	460b      	mov	r3, r1
 80062e6:	4313      	orrs	r3, r2
 80062e8:	d053      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80062ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062f6:	d035      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80062f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80062fc:	d82e      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80062fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006302:	d031      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006304:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006308:	d828      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d01a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006314:	d822      	bhi.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800631a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631e:	d007      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006320:	e01c      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006322:	4b32      	ldr	r3, [pc, #200]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006326:	4a31      	ldr	r2, [pc, #196]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800632e:	e01c      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006334:	3308      	adds	r3, #8
 8006336:	2100      	movs	r1, #0
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fb83 	bl	8007a44 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006344:	e011      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634a:	3328      	adds	r3, #40	; 0x28
 800634c:	2100      	movs	r1, #0
 800634e:	4618      	mov	r0, r3
 8006350:	f001 fc2a 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800635a:	e006      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006362:	e002      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006364:	bf00      	nop
 8006366:	e000      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800636a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10b      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006372:	4b1e      	ldr	r3, [pc, #120]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006376:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006382:	4a1a      	ldr	r2, [pc, #104]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006384:	430b      	orrs	r3, r1
 8006386:	6593      	str	r3, [r2, #88]	; 0x58
 8006388:	e003      	b.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800638e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800639e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80063a8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80063ac:	460b      	mov	r3, r1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d056      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063be:	d038      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80063c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063c4:	d831      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ca:	d034      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80063cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063d0:	d82b      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063d6:	d01d      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80063d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063dc:	d825      	bhi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d006      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80063e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063e6:	d00a      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80063e8:	e01f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80063ea:	bf00      	nop
 80063ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f0:	4ba2      	ldr	r3, [pc, #648]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	4aa1      	ldr	r2, [pc, #644]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80063fc:	e01c      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006402:	3308      	adds	r3, #8
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fb1c 	bl	8007a44 <RCCEx_PLL2_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006412:	e011      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006418:	3328      	adds	r3, #40	; 0x28
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fbc3 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006428:	e006      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006430:	e002      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006432:	bf00      	nop
 8006434:	e000      	b.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006436:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006438:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006440:	4b8e      	ldr	r3, [pc, #568]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006444:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006450:	4a8a      	ldr	r2, [pc, #552]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006452:	430b      	orrs	r3, r1
 8006454:	6593      	str	r3, [r2, #88]	; 0x58
 8006456:	e003      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800645c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006468:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800646c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006476:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800647a:	460b      	mov	r3, r1
 800647c:	4313      	orrs	r3, r2
 800647e:	d03a      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006486:	2b30      	cmp	r3, #48	; 0x30
 8006488:	d01f      	beq.n	80064ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800648a:	2b30      	cmp	r3, #48	; 0x30
 800648c:	d819      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800648e:	2b20      	cmp	r3, #32
 8006490:	d00c      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006492:	2b20      	cmp	r3, #32
 8006494:	d815      	bhi.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800649a:	2b10      	cmp	r3, #16
 800649c:	d111      	bne.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800649e:	4b77      	ldr	r3, [pc, #476]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a2:	4a76      	ldr	r2, [pc, #472]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064aa:	e011      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b0:	3308      	adds	r3, #8
 80064b2:	2102      	movs	r1, #2
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fac5 	bl	8007a44 <RCCEx_PLL2_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80064c8:	e002      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064ca:	bf00      	nop
 80064cc:	e000      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80064ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064d8:	4b68      	ldr	r3, [pc, #416]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e6:	4a65      	ldr	r2, [pc, #404]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80064e8:	430b      	orrs	r3, r1
 80064ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80064ec:	e003      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006502:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006506:	2300      	movs	r3, #0
 8006508:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800650c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006510:	460b      	mov	r3, r1
 8006512:	4313      	orrs	r3, r2
 8006514:	d051      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800651a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006520:	d035      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006526:	d82e      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800652c:	d031      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800652e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006532:	d828      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006538:	d01a      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800653a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653e:	d822      	bhi.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006544:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006548:	d007      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800654a:	e01c      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800654c:	4b4b      	ldr	r3, [pc, #300]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800654e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006550:	4a4a      	ldr	r2, [pc, #296]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006558:	e01c      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800655a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655e:	3308      	adds	r3, #8
 8006560:	2100      	movs	r1, #0
 8006562:	4618      	mov	r0, r3
 8006564:	f001 fa6e 	bl	8007a44 <RCCEx_PLL2_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800656e:	e011      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006574:	3328      	adds	r3, #40	; 0x28
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f001 fb15 	bl	8007ba8 <RCCEx_PLL3_Config>
 800657e:	4603      	mov	r3, r0
 8006580:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006584:	e006      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800658c:	e002      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800658e:	bf00      	nop
 8006590:	e000      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006594:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800659c:	4b37      	ldr	r3, [pc, #220]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800659e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80065a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065aa:	4a34      	ldr	r2, [pc, #208]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6513      	str	r3, [r2, #80]	; 0x50
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80065ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80065c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065d0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d056      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80065da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065e4:	d033      	beq.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80065e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065ea:	d82c      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065f0:	d02f      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065f6:	d826      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80065f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065fc:	d02b      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80065fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006602:	d820      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006608:	d012      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800660a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800660e:	d81a      	bhi.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006610:	2b00      	cmp	r3, #0
 8006612:	d022      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006618:	d115      	bne.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800661e:	3308      	adds	r3, #8
 8006620:	2101      	movs	r1, #1
 8006622:	4618      	mov	r0, r3
 8006624:	f001 fa0e 	bl	8007a44 <RCCEx_PLL2_Config>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800662e:	e015      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006634:	3328      	adds	r3, #40	; 0x28
 8006636:	2101      	movs	r1, #1
 8006638:	4618      	mov	r0, r3
 800663a:	f001 fab5 	bl	8007ba8 <RCCEx_PLL3_Config>
 800663e:	4603      	mov	r3, r0
 8006640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006644:	e00a      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800664c:	e006      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800665a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800665c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006664:	4b05      	ldr	r3, [pc, #20]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006672:	4a02      	ldr	r2, [pc, #8]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006674:	430b      	orrs	r3, r1
 8006676:	6513      	str	r3, [r2, #80]	; 0x50
 8006678:	e006      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800667a:	bf00      	nop
 800667c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006684:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006688:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006690:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006698:	2300      	movs	r3, #0
 800669a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800669e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80066a2:	460b      	mov	r3, r1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	d055      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80066a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066b4:	d033      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80066b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ba:	d82c      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c0:	d02f      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80066c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c6:	d826      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066cc:	d02b      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80066ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80066d2:	d820      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d8:	d012      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80066da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066de:	d81a      	bhi.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d022      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80066e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e8:	d115      	bne.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066ee:	3308      	adds	r3, #8
 80066f0:	2101      	movs	r1, #1
 80066f2:	4618      	mov	r0, r3
 80066f4:	f001 f9a6 	bl	8007a44 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80066fe:	e015      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006704:	3328      	adds	r3, #40	; 0x28
 8006706:	2101      	movs	r1, #1
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fa4d 	bl	8007ba8 <RCCEx_PLL3_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006714:	e00a      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800671c:	e006      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800671e:	bf00      	nop
 8006720:	e004      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006722:	bf00      	nop
 8006724:	e002      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800672a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006734:	4ba3      	ldr	r3, [pc, #652]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006738:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800673c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006740:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006744:	4a9f      	ldr	r2, [pc, #636]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006746:	430b      	orrs	r3, r1
 8006748:	6593      	str	r3, [r2, #88]	; 0x58
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006750:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800676a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d037      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006774:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800677a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800677e:	d00e      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006784:	d816      	bhi.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d018      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800678a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800678e:	d111      	bne.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006790:	4b8c      	ldr	r3, [pc, #560]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	4a8b      	ldr	r2, [pc, #556]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006796:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800679a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800679c:	e00f      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800679e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067a2:	3308      	adds	r3, #8
 80067a4:	2101      	movs	r1, #1
 80067a6:	4618      	mov	r0, r3
 80067a8:	f001 f94c 	bl	8007a44 <RCCEx_PLL2_Config>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80067b2:	e004      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80067ba:	e000      	b.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80067bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067c6:	4b7f      	ldr	r3, [pc, #508]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d4:	4a7b      	ldr	r2, [pc, #492]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067d6:	430b      	orrs	r3, r1
 80067d8:	6513      	str	r3, [r2, #80]	; 0x50
 80067da:	e003      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80067f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80067fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80067fe:	460b      	mov	r3, r1
 8006800:	4313      	orrs	r3, r2
 8006802:	d039      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800680a:	2b03      	cmp	r3, #3
 800680c:	d81c      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	08006851 	.word	0x08006851
 8006818:	08006825 	.word	0x08006825
 800681c:	08006833 	.word	0x08006833
 8006820:	08006851 	.word	0x08006851
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006824:	4b67      	ldr	r3, [pc, #412]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a66      	ldr	r2, [pc, #408]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800682a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006830:	e00f      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006832:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006836:	3308      	adds	r3, #8
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f001 f902 	bl	8007a44 <RCCEx_PLL2_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006846:	e004      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800684e:	e000      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006852:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800685a:	4b5a      	ldr	r3, [pc, #360]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800685c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800685e:	f023 0103 	bic.w	r1, r3, #3
 8006862:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006868:	4a56      	ldr	r2, [pc, #344]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800686a:	430b      	orrs	r3, r1
 800686c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006874:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006884:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800688e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	f000 809f 	beq.w	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800689a:	4b4b      	ldr	r3, [pc, #300]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a4a      	ldr	r2, [pc, #296]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068a6:	f7fc f86b 	bl	8002980 <HAL_GetTick>
 80068aa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ae:	e00b      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b0:	f7fc f866 	bl	8002980 <HAL_GetTick>
 80068b4:	4602      	mov	r2, r0
 80068b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80068ba:	1ad3      	subs	r3, r2, r3
 80068bc:	2b64      	cmp	r3, #100	; 0x64
 80068be:	d903      	bls.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80068c0:	2303      	movs	r3, #3
 80068c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068c6:	e005      	b.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068c8:	4b3f      	ldr	r3, [pc, #252]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d0ed      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80068d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d179      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068dc:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068e8:	4053      	eors	r3, r2
 80068ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d015      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068f2:	4b34      	ldr	r3, [pc, #208]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80068f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068fe:	4b31      	ldr	r3, [pc, #196]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006902:	4a30      	ldr	r2, [pc, #192]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006908:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800690a:	4b2e      	ldr	r3, [pc, #184]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a2d      	ldr	r2, [pc, #180]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006916:	4a2b      	ldr	r2, [pc, #172]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006918:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800691c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800691e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006922:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800692a:	d118      	bne.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc f828 	bl	8002980 <HAL_GetTick>
 8006930:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006934:	e00d      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006936:	f7fc f823 	bl	8002980 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006940:	1ad2      	subs	r2, r2, r3
 8006942:	f241 3388 	movw	r3, #5000	; 0x1388
 8006946:	429a      	cmp	r2, r3
 8006948:	d903      	bls.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006950:	e005      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006952:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0eb      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800695e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006962:	2b00      	cmp	r3, #0
 8006964:	d129      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800696a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800696e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006972:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006976:	d10e      	bne.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006978:	4b12      	ldr	r3, [pc, #72]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006988:	091a      	lsrs	r2, r3, #4
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800698c:	4013      	ands	r3, r2
 800698e:	4a0d      	ldr	r2, [pc, #52]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006990:	430b      	orrs	r3, r1
 8006992:	6113      	str	r3, [r2, #16]
 8006994:	e005      	b.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	4a0a      	ldr	r2, [pc, #40]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800699c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069a0:	6113      	str	r3, [r2, #16]
 80069a2:	4b08      	ldr	r3, [pc, #32]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80069a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b2:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80069b4:	430b      	orrs	r3, r1
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	e00e      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80069c2:	e009      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80069c4:	58024400 	.word	0x58024400
 80069c8:	58024800 	.word	0x58024800
 80069cc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e0:	f002 0301 	and.w	r3, r2, #1
 80069e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069e8:	2300      	movs	r3, #0
 80069ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4313      	orrs	r3, r2
 80069f6:	f000 8089 	beq.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80069fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a00:	2b28      	cmp	r3, #40	; 0x28
 8006a02:	d86b      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006ae5 	.word	0x08006ae5
 8006a10:	08006add 	.word	0x08006add
 8006a14:	08006add 	.word	0x08006add
 8006a18:	08006add 	.word	0x08006add
 8006a1c:	08006add 	.word	0x08006add
 8006a20:	08006add 	.word	0x08006add
 8006a24:	08006add 	.word	0x08006add
 8006a28:	08006add 	.word	0x08006add
 8006a2c:	08006ab1 	.word	0x08006ab1
 8006a30:	08006add 	.word	0x08006add
 8006a34:	08006add 	.word	0x08006add
 8006a38:	08006add 	.word	0x08006add
 8006a3c:	08006add 	.word	0x08006add
 8006a40:	08006add 	.word	0x08006add
 8006a44:	08006add 	.word	0x08006add
 8006a48:	08006add 	.word	0x08006add
 8006a4c:	08006ac7 	.word	0x08006ac7
 8006a50:	08006add 	.word	0x08006add
 8006a54:	08006add 	.word	0x08006add
 8006a58:	08006add 	.word	0x08006add
 8006a5c:	08006add 	.word	0x08006add
 8006a60:	08006add 	.word	0x08006add
 8006a64:	08006add 	.word	0x08006add
 8006a68:	08006add 	.word	0x08006add
 8006a6c:	08006ae5 	.word	0x08006ae5
 8006a70:	08006add 	.word	0x08006add
 8006a74:	08006add 	.word	0x08006add
 8006a78:	08006add 	.word	0x08006add
 8006a7c:	08006add 	.word	0x08006add
 8006a80:	08006add 	.word	0x08006add
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006add 	.word	0x08006add
 8006a8c:	08006ae5 	.word	0x08006ae5
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006add 	.word	0x08006add
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006add 	.word	0x08006add
 8006aac:	08006ae5 	.word	0x08006ae5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ab4:	3308      	adds	r3, #8
 8006ab6:	2101      	movs	r1, #1
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 ffc3 	bl	8007a44 <RCCEx_PLL2_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ac4:	e00f      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006aca:	3328      	adds	r3, #40	; 0x28
 8006acc:	2101      	movs	r1, #1
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f001 f86a 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006ada:	e004      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ae2:	e000      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006aee:	4bbf      	ldr	r3, [pc, #764]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afc:	4abb      	ldr	r2, [pc, #748]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006afe:	430b      	orrs	r3, r1
 8006b00:	6553      	str	r3, [r2, #84]	; 0x54
 8006b02:	e003      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b14:	f002 0302 	and.w	r3, r2, #2
 8006b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b22:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006b26:	460b      	mov	r3, r1
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	d041      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b32:	2b05      	cmp	r3, #5
 8006b34:	d824      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b89 	.word	0x08006b89
 8006b40:	08006b55 	.word	0x08006b55
 8006b44:	08006b6b 	.word	0x08006b6b
 8006b48:	08006b89 	.word	0x08006b89
 8006b4c:	08006b89 	.word	0x08006b89
 8006b50:	08006b89 	.word	0x08006b89
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b58:	3308      	adds	r3, #8
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 ff71 	bl	8007a44 <RCCEx_PLL2_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b68:	e00f      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b6e:	3328      	adds	r3, #40	; 0x28
 8006b70:	2101      	movs	r1, #1
 8006b72:	4618      	mov	r0, r3
 8006b74:	f001 f818 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006b7e:	e004      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006b86:	e000      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10a      	bne.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b92:	4b96      	ldr	r3, [pc, #600]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b96:	f023 0107 	bic.w	r1, r3, #7
 8006b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ba0:	4a92      	ldr	r2, [pc, #584]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ba6:	e003      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f002 0304 	and.w	r3, r2, #4
 8006bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bc6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	d044      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	d825      	bhi.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006bdc:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be2:	bf00      	nop
 8006be4:	08006c31 	.word	0x08006c31
 8006be8:	08006bfd 	.word	0x08006bfd
 8006bec:	08006c13 	.word	0x08006c13
 8006bf0:	08006c31 	.word	0x08006c31
 8006bf4:	08006c31 	.word	0x08006c31
 8006bf8:	08006c31 	.word	0x08006c31
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c00:	3308      	adds	r3, #8
 8006c02:	2101      	movs	r1, #1
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 ff1d 	bl	8007a44 <RCCEx_PLL2_Config>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c10:	e00f      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c16:	3328      	adds	r3, #40	; 0x28
 8006c18:	2101      	movs	r1, #1
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f000 ffc4 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006c26:	e004      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c3a:	4b6c      	ldr	r3, [pc, #432]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3e:	f023 0107 	bic.w	r1, r3, #7
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c4a:	4a68      	ldr	r2, [pc, #416]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006c56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f002 0320 	and.w	r3, r2, #32
 8006c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c74:	460b      	mov	r3, r1
 8006c76:	4313      	orrs	r3, r2
 8006c78:	d055      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c86:	d033      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c8c:	d82c      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c92:	d02f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c98:	d826      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006c9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c9e:	d02b      	beq.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006ca0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ca4:	d820      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ca6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006caa:	d012      	beq.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb0:	d81a      	bhi.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d022      	beq.n	8006cfc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cba:	d115      	bne.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cc0:	3308      	adds	r3, #8
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 febd 	bl	8007a44 <RCCEx_PLL2_Config>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006cd0:	e015      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cd6:	3328      	adds	r3, #40	; 0x28
 8006cd8:	2102      	movs	r1, #2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 ff64 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ce6:	e00a      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006cee:	e006      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10b      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d06:	4b39      	ldr	r3, [pc, #228]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	4a35      	ldr	r2, [pc, #212]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	6553      	str	r3, [r2, #84]	; 0x54
 8006d1c:	e003      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006d22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006d3c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d058      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006d54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006d58:	d82c      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d5e:	d02f      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d826      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d6a:	d02b      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d70:	d820      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d76:	d012      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7c:	d81a      	bhi.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d022      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d86:	d115      	bne.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d8c:	3308      	adds	r3, #8
 8006d8e:	2100      	movs	r1, #0
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fe57 	bl	8007a44 <RCCEx_PLL2_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e015      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da2:	3328      	adds	r3, #40	; 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fefe 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006db2:	e00a      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006dba:	e006      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dbc:	bf00      	nop
 8006dbe:	e004      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc0:	bf00      	nop
 8006dc2:	e002      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10e      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006dd2:	4b06      	ldr	r3, [pc, #24]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006de2:	4a02      	ldr	r2, [pc, #8]	; (8006dec <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006de4:	430b      	orrs	r3, r1
 8006de6:	6593      	str	r3, [r2, #88]	; 0x58
 8006de8:	e006      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006dea:	bf00      	nop
 8006dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006e12:	460b      	mov	r3, r1
 8006e14:	4313      	orrs	r3, r2
 8006e16:	d055      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e1c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e20:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e24:	d033      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006e26:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e2a:	d82c      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e30:	d02f      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006e32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e36:	d826      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e38:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e3c:	d02b      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006e3e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006e42:	d820      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e48:	d012      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e4e:	d81a      	bhi.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d022      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e58:	d115      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e5e:	3308      	adds	r3, #8
 8006e60:	2100      	movs	r1, #0
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fdee 	bl	8007a44 <RCCEx_PLL2_Config>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e6e:	e015      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e74:	3328      	adds	r3, #40	; 0x28
 8006e76:	2102      	movs	r1, #2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fe95 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006e84:	e00a      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e8c:	e006      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e8e:	bf00      	nop
 8006e90:	e004      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e92:	bf00      	nop
 8006e94:	e002      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e000      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ea4:	4ba1      	ldr	r3, [pc, #644]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eb4:	4a9d      	ldr	r2, [pc, #628]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eba:	e003      	b.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ecc:	f002 0308 	and.w	r3, r2, #8
 8006ed0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006eda:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ede:	460b      	mov	r3, r1
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	d01e      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d10c      	bne.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef6:	3328      	adds	r3, #40	; 0x28
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fe54 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d002      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f0c:	4b87      	ldr	r3, [pc, #540]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f1c:	4a83      	ldr	r2, [pc, #524]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	f002 0310 	and.w	r3, r2, #16
 8006f2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f32:	2300      	movs	r3, #0
 8006f34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006f38:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d01e      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4e:	d10c      	bne.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f54:	3328      	adds	r3, #40	; 0x28
 8006f56:	2102      	movs	r1, #2
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fe25 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d002      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f6a:	4b70      	ldr	r3, [pc, #448]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f7a:	4a6c      	ldr	r2, [pc, #432]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006f8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f96:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d03e      	beq.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fac:	d022      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb2:	d81b      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbc:	d00b      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006fbe:	e015      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc4:	3308      	adds	r3, #8
 8006fc6:	2100      	movs	r1, #0
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fd3b 	bl	8007a44 <RCCEx_PLL2_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00f      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fda:	3328      	adds	r3, #40	; 0x28
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fde2 	bl	8007ba8 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006fea:	e004      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffe:	4b4b      	ldr	r3, [pc, #300]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8007006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800700a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800700e:	4a47      	ldr	r2, [pc, #284]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007010:	430b      	orrs	r3, r1
 8007012:	6593      	str	r3, [r2, #88]	; 0x58
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800701a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800701e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800702a:	67bb      	str	r3, [r7, #120]	; 0x78
 800702c:	2300      	movs	r3, #0
 800702e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007030:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007034:	460b      	mov	r3, r1
 8007036:	4313      	orrs	r3, r2
 8007038:	d03b      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800703a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007046:	d01f      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007048:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800704c:	d818      	bhi.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800704e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007052:	d003      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007054:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007058:	d007      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800705a:	e011      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705c:	4b33      	ldr	r3, [pc, #204]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007060:	4a32      	ldr	r2, [pc, #200]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007066:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007068:	e00f      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800706a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800706e:	3328      	adds	r3, #40	; 0x28
 8007070:	2101      	movs	r1, #1
 8007072:	4618      	mov	r0, r3
 8007074:	f000 fd98 	bl	8007ba8 <RCCEx_PLL3_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800707e:	e004      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007086:	e000      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007088:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007092:	4b26      	ldr	r3, [pc, #152]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	4a22      	ldr	r2, [pc, #136]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6553      	str	r3, [r2, #84]	; 0x54
 80070a8:	e003      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80070ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80070b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80070be:	673b      	str	r3, [r7, #112]	; 0x70
 80070c0:	2300      	movs	r3, #0
 80070c2:	677b      	str	r3, [r7, #116]	; 0x74
 80070c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80070c8:	460b      	mov	r3, r1
 80070ca:	4313      	orrs	r3, r2
 80070cc:	d034      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80070ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80070d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070dc:	d007      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80070de:	e011      	b.n	8007104 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e4:	4a11      	ldr	r2, [pc, #68]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80070e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80070ec:	e00e      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f2:	3308      	adds	r3, #8
 80070f4:	2102      	movs	r1, #2
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 fca4 	bl	8007a44 <RCCEx_PLL2_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007102:	e003      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800710a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800710c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007110:	2b00      	cmp	r3, #0
 8007112:	d10d      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007114:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800711c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007122:	4a02      	ldr	r2, [pc, #8]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007124:	430b      	orrs	r3, r1
 8007126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007128:	e006      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800712a:	bf00      	nop
 800712c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007130:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007134:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007138:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800713c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007140:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007144:	66bb      	str	r3, [r7, #104]	; 0x68
 8007146:	2300      	movs	r3, #0
 8007148:	66fb      	str	r3, [r7, #108]	; 0x6c
 800714a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800714e:	460b      	mov	r3, r1
 8007150:	4313      	orrs	r3, r2
 8007152:	d00c      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007158:	3328      	adds	r3, #40	; 0x28
 800715a:	2102      	movs	r1, #2
 800715c:	4618      	mov	r0, r3
 800715e:	f000 fd23 	bl	8007ba8 <RCCEx_PLL3_Config>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800717a:	663b      	str	r3, [r7, #96]	; 0x60
 800717c:	2300      	movs	r3, #0
 800717e:	667b      	str	r3, [r7, #100]	; 0x64
 8007180:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d038      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007196:	d018      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800719c:	d811      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800719e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a2:	d014      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80071a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071a8:	d80b      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d011      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80071ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071b2:	d106      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b4:	4bc3      	ldr	r3, [pc, #780]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b8:	4ac2      	ldr	r2, [pc, #776]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80071c0:	e008      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80071c8:	e004      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071ca:	bf00      	nop
 80071cc:	e002      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071ce:	bf00      	nop
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80071d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071dc:	4bb9      	ldr	r3, [pc, #740]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80071e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071ec:	4ab5      	ldr	r2, [pc, #724]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80071ee:	430b      	orrs	r3, r1
 80071f0:	6553      	str	r3, [r2, #84]	; 0x54
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8007208:	65bb      	str	r3, [r7, #88]	; 0x58
 800720a:	2300      	movs	r3, #0
 800720c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800720e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007212:	460b      	mov	r3, r1
 8007214:	4313      	orrs	r3, r2
 8007216:	d009      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007218:	4baa      	ldr	r3, [pc, #680]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800721a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007226:	4aa7      	ldr	r2, [pc, #668]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007228:	430b      	orrs	r3, r1
 800722a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800722c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007234:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007238:	653b      	str	r3, [r7, #80]	; 0x50
 800723a:	2300      	movs	r3, #0
 800723c:	657b      	str	r3, [r7, #84]	; 0x54
 800723e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007242:	460b      	mov	r3, r1
 8007244:	4313      	orrs	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007248:	4b9e      	ldr	r3, [pc, #632]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007254:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007258:	4a9a      	ldr	r2, [pc, #616]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800725a:	430b      	orrs	r3, r1
 800725c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800726a:	64bb      	str	r3, [r7, #72]	; 0x48
 800726c:	2300      	movs	r3, #0
 800726e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007270:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007274:	460b      	mov	r3, r1
 8007276:	4313      	orrs	r3, r2
 8007278:	d009      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800727a:	4b92      	ldr	r3, [pc, #584]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800727c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800727e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007288:	4a8e      	ldr	r2, [pc, #568]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800728a:	430b      	orrs	r3, r1
 800728c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007296:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800729a:	643b      	str	r3, [r7, #64]	; 0x40
 800729c:	2300      	movs	r3, #0
 800729e:	647b      	str	r3, [r7, #68]	; 0x44
 80072a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80072a4:	460b      	mov	r3, r1
 80072a6:	4313      	orrs	r3, r2
 80072a8:	d00e      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072aa:	4b86      	ldr	r3, [pc, #536]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	4a85      	ldr	r2, [pc, #532]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80072b4:	6113      	str	r3, [r2, #16]
 80072b6:	4b83      	ldr	r3, [pc, #524]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072b8:	6919      	ldr	r1, [r3, #16]
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80072c2:	4a80      	ldr	r2, [pc, #512]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072c4:	430b      	orrs	r3, r1
 80072c6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80072c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072da:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80072de:	460b      	mov	r3, r1
 80072e0:	4313      	orrs	r3, r2
 80072e2:	d009      	beq.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80072e4:	4b77      	ldr	r3, [pc, #476]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072e8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f2:	4a74      	ldr	r2, [pc, #464]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80072f4:	430b      	orrs	r3, r1
 80072f6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80072fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007300:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007304:	633b      	str	r3, [r7, #48]	; 0x30
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
 800730a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800730e:	460b      	mov	r3, r1
 8007310:	4313      	orrs	r3, r2
 8007312:	d00a      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007314:	4b6b      	ldr	r3, [pc, #428]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007318:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800731c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007324:	4a67      	ldr	r2, [pc, #412]	; (80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007326:	430b      	orrs	r3, r1
 8007328:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	2100      	movs	r1, #0
 8007334:	62b9      	str	r1, [r7, #40]	; 0x28
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800733c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007340:	460b      	mov	r3, r1
 8007342:	4313      	orrs	r3, r2
 8007344:	d011      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007346:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800734a:	3308      	adds	r3, #8
 800734c:	2100      	movs	r1, #0
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fb78 	bl	8007a44 <RCCEx_PLL2_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	2100      	movs	r1, #0
 8007374:	6239      	str	r1, [r7, #32]
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
 800737c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007380:	460b      	mov	r3, r1
 8007382:	4313      	orrs	r3, r2
 8007384:	d011      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800738a:	3308      	adds	r3, #8
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fb58 	bl	8007a44 <RCCEx_PLL2_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800739a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	2100      	movs	r1, #0
 80073b4:	61b9      	str	r1, [r7, #24]
 80073b6:	f003 0304 	and.w	r3, r3, #4
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80073c0:	460b      	mov	r3, r1
 80073c2:	4313      	orrs	r3, r2
 80073c4:	d011      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ca:	3308      	adds	r3, #8
 80073cc:	2102      	movs	r1, #2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fb38 	bl	8007a44 <RCCEx_PLL2_Config>
 80073d4:	4603      	mov	r3, r0
 80073d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80073da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d003      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80073ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	2100      	movs	r1, #0
 80073f4:	6139      	str	r1, [r7, #16]
 80073f6:	f003 0308 	and.w	r3, r3, #8
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d011      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740a:	3328      	adds	r3, #40	; 0x28
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fbca 	bl	8007ba8 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800741a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800742a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800742e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007432:	2100      	movs	r1, #0
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	f003 0310 	and.w	r3, r3, #16
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007440:	460b      	mov	r3, r1
 8007442:	4313      	orrs	r3, r2
 8007444:	d011      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800744a:	3328      	adds	r3, #40	; 0x28
 800744c:	2101      	movs	r1, #1
 800744e:	4618      	mov	r0, r3
 8007450:	f000 fbaa 	bl	8007ba8 <RCCEx_PLL3_Config>
 8007454:	4603      	mov	r3, r0
 8007456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800745a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800745e:	2b00      	cmp	r3, #0
 8007460:	d003      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800746a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	2100      	movs	r1, #0
 8007474:	6039      	str	r1, [r7, #0]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007480:	460b      	mov	r3, r1
 8007482:	4313      	orrs	r3, r2
 8007484:	d011      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800748a:	3328      	adds	r3, #40	; 0x28
 800748c:	2102      	movs	r1, #2
 800748e:	4618      	mov	r0, r3
 8007490:	f000 fb8a 	bl	8007ba8 <RCCEx_PLL3_Config>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800749a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80074a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80074aa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d101      	bne.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80074be:	46bd      	mov	sp, r7
 80074c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074c4:	58024400 	.word	0x58024400

080074c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80074cc:	f7fe fd96 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 80074d0:	4602      	mov	r2, r0
 80074d2:	4b06      	ldr	r3, [pc, #24]	; (80074ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80074d4:	6a1b      	ldr	r3, [r3, #32]
 80074d6:	091b      	lsrs	r3, r3, #4
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	4904      	ldr	r1, [pc, #16]	; (80074f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80074de:	5ccb      	ldrb	r3, [r1, r3]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	58024400 	.word	0x58024400
 80074f0:	08011be8 	.word	0x08011be8

080074f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b089      	sub	sp, #36	; 0x24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074fc:	4ba1      	ldr	r3, [pc, #644]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	f003 0303 	and.w	r3, r3, #3
 8007504:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007506:	4b9f      	ldr	r3, [pc, #636]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	0b1b      	lsrs	r3, r3, #12
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007512:	4b9c      	ldr	r3, [pc, #624]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007516:	091b      	lsrs	r3, r3, #4
 8007518:	f003 0301 	and.w	r3, r3, #1
 800751c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800751e:	4b99      	ldr	r3, [pc, #612]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007522:	08db      	lsrs	r3, r3, #3
 8007524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	ee07 3a90 	vmov	s15, r3
 8007532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007536:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8111 	beq.w	8007764 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	2b02      	cmp	r3, #2
 8007546:	f000 8083 	beq.w	8007650 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b02      	cmp	r3, #2
 800754e:	f200 80a1 	bhi.w	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d056      	beq.n	800760c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800755e:	e099      	b.n	8007694 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007560:	4b88      	ldr	r3, [pc, #544]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0320 	and.w	r3, r3, #32
 8007568:	2b00      	cmp	r3, #0
 800756a:	d02d      	beq.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800756c:	4b85      	ldr	r3, [pc, #532]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	08db      	lsrs	r3, r3, #3
 8007572:	f003 0303 	and.w	r3, r3, #3
 8007576:	4a84      	ldr	r2, [pc, #528]	; (8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007578:	fa22 f303 	lsr.w	r3, r2, r3
 800757c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	ee07 3a90 	vmov	s15, r3
 8007584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b7b      	ldr	r3, [pc, #492]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800778c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075c6:	e087      	b.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007790 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b6a      	ldr	r3, [pc, #424]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800778c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760a:	e065      	b.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	ee07 3a90 	vmov	s15, r3
 8007612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007616:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800761a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800761e:	4b59      	ldr	r3, [pc, #356]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007626:	ee07 3a90 	vmov	s15, r3
 800762a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800762e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007632:	eddf 5a56 	vldr	s11, [pc, #344]	; 800778c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800763e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800764e:	e043      	b.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	ee07 3a90 	vmov	s15, r3
 8007656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007798 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800765e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007662:	4b48      	ldr	r3, [pc, #288]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766a:	ee07 3a90 	vmov	s15, r3
 800766e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007672:	ed97 6a03 	vldr	s12, [r7, #12]
 8007676:	eddf 5a45 	vldr	s11, [pc, #276]	; 800778c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800767a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800767e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007692:	e021      	b.n	80076d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800769e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007794 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a6:	4b37      	ldr	r3, [pc, #220]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ae:	ee07 3a90 	vmov	s15, r3
 80076b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800778c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80076d8:	4b2a      	ldr	r3, [pc, #168]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076dc:	0a5b      	lsrs	r3, r3, #9
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	ee07 3a90 	vmov	s15, r3
 80076e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80076f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076fe:	ee17 2a90 	vmov	r2, s15
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007706:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	0c1b      	lsrs	r3, r3, #16
 800770c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007710:	ee07 3a90 	vmov	s15, r3
 8007714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800771c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007720:	edd7 6a07 	vldr	s13, [r7, #28]
 8007724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800772c:	ee17 2a90 	vmov	r2, s15
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007734:	4b13      	ldr	r3, [pc, #76]	; (8007784 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007738:	0e1b      	lsrs	r3, r3, #24
 800773a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007746:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800774a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800774e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007756:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800775a:	ee17 2a90 	vmov	r2, s15
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007762:	e008      	b.n	8007776 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	609a      	str	r2, [r3, #8]
}
 8007776:	bf00      	nop
 8007778:	3724      	adds	r7, #36	; 0x24
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	58024400 	.word	0x58024400
 8007788:	03d09000 	.word	0x03d09000
 800778c:	46000000 	.word	0x46000000
 8007790:	4c742400 	.word	0x4c742400
 8007794:	4a742400 	.word	0x4a742400
 8007798:	4af42400 	.word	0x4af42400

0800779c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800779c:	b480      	push	{r7}
 800779e:	b089      	sub	sp, #36	; 0x24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077a4:	4ba1      	ldr	r3, [pc, #644]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a8:	f003 0303 	and.w	r3, r3, #3
 80077ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80077ae:	4b9f      	ldr	r3, [pc, #636]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b2:	0d1b      	lsrs	r3, r3, #20
 80077b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80077ba:	4b9c      	ldr	r3, [pc, #624]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	0a1b      	lsrs	r3, r3, #8
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80077c6:	4b99      	ldr	r3, [pc, #612]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	08db      	lsrs	r3, r3, #3
 80077cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	fb02 f303 	mul.w	r3, r2, r3
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 8111 	beq.w	8007a0c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	f000 8083 	beq.w	80078f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	f200 80a1 	bhi.w	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d056      	beq.n	80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007806:	e099      	b.n	800793c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007808:	4b88      	ldr	r3, [pc, #544]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	2b00      	cmp	r3, #0
 8007812:	d02d      	beq.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007814:	4b85      	ldr	r3, [pc, #532]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	4a84      	ldr	r2, [pc, #528]	; (8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
 8007824:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	ee07 3a90 	vmov	s15, r3
 800782c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b7b      	ldr	r3, [pc, #492]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800786e:	e087      	b.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a38 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800787e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007882:	4b6a      	ldr	r3, [pc, #424]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800788a:	ee07 3a90 	vmov	s15, r3
 800788e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007892:	ed97 6a03 	vldr	s12, [r7, #12]
 8007896:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800789a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078b2:	e065      	b.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	ee07 3a90 	vmov	s15, r3
 80078ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80078c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c6:	4b59      	ldr	r3, [pc, #356]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ce:	ee07 3a90 	vmov	s15, r3
 80078d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80078da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f6:	e043      	b.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007902:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800790a:	4b48      	ldr	r3, [pc, #288]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007912:	ee07 3a90 	vmov	s15, r3
 8007916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800791a:	ed97 6a03 	vldr	s12, [r7, #12]
 800791e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800792a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800793a:	e021      	b.n	8007980 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	ee07 3a90 	vmov	s15, r3
 8007942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007946:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800794a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794e:	4b37      	ldr	r3, [pc, #220]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007956:	ee07 3a90 	vmov	s15, r3
 800795a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007962:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a34 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800796a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800797a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800797e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007980:	4b2a      	ldr	r3, [pc, #168]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	0a5b      	lsrs	r3, r3, #9
 8007986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800798a:	ee07 3a90 	vmov	s15, r3
 800798e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007992:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007996:	ee37 7a87 	vadd.f32	s14, s15, s14
 800799a:	edd7 6a07 	vldr	s13, [r7, #28]
 800799e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079a6:	ee17 2a90 	vmov	r2, s15
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80079ae:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	0c1b      	lsrs	r3, r3, #16
 80079b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80079cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079d4:	ee17 2a90 	vmov	r2, s15
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80079dc:	4b13      	ldr	r3, [pc, #76]	; (8007a2c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e0:	0e1b      	lsrs	r3, r3, #24
 80079e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e6:	ee07 3a90 	vmov	s15, r3
 80079ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a02:	ee17 2a90 	vmov	r2, s15
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a0a:	e008      	b.n	8007a1e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	609a      	str	r2, [r3, #8]
}
 8007a1e:	bf00      	nop
 8007a20:	3724      	adds	r7, #36	; 0x24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	58024400 	.word	0x58024400
 8007a30:	03d09000 	.word	0x03d09000
 8007a34:	46000000 	.word	0x46000000
 8007a38:	4c742400 	.word	0x4c742400
 8007a3c:	4a742400 	.word	0x4a742400
 8007a40:	4af42400 	.word	0x4af42400

08007a44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a52:	4b53      	ldr	r3, [pc, #332]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a56:	f003 0303 	and.w	r3, r3, #3
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d101      	bne.n	8007a62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e099      	b.n	8007b96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007a62:	4b4f      	ldr	r3, [pc, #316]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a4e      	ldr	r2, [pc, #312]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007a68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a6e:	f7fa ff87 	bl	8002980 <HAL_GetTick>
 8007a72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a74:	e008      	b.n	8007a88 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a76:	f7fa ff83 	bl	8002980 <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d901      	bls.n	8007a88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e086      	b.n	8007b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a88:	4b45      	ldr	r3, [pc, #276]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1f0      	bne.n	8007a76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007a94:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	031b      	lsls	r3, r3, #12
 8007aa2:	493f      	ldr	r1, [pc, #252]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	628b      	str	r3, [r1, #40]	; 0x28
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	025b      	lsls	r3, r3, #9
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	041b      	lsls	r3, r3, #16
 8007ac6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	061b      	lsls	r3, r3, #24
 8007ad4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ad8:	4931      	ldr	r1, [pc, #196]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007ade:	4b30      	ldr	r3, [pc, #192]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	492d      	ldr	r1, [pc, #180]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007af0:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	f023 0220 	bic.w	r2, r3, #32
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	4928      	ldr	r1, [pc, #160]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b06:	4a26      	ldr	r2, [pc, #152]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b08:	f023 0310 	bic.w	r3, r3, #16
 8007b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b0e:	4b24      	ldr	r3, [pc, #144]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b12:	4b24      	ldr	r3, [pc, #144]	; (8007ba4 <RCCEx_PLL2_Config+0x160>)
 8007b14:	4013      	ands	r3, r2
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	69d2      	ldr	r2, [r2, #28]
 8007b1a:	00d2      	lsls	r2, r2, #3
 8007b1c:	4920      	ldr	r1, [pc, #128]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b22:	4b1f      	ldr	r3, [pc, #124]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b28:	f043 0310 	orr.w	r3, r3, #16
 8007b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d106      	bne.n	8007b42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b40:	e00f      	b.n	8007b62 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d106      	bne.n	8007b56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b48:	4b15      	ldr	r3, [pc, #84]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b4c:	4a14      	ldr	r2, [pc, #80]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b54:	e005      	b.n	8007b62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b56:	4b12      	ldr	r3, [pc, #72]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007b62:	4b0f      	ldr	r3, [pc, #60]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a0e      	ldr	r2, [pc, #56]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b6e:	f7fa ff07 	bl	8002980 <HAL_GetTick>
 8007b72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b74:	e008      	b.n	8007b88 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007b76:	f7fa ff03 	bl	8002980 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d901      	bls.n	8007b88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e006      	b.n	8007b96 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0f0      	beq.n	8007b76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	ffff0007 	.word	0xffff0007

08007ba8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bb6:	4b53      	ldr	r3, [pc, #332]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d101      	bne.n	8007bc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e099      	b.n	8007cfa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007bc6:	4b4f      	ldr	r3, [pc, #316]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a4e      	ldr	r2, [pc, #312]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd2:	f7fa fed5 	bl	8002980 <HAL_GetTick>
 8007bd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bd8:	e008      	b.n	8007bec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bda:	f7fa fed1 	bl	8002980 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e086      	b.n	8007cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bec:	4b45      	ldr	r3, [pc, #276]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f0      	bne.n	8007bda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007bf8:	4b42      	ldr	r3, [pc, #264]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	051b      	lsls	r3, r3, #20
 8007c06:	493f      	ldr	r1, [pc, #252]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	3b01      	subs	r3, #1
 8007c1c:	025b      	lsls	r3, r3, #9
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	061b      	lsls	r3, r3, #24
 8007c38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c3c:	4931      	ldr	r1, [pc, #196]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c42:	4b30      	ldr	r3, [pc, #192]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	492d      	ldr	r1, [pc, #180]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c54:	4b2b      	ldr	r3, [pc, #172]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	4928      	ldr	r1, [pc, #160]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007c66:	4b27      	ldr	r3, [pc, #156]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	4a26      	ldr	r2, [pc, #152]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007c72:	4b24      	ldr	r3, [pc, #144]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c76:	4b24      	ldr	r3, [pc, #144]	; (8007d08 <RCCEx_PLL3_Config+0x160>)
 8007c78:	4013      	ands	r3, r2
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	69d2      	ldr	r2, [r2, #28]
 8007c7e:	00d2      	lsls	r2, r2, #3
 8007c80:	4920      	ldr	r1, [pc, #128]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007c86:	4b1f      	ldr	r3, [pc, #124]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8a:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007c98:	4b1a      	ldr	r3, [pc, #104]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c9c:	4a19      	ldr	r2, [pc, #100]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ca2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ca4:	e00f      	b.n	8007cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cac:	4b15      	ldr	r3, [pc, #84]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb0:	4a14      	ldr	r2, [pc, #80]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cb8:	e005      	b.n	8007cc6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cba:	4b12      	ldr	r3, [pc, #72]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cbe:	4a11      	ldr	r2, [pc, #68]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cc0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007cc4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007cc6:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a0e      	ldr	r2, [pc, #56]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cd2:	f7fa fe55 	bl	8002980 <HAL_GetTick>
 8007cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cd8:	e008      	b.n	8007cec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cda:	f7fa fe51 	bl	8002980 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e006      	b.n	8007cfa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007cec:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d0f0      	beq.n	8007cda <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	58024400 	.word	0x58024400
 8007d08:	ffff0007 	.word	0xffff0007

08007d0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	e049      	b.n	8007db2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d106      	bne.n	8007d38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7fa fbb0 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3304      	adds	r3, #4
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4610      	mov	r0, r2
 8007d4c:	f000 fd1c 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
	...

08007dbc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d001      	beq.n	8007dd4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e04c      	b.n	8007e6e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <HAL_TIM_Base_Start+0xc0>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d022      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dee:	d01d      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a22      	ldr	r2, [pc, #136]	; (8007e80 <HAL_TIM_Base_Start+0xc4>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d018      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a21      	ldr	r2, [pc, #132]	; (8007e84 <HAL_TIM_Base_Start+0xc8>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a1f      	ldr	r2, [pc, #124]	; (8007e88 <HAL_TIM_Base_Start+0xcc>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00e      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1e      	ldr	r2, [pc, #120]	; (8007e8c <HAL_TIM_Base_Start+0xd0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d009      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1c      	ldr	r2, [pc, #112]	; (8007e90 <HAL_TIM_Base_Start+0xd4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d004      	beq.n	8007e2c <HAL_TIM_Base_Start+0x70>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1b      	ldr	r2, [pc, #108]	; (8007e94 <HAL_TIM_Base_Start+0xd8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d115      	bne.n	8007e58 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	4b19      	ldr	r3, [pc, #100]	; (8007e98 <HAL_TIM_Base_Start+0xdc>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d015      	beq.n	8007e6a <HAL_TIM_Base_Start+0xae>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e44:	d011      	beq.n	8007e6a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0201 	orr.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	e008      	b.n	8007e6a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e000      	b.n	8007e6c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40010000 	.word	0x40010000
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40000800 	.word	0x40000800
 8007e88:	40000c00 	.word	0x40000c00
 8007e8c:	40010400 	.word	0x40010400
 8007e90:	40001800 	.word	0x40001800
 8007e94:	40014000 	.word	0x40014000
 8007e98:	00010007 	.word	0x00010007

08007e9c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e049      	b.n	8007f42 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f841 	bl	8007f4a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f000 fc54 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
	...

08007f60 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <HAL_TIM_OC_Start_IT+0x28>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	e03c      	b.n	8008002 <HAL_TIM_OC_Start_IT+0xa2>
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	2b04      	cmp	r3, #4
 8007f8c:	d109      	bne.n	8007fa2 <HAL_TIM_OC_Start_IT+0x42>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	bf14      	ite	ne
 8007f9a:	2301      	movne	r3, #1
 8007f9c:	2300      	moveq	r3, #0
 8007f9e:	b2db      	uxtb	r3, r3
 8007fa0:	e02f      	b.n	8008002 <HAL_TIM_OC_Start_IT+0xa2>
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2b08      	cmp	r3, #8
 8007fa6:	d109      	bne.n	8007fbc <HAL_TIM_OC_Start_IT+0x5c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	e022      	b.n	8008002 <HAL_TIM_OC_Start_IT+0xa2>
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2b0c      	cmp	r3, #12
 8007fc0:	d109      	bne.n	8007fd6 <HAL_TIM_OC_Start_IT+0x76>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	bf14      	ite	ne
 8007fce:	2301      	movne	r3, #1
 8007fd0:	2300      	moveq	r3, #0
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	e015      	b.n	8008002 <HAL_TIM_OC_Start_IT+0xa2>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d109      	bne.n	8007ff0 <HAL_TIM_OC_Start_IT+0x90>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	bf14      	ite	ne
 8007fe8:	2301      	movne	r3, #1
 8007fea:	2300      	moveq	r3, #0
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	e008      	b.n	8008002 <HAL_TIM_OC_Start_IT+0xa2>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	bf14      	ite	ne
 8007ffc:	2301      	movne	r3, #1
 8007ffe:	2300      	moveq	r3, #0
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e0ec      	b.n	80081e4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d104      	bne.n	800801a <HAL_TIM_OC_Start_IT+0xba>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008018:	e023      	b.n	8008062 <HAL_TIM_OC_Start_IT+0x102>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b04      	cmp	r3, #4
 800801e:	d104      	bne.n	800802a <HAL_TIM_OC_Start_IT+0xca>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2202      	movs	r2, #2
 8008024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008028:	e01b      	b.n	8008062 <HAL_TIM_OC_Start_IT+0x102>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b08      	cmp	r3, #8
 800802e:	d104      	bne.n	800803a <HAL_TIM_OC_Start_IT+0xda>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008038:	e013      	b.n	8008062 <HAL_TIM_OC_Start_IT+0x102>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2b0c      	cmp	r3, #12
 800803e:	d104      	bne.n	800804a <HAL_TIM_OC_Start_IT+0xea>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008048:	e00b      	b.n	8008062 <HAL_TIM_OC_Start_IT+0x102>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b10      	cmp	r3, #16
 800804e:	d104      	bne.n	800805a <HAL_TIM_OC_Start_IT+0xfa>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008058:	e003      	b.n	8008062 <HAL_TIM_OC_Start_IT+0x102>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2b0c      	cmp	r3, #12
 8008066:	d841      	bhi.n	80080ec <HAL_TIM_OC_Start_IT+0x18c>
 8008068:	a201      	add	r2, pc, #4	; (adr r2, 8008070 <HAL_TIM_OC_Start_IT+0x110>)
 800806a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806e:	bf00      	nop
 8008070:	080080a5 	.word	0x080080a5
 8008074:	080080ed 	.word	0x080080ed
 8008078:	080080ed 	.word	0x080080ed
 800807c:	080080ed 	.word	0x080080ed
 8008080:	080080b7 	.word	0x080080b7
 8008084:	080080ed 	.word	0x080080ed
 8008088:	080080ed 	.word	0x080080ed
 800808c:	080080ed 	.word	0x080080ed
 8008090:	080080c9 	.word	0x080080c9
 8008094:	080080ed 	.word	0x080080ed
 8008098:	080080ed 	.word	0x080080ed
 800809c:	080080ed 	.word	0x080080ed
 80080a0:	080080db 	.word	0x080080db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	68da      	ldr	r2, [r3, #12]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f042 0202 	orr.w	r2, r2, #2
 80080b2:	60da      	str	r2, [r3, #12]
      break;
 80080b4:	e01d      	b.n	80080f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0204 	orr.w	r2, r2, #4
 80080c4:	60da      	str	r2, [r3, #12]
      break;
 80080c6:	e014      	b.n	80080f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0208 	orr.w	r2, r2, #8
 80080d6:	60da      	str	r2, [r3, #12]
      break;
 80080d8:	e00b      	b.n	80080f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f042 0210 	orr.w	r2, r2, #16
 80080e8:	60da      	str	r2, [r3, #12]
      break;
 80080ea:	e002      	b.n	80080f2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
      break;
 80080f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80080f2:	7bfb      	ldrb	r3, [r7, #15]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d174      	bne.n	80081e2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2201      	movs	r2, #1
 80080fe:	6839      	ldr	r1, [r7, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f000 ff4f 	bl	8008fa4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a38      	ldr	r2, [pc, #224]	; (80081ec <HAL_TIM_OC_Start_IT+0x28c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d013      	beq.n	8008138 <HAL_TIM_OC_Start_IT+0x1d8>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a36      	ldr	r2, [pc, #216]	; (80081f0 <HAL_TIM_OC_Start_IT+0x290>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00e      	beq.n	8008138 <HAL_TIM_OC_Start_IT+0x1d8>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a35      	ldr	r2, [pc, #212]	; (80081f4 <HAL_TIM_OC_Start_IT+0x294>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d009      	beq.n	8008138 <HAL_TIM_OC_Start_IT+0x1d8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a33      	ldr	r2, [pc, #204]	; (80081f8 <HAL_TIM_OC_Start_IT+0x298>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d004      	beq.n	8008138 <HAL_TIM_OC_Start_IT+0x1d8>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a32      	ldr	r2, [pc, #200]	; (80081fc <HAL_TIM_OC_Start_IT+0x29c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d101      	bne.n	800813c <HAL_TIM_OC_Start_IT+0x1dc>
 8008138:	2301      	movs	r3, #1
 800813a:	e000      	b.n	800813e <HAL_TIM_OC_Start_IT+0x1de>
 800813c:	2300      	movs	r3, #0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008150:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a25      	ldr	r2, [pc, #148]	; (80081ec <HAL_TIM_OC_Start_IT+0x28c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d022      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008164:	d01d      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a25      	ldr	r2, [pc, #148]	; (8008200 <HAL_TIM_OC_Start_IT+0x2a0>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d018      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a23      	ldr	r2, [pc, #140]	; (8008204 <HAL_TIM_OC_Start_IT+0x2a4>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d013      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a22      	ldr	r2, [pc, #136]	; (8008208 <HAL_TIM_OC_Start_IT+0x2a8>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d00e      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <HAL_TIM_OC_Start_IT+0x290>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d009      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1e      	ldr	r2, [pc, #120]	; (800820c <HAL_TIM_OC_Start_IT+0x2ac>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d004      	beq.n	80081a2 <HAL_TIM_OC_Start_IT+0x242>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a15      	ldr	r2, [pc, #84]	; (80081f4 <HAL_TIM_OC_Start_IT+0x294>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d115      	bne.n	80081ce <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	4b19      	ldr	r3, [pc, #100]	; (8008210 <HAL_TIM_OC_Start_IT+0x2b0>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b06      	cmp	r3, #6
 80081b2:	d015      	beq.n	80081e0 <HAL_TIM_OC_Start_IT+0x280>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081ba:	d011      	beq.n	80081e0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081cc:	e008      	b.n	80081e0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
 80081de:	e000      	b.n	80081e2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	40010000 	.word	0x40010000
 80081f0:	40010400 	.word	0x40010400
 80081f4:	40014000 	.word	0x40014000
 80081f8:	40014400 	.word	0x40014400
 80081fc:	40014800 	.word	0x40014800
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40001800 	.word	0x40001800
 8008210:	00010007 	.word	0x00010007

08008214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691b      	ldr	r3, [r3, #16]
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b02      	cmp	r3, #2
 8008228:	d122      	bne.n	8008270 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f003 0302 	and.w	r3, r3, #2
 8008234:	2b02      	cmp	r3, #2
 8008236:	d11b      	bne.n	8008270 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f06f 0202 	mvn.w	r2, #2
 8008240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f003 0303 	and.w	r3, r3, #3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa78 	bl	800874c <HAL_TIM_IC_CaptureCallback>
 800825c:	e005      	b.n	800826a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f9 fbde 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 fa7b 	bl	8008760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f003 0304 	and.w	r3, r3, #4
 800827a:	2b04      	cmp	r3, #4
 800827c:	d122      	bne.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d11b      	bne.n	80082c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f06f 0204 	mvn.w	r2, #4
 8008294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2202      	movs	r2, #2
 800829a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fa4e 	bl	800874c <HAL_TIM_IC_CaptureCallback>
 80082b0:	e005      	b.n	80082be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f7f9 fbb4 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 fa51 	bl	8008760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2200      	movs	r2, #0
 80082c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	f003 0308 	and.w	r3, r3, #8
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d122      	bne.n	8008318 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f003 0308 	and.w	r3, r3, #8
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d11b      	bne.n	8008318 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f06f 0208 	mvn.w	r2, #8
 80082e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2204      	movs	r2, #4
 80082ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	f003 0303 	and.w	r3, r3, #3
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fa24 	bl	800874c <HAL_TIM_IC_CaptureCallback>
 8008304:	e005      	b.n	8008312 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7f9 fb8a 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fa27 	bl	8008760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2200      	movs	r2, #0
 8008316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0310 	and.w	r3, r3, #16
 8008322:	2b10      	cmp	r3, #16
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0310 	and.w	r3, r3, #16
 8008330:	2b10      	cmp	r3, #16
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0210 	mvn.w	r2, #16
 800833c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2208      	movs	r2, #8
 8008342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f9fa 	bl	800874c <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7f9 fb60 	bl	8001a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f9fd 	bl	8008760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b01      	cmp	r3, #1
 8008378:	d10e      	bne.n	8008398 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b01      	cmp	r3, #1
 8008386:	d107      	bne.n	8008398 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0201 	mvn.w	r2, #1
 8008390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f9d0 	bl	8008738 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083a2:	2b80      	cmp	r3, #128	; 0x80
 80083a4:	d10e      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083b0:	2b80      	cmp	r3, #128	; 0x80
 80083b2:	d107      	bne.n	80083c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 ff2c 	bl	800921c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d2:	d10e      	bne.n	80083f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083de:	2b80      	cmp	r3, #128	; 0x80
 80083e0:	d107      	bne.n	80083f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 ff1f 	bl	8009230 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d10e      	bne.n	800841e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800840a:	2b40      	cmp	r3, #64	; 0x40
 800840c:	d107      	bne.n	800841e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f9ab 	bl	8008774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b20      	cmp	r3, #32
 800842a:	d10e      	bne.n	800844a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68db      	ldr	r3, [r3, #12]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b20      	cmp	r3, #32
 8008438:	d107      	bne.n	800844a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f06f 0220 	mvn.w	r2, #32
 8008442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fedf 	bl	8009208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_TIM_OC_ConfigChannel+0x1e>
 800846e:	2302      	movs	r3, #2
 8008470:	e066      	b.n	8008540 <HAL_TIM_OC_ConfigChannel+0xec>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b14      	cmp	r3, #20
 800847e:	d857      	bhi.n	8008530 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008480:	a201      	add	r2, pc, #4	; (adr r2, 8008488 <HAL_TIM_OC_ConfigChannel+0x34>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084dd 	.word	0x080084dd
 800848c:	08008531 	.word	0x08008531
 8008490:	08008531 	.word	0x08008531
 8008494:	08008531 	.word	0x08008531
 8008498:	080084eb 	.word	0x080084eb
 800849c:	08008531 	.word	0x08008531
 80084a0:	08008531 	.word	0x08008531
 80084a4:	08008531 	.word	0x08008531
 80084a8:	080084f9 	.word	0x080084f9
 80084ac:	08008531 	.word	0x08008531
 80084b0:	08008531 	.word	0x08008531
 80084b4:	08008531 	.word	0x08008531
 80084b8:	08008507 	.word	0x08008507
 80084bc:	08008531 	.word	0x08008531
 80084c0:	08008531 	.word	0x08008531
 80084c4:	08008531 	.word	0x08008531
 80084c8:	08008515 	.word	0x08008515
 80084cc:	08008531 	.word	0x08008531
 80084d0:	08008531 	.word	0x08008531
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008523 	.word	0x08008523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f9ea 	bl	80088bc <TIM_OC1_SetConfig>
      break;
 80084e8:	e025      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68b9      	ldr	r1, [r7, #8]
 80084f0:	4618      	mov	r0, r3
 80084f2:	f000 fa73 	bl	80089dc <TIM_OC2_SetConfig>
      break;
 80084f6:	e01e      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68b9      	ldr	r1, [r7, #8]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 faf6 	bl	8008af0 <TIM_OC3_SetConfig>
      break;
 8008504:	e017      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	4618      	mov	r0, r3
 800850e:	f000 fb77 	bl	8008c00 <TIM_OC4_SetConfig>
      break;
 8008512:	e010      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68b9      	ldr	r1, [r7, #8]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 fbda 	bl	8008cd4 <TIM_OC5_SetConfig>
      break;
 8008520:	e009      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68b9      	ldr	r1, [r7, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fc37 	bl	8008d9c <TIM_OC6_SetConfig>
      break;
 800852e:	e002      	b.n	8008536 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	75fb      	strb	r3, [r7, #23]
      break;
 8008534:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800853e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_TIM_ConfigClockSource+0x1c>
 8008560:	2302      	movs	r3, #2
 8008562:	e0dc      	b.n	800871e <HAL_TIM_ConfigClockSource+0x1d6>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	4b6a      	ldr	r3, [pc, #424]	; (8008728 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008580:	4013      	ands	r3, r2
 8008582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800858a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a64      	ldr	r2, [pc, #400]	; (800872c <HAL_TIM_ConfigClockSource+0x1e4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f000 80a9 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80085a0:	4a62      	ldr	r2, [pc, #392]	; (800872c <HAL_TIM_ConfigClockSource+0x1e4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f200 80ae 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085a8:	4a61      	ldr	r2, [pc, #388]	; (8008730 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 80a1 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80085b0:	4a5f      	ldr	r2, [pc, #380]	; (8008730 <HAL_TIM_ConfigClockSource+0x1e8>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 80a6 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085b8:	4a5e      	ldr	r2, [pc, #376]	; (8008734 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	f000 8099 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80085c0:	4a5c      	ldr	r2, [pc, #368]	; (8008734 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	f200 809e 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085cc:	f000 8091 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80085d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085d4:	f200 8096 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085dc:	f000 8089 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 80085e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085e4:	f200 808e 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ec:	d03e      	beq.n	800866c <HAL_TIM_ConfigClockSource+0x124>
 80085ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f2:	f200 8087 	bhi.w	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 80085f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085fa:	f000 8086 	beq.w	800870a <HAL_TIM_ConfigClockSource+0x1c2>
 80085fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008602:	d87f      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 8008604:	2b70      	cmp	r3, #112	; 0x70
 8008606:	d01a      	beq.n	800863e <HAL_TIM_ConfigClockSource+0xf6>
 8008608:	2b70      	cmp	r3, #112	; 0x70
 800860a:	d87b      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 800860c:	2b60      	cmp	r3, #96	; 0x60
 800860e:	d050      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x16a>
 8008610:	2b60      	cmp	r3, #96	; 0x60
 8008612:	d877      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 8008614:	2b50      	cmp	r3, #80	; 0x50
 8008616:	d03c      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x14a>
 8008618:	2b50      	cmp	r3, #80	; 0x50
 800861a:	d873      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 800861c:	2b40      	cmp	r3, #64	; 0x40
 800861e:	d058      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x18a>
 8008620:	2b40      	cmp	r3, #64	; 0x40
 8008622:	d86f      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 8008624:	2b30      	cmp	r3, #48	; 0x30
 8008626:	d064      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008628:	2b30      	cmp	r3, #48	; 0x30
 800862a:	d86b      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 800862c:	2b20      	cmp	r3, #32
 800862e:	d060      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008630:	2b20      	cmp	r3, #32
 8008632:	d867      	bhi.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
 8008634:	2b00      	cmp	r3, #0
 8008636:	d05c      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 8008638:	2b10      	cmp	r3, #16
 800863a:	d05a      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x1aa>
 800863c:	e062      	b.n	8008704 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800864e:	f000 fc89 	bl	8008f64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	609a      	str	r2, [r3, #8]
      break;
 800866a:	e04f      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800867c:	f000 fc72 	bl	8008f64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800868e:	609a      	str	r2, [r3, #8]
      break;
 8008690:	e03c      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800869e:	461a      	mov	r2, r3
 80086a0:	f000 fbe2 	bl	8008e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2150      	movs	r1, #80	; 0x50
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fc3c 	bl	8008f28 <TIM_ITRx_SetConfig>
      break;
 80086b0:	e02c      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80086be:	461a      	mov	r2, r3
 80086c0:	f000 fc01 	bl	8008ec6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2160      	movs	r1, #96	; 0x60
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc2c 	bl	8008f28 <TIM_ITRx_SetConfig>
      break;
 80086d0:	e01c      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80086de:	461a      	mov	r2, r3
 80086e0:	f000 fbc2 	bl	8008e68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2140      	movs	r1, #64	; 0x40
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fc1c 	bl	8008f28 <TIM_ITRx_SetConfig>
      break;
 80086f0:	e00c      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4619      	mov	r1, r3
 80086fc:	4610      	mov	r0, r2
 80086fe:	f000 fc13 	bl	8008f28 <TIM_ITRx_SetConfig>
      break;
 8008702:	e003      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	73fb      	strb	r3, [r7, #15]
      break;
 8008708:	e000      	b.n	800870c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800870a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800871c:	7bfb      	ldrb	r3, [r7, #15]
}
 800871e:	4618      	mov	r0, r3
 8008720:	3710      	adds	r7, #16
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	ffceff88 	.word	0xffceff88
 800872c:	00100040 	.word	0x00100040
 8008730:	00100030 	.word	0x00100030
 8008734:	00100020 	.word	0x00100020

08008738 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr

0800874c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a40      	ldr	r2, [pc, #256]	; (800889c <TIM_Base_SetConfig+0x114>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a6:	d00f      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3d      	ldr	r2, [pc, #244]	; (80088a0 <TIM_Base_SetConfig+0x118>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3c      	ldr	r2, [pc, #240]	; (80088a4 <TIM_Base_SetConfig+0x11c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d007      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3b      	ldr	r2, [pc, #236]	; (80088a8 <TIM_Base_SetConfig+0x120>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a3a      	ldr	r2, [pc, #232]	; (80088ac <TIM_Base_SetConfig+0x124>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d108      	bne.n	80087da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2f      	ldr	r2, [pc, #188]	; (800889c <TIM_Base_SetConfig+0x114>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d01f      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e8:	d01b      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2c      	ldr	r2, [pc, #176]	; (80088a0 <TIM_Base_SetConfig+0x118>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d017      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2b      	ldr	r2, [pc, #172]	; (80088a4 <TIM_Base_SetConfig+0x11c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <TIM_Base_SetConfig+0x120>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a29      	ldr	r2, [pc, #164]	; (80088ac <TIM_Base_SetConfig+0x124>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <TIM_Base_SetConfig+0x128>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a27      	ldr	r2, [pc, #156]	; (80088b4 <TIM_Base_SetConfig+0x12c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0x9a>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <TIM_Base_SetConfig+0x130>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a10      	ldr	r2, [pc, #64]	; (800889c <TIM_Base_SetConfig+0x114>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00f      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a12      	ldr	r2, [pc, #72]	; (80088ac <TIM_Base_SetConfig+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00b      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a11      	ldr	r2, [pc, #68]	; (80088b0 <TIM_Base_SetConfig+0x128>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d007      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a10      	ldr	r2, [pc, #64]	; (80088b4 <TIM_Base_SetConfig+0x12c>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a0f      	ldr	r2, [pc, #60]	; (80088b8 <TIM_Base_SetConfig+0x130>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d103      	bne.n	8008888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400
 80088b8:	40014800 	.word	0x40014800

080088bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088bc:	b480      	push	{r7}
 80088be:	b087      	sub	sp, #28
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6a1b      	ldr	r3, [r3, #32]
 80088ca:	f023 0201 	bic.w	r2, r3, #1
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699b      	ldr	r3, [r3, #24]
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4b37      	ldr	r3, [pc, #220]	; (80089c4 <TIM_OC1_SetConfig+0x108>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0303 	bic.w	r3, r3, #3
 80088f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f023 0302 	bic.w	r3, r3, #2
 8008904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	697a      	ldr	r2, [r7, #20]
 800890c:	4313      	orrs	r3, r2
 800890e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4a2d      	ldr	r2, [pc, #180]	; (80089c8 <TIM_OC1_SetConfig+0x10c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d00f      	beq.n	8008938 <TIM_OC1_SetConfig+0x7c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4a2c      	ldr	r2, [pc, #176]	; (80089cc <TIM_OC1_SetConfig+0x110>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d00b      	beq.n	8008938 <TIM_OC1_SetConfig+0x7c>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a2b      	ldr	r2, [pc, #172]	; (80089d0 <TIM_OC1_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d007      	beq.n	8008938 <TIM_OC1_SetConfig+0x7c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a2a      	ldr	r2, [pc, #168]	; (80089d4 <TIM_OC1_SetConfig+0x118>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d003      	beq.n	8008938 <TIM_OC1_SetConfig+0x7c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a29      	ldr	r2, [pc, #164]	; (80089d8 <TIM_OC1_SetConfig+0x11c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d10c      	bne.n	8008952 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f023 0308 	bic.w	r3, r3, #8
 800893e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f023 0304 	bic.w	r3, r3, #4
 8008950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1c      	ldr	r2, [pc, #112]	; (80089c8 <TIM_OC1_SetConfig+0x10c>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00f      	beq.n	800897a <TIM_OC1_SetConfig+0xbe>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1b      	ldr	r2, [pc, #108]	; (80089cc <TIM_OC1_SetConfig+0x110>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d00b      	beq.n	800897a <TIM_OC1_SetConfig+0xbe>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a1a      	ldr	r2, [pc, #104]	; (80089d0 <TIM_OC1_SetConfig+0x114>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d007      	beq.n	800897a <TIM_OC1_SetConfig+0xbe>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a19      	ldr	r2, [pc, #100]	; (80089d4 <TIM_OC1_SetConfig+0x118>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d003      	beq.n	800897a <TIM_OC1_SetConfig+0xbe>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a18      	ldr	r2, [pc, #96]	; (80089d8 <TIM_OC1_SetConfig+0x11c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d111      	bne.n	800899e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	695b      	ldr	r3, [r3, #20]
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	4313      	orrs	r3, r2
 8008992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	699b      	ldr	r3, [r3, #24]
 8008998:	693a      	ldr	r2, [r7, #16]
 800899a:	4313      	orrs	r3, r2
 800899c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	693a      	ldr	r2, [r7, #16]
 80089a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	685a      	ldr	r2, [r3, #4]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	621a      	str	r2, [r3, #32]
}
 80089b8:	bf00      	nop
 80089ba:	371c      	adds	r7, #28
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	fffeff8f 	.word	0xfffeff8f
 80089c8:	40010000 	.word	0x40010000
 80089cc:	40010400 	.word	0x40010400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40014400 	.word	0x40014400
 80089d8:	40014800 	.word	0x40014800

080089dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0210 	bic.w	r2, r3, #16
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a04:	68fa      	ldr	r2, [r7, #12]
 8008a06:	4b34      	ldr	r3, [pc, #208]	; (8008ad8 <TIM_OC2_SetConfig+0xfc>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f023 0320 	bic.w	r3, r3, #32
 8008a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	011b      	lsls	r3, r3, #4
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a29      	ldr	r2, [pc, #164]	; (8008adc <TIM_OC2_SetConfig+0x100>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_OC2_SetConfig+0x68>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a28      	ldr	r2, [pc, #160]	; (8008ae0 <TIM_OC2_SetConfig+0x104>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d10d      	bne.n	8008a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a1e      	ldr	r2, [pc, #120]	; (8008adc <TIM_OC2_SetConfig+0x100>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d00f      	beq.n	8008a88 <TIM_OC2_SetConfig+0xac>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a1d      	ldr	r2, [pc, #116]	; (8008ae0 <TIM_OC2_SetConfig+0x104>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d00b      	beq.n	8008a88 <TIM_OC2_SetConfig+0xac>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a1c      	ldr	r2, [pc, #112]	; (8008ae4 <TIM_OC2_SetConfig+0x108>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d007      	beq.n	8008a88 <TIM_OC2_SetConfig+0xac>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a1b      	ldr	r2, [pc, #108]	; (8008ae8 <TIM_OC2_SetConfig+0x10c>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d003      	beq.n	8008a88 <TIM_OC2_SetConfig+0xac>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a1a      	ldr	r2, [pc, #104]	; (8008aec <TIM_OC2_SetConfig+0x110>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d113      	bne.n	8008ab0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	699b      	ldr	r3, [r3, #24]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	621a      	str	r2, [r3, #32]
}
 8008aca:	bf00      	nop
 8008acc:	371c      	adds	r7, #28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	feff8fff 	.word	0xfeff8fff
 8008adc:	40010000 	.word	0x40010000
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800

08008af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4b33      	ldr	r3, [pc, #204]	; (8008be8 <TIM_OC3_SetConfig+0xf8>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	021b      	lsls	r3, r3, #8
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a28      	ldr	r2, [pc, #160]	; (8008bec <TIM_OC3_SetConfig+0xfc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d003      	beq.n	8008b56 <TIM_OC3_SetConfig+0x66>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a27      	ldr	r2, [pc, #156]	; (8008bf0 <TIM_OC3_SetConfig+0x100>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d10d      	bne.n	8008b72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	021b      	lsls	r3, r3, #8
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1d      	ldr	r2, [pc, #116]	; (8008bec <TIM_OC3_SetConfig+0xfc>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00f      	beq.n	8008b9a <TIM_OC3_SetConfig+0xaa>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1c      	ldr	r2, [pc, #112]	; (8008bf0 <TIM_OC3_SetConfig+0x100>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d00b      	beq.n	8008b9a <TIM_OC3_SetConfig+0xaa>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a1b      	ldr	r2, [pc, #108]	; (8008bf4 <TIM_OC3_SetConfig+0x104>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d007      	beq.n	8008b9a <TIM_OC3_SetConfig+0xaa>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1a      	ldr	r2, [pc, #104]	; (8008bf8 <TIM_OC3_SetConfig+0x108>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d003      	beq.n	8008b9a <TIM_OC3_SetConfig+0xaa>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a19      	ldr	r2, [pc, #100]	; (8008bfc <TIM_OC3_SetConfig+0x10c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d113      	bne.n	8008bc2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b9a:	693b      	ldr	r3, [r7, #16]
 8008b9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	011b      	lsls	r3, r3, #4
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	68fa      	ldr	r2, [r7, #12]
 8008bcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	697a      	ldr	r2, [r7, #20]
 8008bda:	621a      	str	r2, [r3, #32]
}
 8008bdc:	bf00      	nop
 8008bde:	371c      	adds	r7, #28
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	fffeff8f 	.word	0xfffeff8f
 8008bec:	40010000 	.word	0x40010000
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800

08008c00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	69db      	ldr	r3, [r3, #28]
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4b24      	ldr	r3, [pc, #144]	; (8008cbc <TIM_OC4_SetConfig+0xbc>)
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	021b      	lsls	r3, r3, #8
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	031b      	lsls	r3, r3, #12
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a19      	ldr	r2, [pc, #100]	; (8008cc0 <TIM_OC4_SetConfig+0xc0>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d00f      	beq.n	8008c80 <TIM_OC4_SetConfig+0x80>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a18      	ldr	r2, [pc, #96]	; (8008cc4 <TIM_OC4_SetConfig+0xc4>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d00b      	beq.n	8008c80 <TIM_OC4_SetConfig+0x80>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <TIM_OC4_SetConfig+0xc8>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d007      	beq.n	8008c80 <TIM_OC4_SetConfig+0x80>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a16      	ldr	r2, [pc, #88]	; (8008ccc <TIM_OC4_SetConfig+0xcc>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d003      	beq.n	8008c80 <TIM_OC4_SetConfig+0x80>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4a15      	ldr	r2, [pc, #84]	; (8008cd0 <TIM_OC4_SetConfig+0xd0>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d109      	bne.n	8008c94 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	695b      	ldr	r3, [r3, #20]
 8008c8c:	019b      	lsls	r3, r3, #6
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685a      	ldr	r2, [r3, #4]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	621a      	str	r2, [r3, #32]
}
 8008cae:	bf00      	nop
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	feff8fff 	.word	0xfeff8fff
 8008cc0:	40010000 	.word	0x40010000
 8008cc4:	40010400 	.word	0x40010400
 8008cc8:	40014000 	.word	0x40014000
 8008ccc:	40014400 	.word	0x40014400
 8008cd0:	40014800 	.word	0x40014800

08008cd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4b21      	ldr	r3, [pc, #132]	; (8008d84 <TIM_OC5_SetConfig+0xb0>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	041b      	lsls	r3, r3, #16
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a18      	ldr	r2, [pc, #96]	; (8008d88 <TIM_OC5_SetConfig+0xb4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d00f      	beq.n	8008d4a <TIM_OC5_SetConfig+0x76>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a17      	ldr	r2, [pc, #92]	; (8008d8c <TIM_OC5_SetConfig+0xb8>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d00b      	beq.n	8008d4a <TIM_OC5_SetConfig+0x76>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a16      	ldr	r2, [pc, #88]	; (8008d90 <TIM_OC5_SetConfig+0xbc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d007      	beq.n	8008d4a <TIM_OC5_SetConfig+0x76>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a15      	ldr	r2, [pc, #84]	; (8008d94 <TIM_OC5_SetConfig+0xc0>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d003      	beq.n	8008d4a <TIM_OC5_SetConfig+0x76>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a14      	ldr	r2, [pc, #80]	; (8008d98 <TIM_OC5_SetConfig+0xc4>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d109      	bne.n	8008d5e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	021b      	lsls	r3, r3, #8
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68fa      	ldr	r2, [r7, #12]
 8008d68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	621a      	str	r2, [r3, #32]
}
 8008d78:	bf00      	nop
 8008d7a:	371c      	adds	r7, #28
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	fffeff8f 	.word	0xfffeff8f
 8008d88:	40010000 	.word	0x40010000
 8008d8c:	40010400 	.word	0x40010400
 8008d90:	40014000 	.word	0x40014000
 8008d94:	40014400 	.word	0x40014400
 8008d98:	40014800 	.word	0x40014800

08008d9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4b22      	ldr	r3, [pc, #136]	; (8008e50 <TIM_OC6_SetConfig+0xb4>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	051b      	lsls	r3, r3, #20
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <TIM_OC6_SetConfig+0xb8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_OC6_SetConfig+0x78>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <TIM_OC6_SetConfig+0xbc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_OC6_SetConfig+0x78>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <TIM_OC6_SetConfig+0xc0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_OC6_SetConfig+0x78>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <TIM_OC6_SetConfig+0xc4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_OC6_SetConfig+0x78>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <TIM_OC6_SetConfig+0xc8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d109      	bne.n	8008e28 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	029b      	lsls	r3, r3, #10
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	feff8fff 	.word	0xfeff8fff
 8008e54:	40010000 	.word	0x40010000
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	f023 0201 	bic.w	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	011b      	lsls	r3, r3, #4
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f023 030a 	bic.w	r3, r3, #10
 8008ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	621a      	str	r2, [r3, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	371c      	adds	r7, #28
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec4:	4770      	bx	lr

08008ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b087      	sub	sp, #28
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	f023 0210 	bic.w	r2, r3, #16
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	031b      	lsls	r3, r3, #12
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	011b      	lsls	r3, r3, #4
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	697a      	ldr	r2, [r7, #20]
 8008f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
	...

08008f28 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b085      	sub	sp, #20
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <TIM_ITRx_SetConfig+0x38>)
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	f043 0307 	orr.w	r3, r3, #7
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	609a      	str	r2, [r3, #8]
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	ffcfff8f 	.word	0xffcfff8f

08008f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b087      	sub	sp, #28
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	021a      	lsls	r2, r3, #8
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	609a      	str	r2, [r3, #8]
}
 8008f98:	bf00      	nop
 8008f9a:	371c      	adds	r7, #28
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b087      	sub	sp, #28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a1a      	ldr	r2, [r3, #32]
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	43db      	mvns	r3, r3
 8008fc6:	401a      	ands	r2, r3
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6a1a      	ldr	r2, [r3, #32]
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	f003 031f 	and.w	r3, r3, #31
 8008fd6:	6879      	ldr	r1, [r7, #4]
 8008fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	621a      	str	r2, [r3, #32]
}
 8008fe2:	bf00      	nop
 8008fe4:	371c      	adds	r7, #28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009004:	2302      	movs	r3, #2
 8009006:	e06d      	b.n	80090e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a30      	ldr	r2, [pc, #192]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d004      	beq.n	800903c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a2f      	ldr	r2, [pc, #188]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d108      	bne.n	800904e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4313      	orrs	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	4313      	orrs	r3, r2
 800905e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a20      	ldr	r2, [pc, #128]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d022      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907a:	d01d      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1d      	ldr	r2, [pc, #116]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d018      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1c      	ldr	r2, [pc, #112]	; (80090fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a1a      	ldr	r2, [pc, #104]	; (8009100 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00e      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d009      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a16      	ldr	r2, [pc, #88]	; (8009104 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d004      	beq.n	80090b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a15      	ldr	r2, [pc, #84]	; (8009108 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d10c      	bne.n	80090d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	68ba      	ldr	r2, [r7, #8]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40010000 	.word	0x40010000
 80090f4:	40010400 	.word	0x40010400
 80090f8:	40000400 	.word	0x40000400
 80090fc:	40000800 	.word	0x40000800
 8009100:	40000c00 	.word	0x40000c00
 8009104:	40001800 	.word	0x40001800
 8009108:	40014000 	.word	0x40014000

0800910c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800910c:	b480      	push	{r7}
 800910e:	b085      	sub	sp, #20
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009116:	2300      	movs	r3, #0
 8009118:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009120:	2b01      	cmp	r3, #1
 8009122:	d101      	bne.n	8009128 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009124:	2302      	movs	r3, #2
 8009126:	e065      	b.n	80091f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	4313      	orrs	r3, r2
 800913c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	4313      	orrs	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	4313      	orrs	r3, r2
 8009158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4313      	orrs	r3, r2
 8009166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	4313      	orrs	r3, r2
 8009174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	4313      	orrs	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	699b      	ldr	r3, [r3, #24]
 800919c:	041b      	lsls	r3, r3, #16
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a16      	ldr	r2, [pc, #88]	; (8009200 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d004      	beq.n	80091b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a14      	ldr	r2, [pc, #80]	; (8009204 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d115      	bne.n	80091e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	051b      	lsls	r3, r3, #20
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f2:	2300      	movs	r3, #0
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	40010000 	.word	0x40010000
 8009204:	40010400 	.word	0x40010400

08009208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e042      	b.n	80092dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f7f9 f945 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2224      	movs	r2, #36	; 0x24
 8009272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0201 	bic.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fc06 	bl	8009a98 <UART_SetConfig>
 800928c:	4603      	mov	r3, r0
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e022      	b.n	80092dc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800929a:	2b00      	cmp	r3, #0
 800929c:	d002      	beq.n	80092a4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f001 f962 	bl	800a568 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 f9e9 	bl	800a6ac <UART_CheckIdleState>
 80092da:	4603      	mov	r3, r0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b0ba      	sub	sp, #232	; 0xe8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800930a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800930e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009312:	4013      	ands	r3, r2
 8009314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800931c:	2b00      	cmp	r3, #0
 800931e:	d11b      	bne.n	8009358 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d015      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800932c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009330:	f003 0320 	and.w	r3, r3, #32
 8009334:	2b00      	cmp	r3, #0
 8009336:	d105      	bne.n	8009344 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800933c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d009      	beq.n	8009358 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009348:	2b00      	cmp	r3, #0
 800934a:	f000 8377 	beq.w	8009a3c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	4798      	blx	r3
      }
      return;
 8009356:	e371      	b.n	8009a3c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009358:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8123 	beq.w	80095a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009362:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009366:	4b8d      	ldr	r3, [pc, #564]	; (800959c <HAL_UART_IRQHandler+0x2b8>)
 8009368:	4013      	ands	r3, r2
 800936a:	2b00      	cmp	r3, #0
 800936c:	d106      	bne.n	800937c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800936e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009372:	4b8b      	ldr	r3, [pc, #556]	; (80095a0 <HAL_UART_IRQHandler+0x2bc>)
 8009374:	4013      	ands	r3, r2
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 8116 	beq.w	80095a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009380:	f003 0301 	and.w	r3, r3, #1
 8009384:	2b00      	cmp	r3, #0
 8009386:	d011      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00b      	beq.n	80093ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2201      	movs	r2, #1
 800939a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a2:	f043 0201 	orr.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d011      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
 80093b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00b      	beq.n	80093dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2202      	movs	r2, #2
 80093ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d2:	f043 0204 	orr.w	r2, r3, #4
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d011      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
 80093e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00b      	beq.n	800940c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2204      	movs	r2, #4
 80093fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009402:	f043 0202 	orr.w	r2, r3, #2
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800940c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009410:	f003 0308 	and.w	r3, r3, #8
 8009414:	2b00      	cmp	r3, #0
 8009416:	d017      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800941c:	f003 0320 	and.w	r3, r3, #32
 8009420:	2b00      	cmp	r3, #0
 8009422:	d105      	bne.n	8009430 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009424:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009428:	4b5c      	ldr	r3, [pc, #368]	; (800959c <HAL_UART_IRQHandler+0x2b8>)
 800942a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2208      	movs	r2, #8
 8009436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	f043 0208 	orr.w	r2, r3, #8
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009450:	2b00      	cmp	r3, #0
 8009452:	d012      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
 8009454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00c      	beq.n	800947a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009468:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009470:	f043 0220 	orr.w	r2, r3, #32
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 82dd 	beq.w	8009a40 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d013      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800949e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d007      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ce:	2b40      	cmp	r3, #64	; 0x40
 80094d0:	d005      	beq.n	80094de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d054      	beq.n	8009588 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 f9f6 	bl	800a8d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ee:	2b40      	cmp	r3, #64	; 0x40
 80094f0:	d146      	bne.n	8009580 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009500:	e853 3f00 	ldrex	r3, [r3]
 8009504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800950c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	3308      	adds	r3, #8
 800951a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800951e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800952a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800952e:	e841 2300 	strex	r3, r2, [r1]
 8009532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1d9      	bne.n	80094f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009544:	2b00      	cmp	r3, #0
 8009546:	d017      	beq.n	8009578 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800954e:	4a15      	ldr	r2, [pc, #84]	; (80095a4 <HAL_UART_IRQHandler+0x2c0>)
 8009550:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009558:	4618      	mov	r0, r3
 800955a:	f7f9 fe7b 	bl	8003254 <HAL_DMA_Abort_IT>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d019      	beq.n	8009598 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800956a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8009572:	4610      	mov	r0, r2
 8009574:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009576:	e00f      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa77 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800957e:	e00b      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fa73 	bl	8009a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009586:	e007      	b.n	8009598 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fa6f 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009596:	e253      	b.n	8009a40 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	bf00      	nop
    return;
 800959a:	e251      	b.n	8009a40 <HAL_UART_IRQHandler+0x75c>
 800959c:	10000001 	.word	0x10000001
 80095a0:	04000120 	.word	0x04000120
 80095a4:	0800a99d 	.word	0x0800a99d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	f040 81e7 	bne.w	8009980 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b6:	f003 0310 	and.w	r3, r3, #16
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 81e0 	beq.w	8009980 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f000 81d9 	beq.w	8009980 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2210      	movs	r2, #16
 80095d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e0:	2b40      	cmp	r3, #64	; 0x40
 80095e2:	f040 8151 	bne.w	8009888 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a96      	ldr	r2, [pc, #600]	; (8009848 <HAL_UART_IRQHandler+0x564>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d068      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a93      	ldr	r2, [pc, #588]	; (800984c <HAL_UART_IRQHandler+0x568>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d061      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a91      	ldr	r2, [pc, #580]	; (8009850 <HAL_UART_IRQHandler+0x56c>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d05a      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a8e      	ldr	r2, [pc, #568]	; (8009854 <HAL_UART_IRQHandler+0x570>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d053      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a8c      	ldr	r2, [pc, #560]	; (8009858 <HAL_UART_IRQHandler+0x574>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d04c      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a89      	ldr	r2, [pc, #548]	; (800985c <HAL_UART_IRQHandler+0x578>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d045      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a87      	ldr	r2, [pc, #540]	; (8009860 <HAL_UART_IRQHandler+0x57c>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d03e      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a84      	ldr	r2, [pc, #528]	; (8009864 <HAL_UART_IRQHandler+0x580>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d037      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a82      	ldr	r2, [pc, #520]	; (8009868 <HAL_UART_IRQHandler+0x584>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d030      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a7f      	ldr	r2, [pc, #508]	; (800986c <HAL_UART_IRQHandler+0x588>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d029      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a7d      	ldr	r2, [pc, #500]	; (8009870 <HAL_UART_IRQHandler+0x58c>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d022      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a7a      	ldr	r2, [pc, #488]	; (8009874 <HAL_UART_IRQHandler+0x590>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d01b      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a78      	ldr	r2, [pc, #480]	; (8009878 <HAL_UART_IRQHandler+0x594>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d014      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a75      	ldr	r2, [pc, #468]	; (800987c <HAL_UART_IRQHandler+0x598>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00d      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a73      	ldr	r2, [pc, #460]	; (8009880 <HAL_UART_IRQHandler+0x59c>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d006      	beq.n	80096c6 <HAL_UART_IRQHandler+0x3e2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a70      	ldr	r2, [pc, #448]	; (8009884 <HAL_UART_IRQHandler+0x5a0>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d106      	bne.n	80096d4 <HAL_UART_IRQHandler+0x3f0>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	e005      	b.n	80096e0 <HAL_UART_IRQHandler+0x3fc>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b29b      	uxth	r3, r3
 80096e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 81ab 	beq.w	8009a44 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80096f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096f8:	429a      	cmp	r2, r3
 80096fa:	f080 81a3 	bcs.w	8009a44 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009704:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009714:	f000 8087 	beq.w	8009826 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800972c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009746:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800974e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800975a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1da      	bne.n	8009718 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800978a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800978e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e1      	bne.n	8009762 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3308      	adds	r3, #8
 80097be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e3      	bne.n	800979e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f4:	f023 0310 	bic.w	r3, r3, #16
 80097f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009806:	65bb      	str	r3, [r7, #88]	; 0x58
 8009808:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800980c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009820:	4618      	mov	r0, r3
 8009822:	f7f9 f9f9 	bl	8002c18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2202      	movs	r2, #2
 800982a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009838:	b29b      	uxth	r3, r3
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	b29b      	uxth	r3, r3
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f91d 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009846:	e0fd      	b.n	8009a44 <HAL_UART_IRQHandler+0x760>
 8009848:	40020010 	.word	0x40020010
 800984c:	40020028 	.word	0x40020028
 8009850:	40020040 	.word	0x40020040
 8009854:	40020058 	.word	0x40020058
 8009858:	40020070 	.word	0x40020070
 800985c:	40020088 	.word	0x40020088
 8009860:	400200a0 	.word	0x400200a0
 8009864:	400200b8 	.word	0x400200b8
 8009868:	40020410 	.word	0x40020410
 800986c:	40020428 	.word	0x40020428
 8009870:	40020440 	.word	0x40020440
 8009874:	40020458 	.word	0x40020458
 8009878:	40020470 	.word	0x40020470
 800987c:	40020488 	.word	0x40020488
 8009880:	400204a0 	.word	0x400204a0
 8009884:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009894:	b29b      	uxth	r3, r3
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 80cf 	beq.w	8009a48 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80098aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 80ca 	beq.w	8009a48 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098d6:	647b      	str	r3, [r7, #68]	; 0x44
 80098d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e4      	bne.n	80098b4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	623b      	str	r3, [r7, #32]
   return(result);
 80098fa:	6a3a      	ldr	r2, [r7, #32]
 80098fc:	4b55      	ldr	r3, [pc, #340]	; (8009a54 <HAL_UART_IRQHandler+0x770>)
 80098fe:	4013      	ands	r3, r2
 8009900:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	3308      	adds	r3, #8
 800990a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800990e:	633a      	str	r2, [r7, #48]	; 0x30
 8009910:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009912:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009916:	e841 2300 	strex	r3, r2, [r1]
 800991a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800991c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e3      	bne.n	80098ea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2220      	movs	r2, #32
 8009926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	60fb      	str	r3, [r7, #12]
   return(result);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	69b9      	ldr	r1, [r7, #24]
 800995e:	69fa      	ldr	r2, [r7, #28]
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	617b      	str	r3, [r7, #20]
   return(result);
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e4      	bne.n	8009936 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f881 	bl	8009a80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800997e:	e063      	b.n	8009a48 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00e      	beq.n	80099aa <HAL_UART_IRQHandler+0x6c6>
 800998c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009990:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d008      	beq.n	80099aa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80099a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f001 f83b 	bl	800aa1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80099a8:	e051      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d014      	beq.n	80099e0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d105      	bne.n	80099ce <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80099c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d008      	beq.n	80099e0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d03a      	beq.n	8009a4c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
    }
    return;
 80099de:	e035      	b.n	8009a4c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d009      	beq.n	8009a00 <HAL_UART_IRQHandler+0x71c>
 80099ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 ffe5 	bl	800a9c8 <UART_EndTransmit_IT>
    return;
 80099fe:	e026      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <HAL_UART_IRQHandler+0x73c>
 8009a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 f814 	bl	800aa46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a1e:	e016      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <HAL_UART_IRQHandler+0x76a>
 8009a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	da0c      	bge.n	8009a4e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 fffc 	bl	800aa32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a3a:	e008      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a3c:	bf00      	nop
 8009a3e:	e006      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
    return;
 8009a40:	bf00      	nop
 8009a42:	e004      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a44:	bf00      	nop
 8009a46:	e002      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
      return;
 8009a48:	bf00      	nop
 8009a4a:	e000      	b.n	8009a4e <HAL_UART_IRQHandler+0x76a>
    return;
 8009a4c:	bf00      	nop
  }
}
 8009a4e:	37e8      	adds	r7, #232	; 0xe8
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	effffffe 	.word	0xeffffffe

08009a58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a9c:	b092      	sub	sp, #72	; 0x48
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	689a      	ldr	r2, [r3, #8]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	695b      	ldr	r3, [r3, #20]
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	69db      	ldr	r3, [r3, #28]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	4bbe      	ldr	r3, [pc, #760]	; (8009dc0 <UART_SetConfig+0x328>)
 8009ac8:	4013      	ands	r3, r2
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	6812      	ldr	r2, [r2, #0]
 8009ace:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4ab3      	ldr	r2, [pc, #716]	; (8009dc4 <UART_SetConfig+0x32c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d004      	beq.n	8009b04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b00:	4313      	orrs	r3, r2
 8009b02:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	4baf      	ldr	r3, [pc, #700]	; (8009dc8 <UART_SetConfig+0x330>)
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	697a      	ldr	r2, [r7, #20]
 8009b10:	6812      	ldr	r2, [r2, #0]
 8009b12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b14:	430b      	orrs	r3, r1
 8009b16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1e:	f023 010f 	bic.w	r1, r3, #15
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	430a      	orrs	r2, r1
 8009b2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4aa6      	ldr	r2, [pc, #664]	; (8009dcc <UART_SetConfig+0x334>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d177      	bne.n	8009c28 <UART_SetConfig+0x190>
 8009b38:	4ba5      	ldr	r3, [pc, #660]	; (8009dd0 <UART_SetConfig+0x338>)
 8009b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b40:	2b28      	cmp	r3, #40	; 0x28
 8009b42:	d86d      	bhi.n	8009c20 <UART_SetConfig+0x188>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0xb4>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009bf1 	.word	0x08009bf1
 8009b50:	08009c21 	.word	0x08009c21
 8009b54:	08009c21 	.word	0x08009c21
 8009b58:	08009c21 	.word	0x08009c21
 8009b5c:	08009c21 	.word	0x08009c21
 8009b60:	08009c21 	.word	0x08009c21
 8009b64:	08009c21 	.word	0x08009c21
 8009b68:	08009c21 	.word	0x08009c21
 8009b6c:	08009bf9 	.word	0x08009bf9
 8009b70:	08009c21 	.word	0x08009c21
 8009b74:	08009c21 	.word	0x08009c21
 8009b78:	08009c21 	.word	0x08009c21
 8009b7c:	08009c21 	.word	0x08009c21
 8009b80:	08009c21 	.word	0x08009c21
 8009b84:	08009c21 	.word	0x08009c21
 8009b88:	08009c21 	.word	0x08009c21
 8009b8c:	08009c01 	.word	0x08009c01
 8009b90:	08009c21 	.word	0x08009c21
 8009b94:	08009c21 	.word	0x08009c21
 8009b98:	08009c21 	.word	0x08009c21
 8009b9c:	08009c21 	.word	0x08009c21
 8009ba0:	08009c21 	.word	0x08009c21
 8009ba4:	08009c21 	.word	0x08009c21
 8009ba8:	08009c21 	.word	0x08009c21
 8009bac:	08009c09 	.word	0x08009c09
 8009bb0:	08009c21 	.word	0x08009c21
 8009bb4:	08009c21 	.word	0x08009c21
 8009bb8:	08009c21 	.word	0x08009c21
 8009bbc:	08009c21 	.word	0x08009c21
 8009bc0:	08009c21 	.word	0x08009c21
 8009bc4:	08009c21 	.word	0x08009c21
 8009bc8:	08009c21 	.word	0x08009c21
 8009bcc:	08009c11 	.word	0x08009c11
 8009bd0:	08009c21 	.word	0x08009c21
 8009bd4:	08009c21 	.word	0x08009c21
 8009bd8:	08009c21 	.word	0x08009c21
 8009bdc:	08009c21 	.word	0x08009c21
 8009be0:	08009c21 	.word	0x08009c21
 8009be4:	08009c21 	.word	0x08009c21
 8009be8:	08009c21 	.word	0x08009c21
 8009bec:	08009c19 	.word	0x08009c19
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e222      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009bf8:	2304      	movs	r3, #4
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e21e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c00:	2308      	movs	r3, #8
 8009c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c06:	e21a      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c0e:	e216      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c10:	2320      	movs	r3, #32
 8009c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c16:	e212      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c18:	2340      	movs	r3, #64	; 0x40
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e20e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c20:	2380      	movs	r3, #128	; 0x80
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e20a      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a69      	ldr	r2, [pc, #420]	; (8009dd4 <UART_SetConfig+0x33c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d130      	bne.n	8009c94 <UART_SetConfig+0x1fc>
 8009c32:	4b67      	ldr	r3, [pc, #412]	; (8009dd0 <UART_SetConfig+0x338>)
 8009c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c36:	f003 0307 	and.w	r3, r3, #7
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d826      	bhi.n	8009c8c <UART_SetConfig+0x1f4>
 8009c3e:	a201      	add	r2, pc, #4	; (adr r2, 8009c44 <UART_SetConfig+0x1ac>)
 8009c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c44:	08009c5d 	.word	0x08009c5d
 8009c48:	08009c65 	.word	0x08009c65
 8009c4c:	08009c6d 	.word	0x08009c6d
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c62:	e1ec      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c64:	2304      	movs	r3, #4
 8009c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c6a:	e1e8      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c6c:	2308      	movs	r3, #8
 8009c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c72:	e1e4      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c74:	2310      	movs	r3, #16
 8009c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c7a:	e1e0      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c7c:	2320      	movs	r3, #32
 8009c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c82:	e1dc      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c84:	2340      	movs	r3, #64	; 0x40
 8009c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c8a:	e1d8      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c8c:	2380      	movs	r3, #128	; 0x80
 8009c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c92:	e1d4      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a4f      	ldr	r2, [pc, #316]	; (8009dd8 <UART_SetConfig+0x340>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d130      	bne.n	8009d00 <UART_SetConfig+0x268>
 8009c9e:	4b4c      	ldr	r3, [pc, #304]	; (8009dd0 <UART_SetConfig+0x338>)
 8009ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ca2:	f003 0307 	and.w	r3, r3, #7
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d826      	bhi.n	8009cf8 <UART_SetConfig+0x260>
 8009caa:	a201      	add	r2, pc, #4	; (adr r2, 8009cb0 <UART_SetConfig+0x218>)
 8009cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb0:	08009cc9 	.word	0x08009cc9
 8009cb4:	08009cd1 	.word	0x08009cd1
 8009cb8:	08009cd9 	.word	0x08009cd9
 8009cbc:	08009ce1 	.word	0x08009ce1
 8009cc0:	08009ce9 	.word	0x08009ce9
 8009cc4:	08009cf1 	.word	0x08009cf1
 8009cc8:	2300      	movs	r3, #0
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e1b6      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009cd0:	2304      	movs	r3, #4
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e1b2      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e1ae      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ce0:	2310      	movs	r3, #16
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e1aa      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ce8:	2320      	movs	r3, #32
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e1a6      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009cf0:	2340      	movs	r3, #64	; 0x40
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e1a2      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009cf8:	2380      	movs	r3, #128	; 0x80
 8009cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cfe:	e19e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a35      	ldr	r2, [pc, #212]	; (8009ddc <UART_SetConfig+0x344>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d130      	bne.n	8009d6c <UART_SetConfig+0x2d4>
 8009d0a:	4b31      	ldr	r3, [pc, #196]	; (8009dd0 <UART_SetConfig+0x338>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0e:	f003 0307 	and.w	r3, r3, #7
 8009d12:	2b05      	cmp	r3, #5
 8009d14:	d826      	bhi.n	8009d64 <UART_SetConfig+0x2cc>
 8009d16:	a201      	add	r2, pc, #4	; (adr r2, 8009d1c <UART_SetConfig+0x284>)
 8009d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d1c:	08009d35 	.word	0x08009d35
 8009d20:	08009d3d 	.word	0x08009d3d
 8009d24:	08009d45 	.word	0x08009d45
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d55 	.word	0x08009d55
 8009d30:	08009d5d 	.word	0x08009d5d
 8009d34:	2300      	movs	r3, #0
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e180      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d3c:	2304      	movs	r3, #4
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e17c      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d44:	2308      	movs	r3, #8
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e178      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d4c:	2310      	movs	r3, #16
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e174      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d54:	2320      	movs	r3, #32
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e170      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d5c:	2340      	movs	r3, #64	; 0x40
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e16c      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d64:	2380      	movs	r3, #128	; 0x80
 8009d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d6a:	e168      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <UART_SetConfig+0x348>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d142      	bne.n	8009dfc <UART_SetConfig+0x364>
 8009d76:	4b16      	ldr	r3, [pc, #88]	; (8009dd0 <UART_SetConfig+0x338>)
 8009d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d838      	bhi.n	8009df4 <UART_SetConfig+0x35c>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <UART_SetConfig+0x2f0>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009da1 	.word	0x08009da1
 8009d8c:	08009da9 	.word	0x08009da9
 8009d90:	08009db1 	.word	0x08009db1
 8009d94:	08009db9 	.word	0x08009db9
 8009d98:	08009de5 	.word	0x08009de5
 8009d9c:	08009ded 	.word	0x08009ded
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e14a      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009da8:	2304      	movs	r3, #4
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e146      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009db0:	2308      	movs	r3, #8
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e142      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009db8:	2310      	movs	r3, #16
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e13e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009dc0:	cfff69f3 	.word	0xcfff69f3
 8009dc4:	58000c00 	.word	0x58000c00
 8009dc8:	11fff4ff 	.word	0x11fff4ff
 8009dcc:	40011000 	.word	0x40011000
 8009dd0:	58024400 	.word	0x58024400
 8009dd4:	40004400 	.word	0x40004400
 8009dd8:	40004800 	.word	0x40004800
 8009ddc:	40004c00 	.word	0x40004c00
 8009de0:	40005000 	.word	0x40005000
 8009de4:	2320      	movs	r3, #32
 8009de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dea:	e128      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009dec:	2340      	movs	r3, #64	; 0x40
 8009dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009df2:	e124      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009df4:	2380      	movs	r3, #128	; 0x80
 8009df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dfa:	e120      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4acb      	ldr	r2, [pc, #812]	; (800a130 <UART_SetConfig+0x698>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d176      	bne.n	8009ef4 <UART_SetConfig+0x45c>
 8009e06:	4bcb      	ldr	r3, [pc, #812]	; (800a134 <UART_SetConfig+0x69c>)
 8009e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e0e:	2b28      	cmp	r3, #40	; 0x28
 8009e10:	d86c      	bhi.n	8009eec <UART_SetConfig+0x454>
 8009e12:	a201      	add	r2, pc, #4	; (adr r2, 8009e18 <UART_SetConfig+0x380>)
 8009e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e18:	08009ebd 	.word	0x08009ebd
 8009e1c:	08009eed 	.word	0x08009eed
 8009e20:	08009eed 	.word	0x08009eed
 8009e24:	08009eed 	.word	0x08009eed
 8009e28:	08009eed 	.word	0x08009eed
 8009e2c:	08009eed 	.word	0x08009eed
 8009e30:	08009eed 	.word	0x08009eed
 8009e34:	08009eed 	.word	0x08009eed
 8009e38:	08009ec5 	.word	0x08009ec5
 8009e3c:	08009eed 	.word	0x08009eed
 8009e40:	08009eed 	.word	0x08009eed
 8009e44:	08009eed 	.word	0x08009eed
 8009e48:	08009eed 	.word	0x08009eed
 8009e4c:	08009eed 	.word	0x08009eed
 8009e50:	08009eed 	.word	0x08009eed
 8009e54:	08009eed 	.word	0x08009eed
 8009e58:	08009ecd 	.word	0x08009ecd
 8009e5c:	08009eed 	.word	0x08009eed
 8009e60:	08009eed 	.word	0x08009eed
 8009e64:	08009eed 	.word	0x08009eed
 8009e68:	08009eed 	.word	0x08009eed
 8009e6c:	08009eed 	.word	0x08009eed
 8009e70:	08009eed 	.word	0x08009eed
 8009e74:	08009eed 	.word	0x08009eed
 8009e78:	08009ed5 	.word	0x08009ed5
 8009e7c:	08009eed 	.word	0x08009eed
 8009e80:	08009eed 	.word	0x08009eed
 8009e84:	08009eed 	.word	0x08009eed
 8009e88:	08009eed 	.word	0x08009eed
 8009e8c:	08009eed 	.word	0x08009eed
 8009e90:	08009eed 	.word	0x08009eed
 8009e94:	08009eed 	.word	0x08009eed
 8009e98:	08009edd 	.word	0x08009edd
 8009e9c:	08009eed 	.word	0x08009eed
 8009ea0:	08009eed 	.word	0x08009eed
 8009ea4:	08009eed 	.word	0x08009eed
 8009ea8:	08009eed 	.word	0x08009eed
 8009eac:	08009eed 	.word	0x08009eed
 8009eb0:	08009eed 	.word	0x08009eed
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e0bc      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e0b8      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ed2:	e0b4      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eda:	e0b0      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009edc:	2320      	movs	r3, #32
 8009ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ee2:	e0ac      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eea:	e0a8      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ef2:	e0a4      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009ef4:	697b      	ldr	r3, [r7, #20]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a8f      	ldr	r2, [pc, #572]	; (800a138 <UART_SetConfig+0x6a0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d130      	bne.n	8009f60 <UART_SetConfig+0x4c8>
 8009efe:	4b8d      	ldr	r3, [pc, #564]	; (800a134 <UART_SetConfig+0x69c>)
 8009f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b05      	cmp	r3, #5
 8009f08:	d826      	bhi.n	8009f58 <UART_SetConfig+0x4c0>
 8009f0a:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <UART_SetConfig+0x478>)
 8009f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f10:	08009f29 	.word	0x08009f29
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f39 	.word	0x08009f39
 8009f1c:	08009f41 	.word	0x08009f41
 8009f20:	08009f49 	.word	0x08009f49
 8009f24:	08009f51 	.word	0x08009f51
 8009f28:	2300      	movs	r3, #0
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e086      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f30:	2304      	movs	r3, #4
 8009f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f36:	e082      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f38:	2308      	movs	r3, #8
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e07e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e07a      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f48:	2320      	movs	r3, #32
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e076      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f50:	2340      	movs	r3, #64	; 0x40
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e072      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f58:	2380      	movs	r3, #128	; 0x80
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e06e      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a75      	ldr	r2, [pc, #468]	; (800a13c <UART_SetConfig+0x6a4>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d130      	bne.n	8009fcc <UART_SetConfig+0x534>
 8009f6a:	4b72      	ldr	r3, [pc, #456]	; (800a134 <UART_SetConfig+0x69c>)
 8009f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f6e:	f003 0307 	and.w	r3, r3, #7
 8009f72:	2b05      	cmp	r3, #5
 8009f74:	d826      	bhi.n	8009fc4 <UART_SetConfig+0x52c>
 8009f76:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x4e4>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009f95 	.word	0x08009f95
 8009f80:	08009f9d 	.word	0x08009f9d
 8009f84:	08009fa5 	.word	0x08009fa5
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fb5 	.word	0x08009fb5
 8009f90:	08009fbd 	.word	0x08009fbd
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e050      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009f9c:	2304      	movs	r3, #4
 8009f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa2:	e04c      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fa4:	2308      	movs	r3, #8
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e048      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fac:	2310      	movs	r3, #16
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb2:	e044      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fb4:	2320      	movs	r3, #32
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e040      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fbc:	2340      	movs	r3, #64	; 0x40
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e03c      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fc4:	2380      	movs	r3, #128	; 0x80
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e038      	b.n	800a03e <UART_SetConfig+0x5a6>
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a5b      	ldr	r2, [pc, #364]	; (800a140 <UART_SetConfig+0x6a8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d130      	bne.n	800a038 <UART_SetConfig+0x5a0>
 8009fd6:	4b57      	ldr	r3, [pc, #348]	; (800a134 <UART_SetConfig+0x69c>)
 8009fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fda:	f003 0307 	and.w	r3, r3, #7
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d826      	bhi.n	800a030 <UART_SetConfig+0x598>
 8009fe2:	a201      	add	r2, pc, #4	; (adr r2, 8009fe8 <UART_SetConfig+0x550>)
 8009fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe8:	0800a001 	.word	0x0800a001
 8009fec:	0800a009 	.word	0x0800a009
 8009ff0:	0800a011 	.word	0x0800a011
 8009ff4:	0800a019 	.word	0x0800a019
 8009ff8:	0800a021 	.word	0x0800a021
 8009ffc:	0800a029 	.word	0x0800a029
 800a000:	2302      	movs	r3, #2
 800a002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a006:	e01a      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a008:	2304      	movs	r3, #4
 800a00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a00e:	e016      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a010:	2308      	movs	r3, #8
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e012      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a018:	2310      	movs	r3, #16
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e00e      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a020:	2320      	movs	r3, #32
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e00a      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e006      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a030:	2380      	movs	r3, #128	; 0x80
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e002      	b.n	800a03e <UART_SetConfig+0x5a6>
 800a038:	2380      	movs	r3, #128	; 0x80
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a3f      	ldr	r2, [pc, #252]	; (800a140 <UART_SetConfig+0x6a8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	f040 80f8 	bne.w	800a23a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a04a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a04e:	2b20      	cmp	r3, #32
 800a050:	dc46      	bgt.n	800a0e0 <UART_SetConfig+0x648>
 800a052:	2b02      	cmp	r3, #2
 800a054:	f2c0 8082 	blt.w	800a15c <UART_SetConfig+0x6c4>
 800a058:	3b02      	subs	r3, #2
 800a05a:	2b1e      	cmp	r3, #30
 800a05c:	d87e      	bhi.n	800a15c <UART_SetConfig+0x6c4>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x5cc>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a0e7 	.word	0x0800a0e7
 800a068:	0800a15d 	.word	0x0800a15d
 800a06c:	0800a0ef 	.word	0x0800a0ef
 800a070:	0800a15d 	.word	0x0800a15d
 800a074:	0800a15d 	.word	0x0800a15d
 800a078:	0800a15d 	.word	0x0800a15d
 800a07c:	0800a0ff 	.word	0x0800a0ff
 800a080:	0800a15d 	.word	0x0800a15d
 800a084:	0800a15d 	.word	0x0800a15d
 800a088:	0800a15d 	.word	0x0800a15d
 800a08c:	0800a15d 	.word	0x0800a15d
 800a090:	0800a15d 	.word	0x0800a15d
 800a094:	0800a15d 	.word	0x0800a15d
 800a098:	0800a15d 	.word	0x0800a15d
 800a09c:	0800a10f 	.word	0x0800a10f
 800a0a0:	0800a15d 	.word	0x0800a15d
 800a0a4:	0800a15d 	.word	0x0800a15d
 800a0a8:	0800a15d 	.word	0x0800a15d
 800a0ac:	0800a15d 	.word	0x0800a15d
 800a0b0:	0800a15d 	.word	0x0800a15d
 800a0b4:	0800a15d 	.word	0x0800a15d
 800a0b8:	0800a15d 	.word	0x0800a15d
 800a0bc:	0800a15d 	.word	0x0800a15d
 800a0c0:	0800a15d 	.word	0x0800a15d
 800a0c4:	0800a15d 	.word	0x0800a15d
 800a0c8:	0800a15d 	.word	0x0800a15d
 800a0cc:	0800a15d 	.word	0x0800a15d
 800a0d0:	0800a15d 	.word	0x0800a15d
 800a0d4:	0800a15d 	.word	0x0800a15d
 800a0d8:	0800a15d 	.word	0x0800a15d
 800a0dc:	0800a14f 	.word	0x0800a14f
 800a0e0:	2b40      	cmp	r3, #64	; 0x40
 800a0e2:	d037      	beq.n	800a154 <UART_SetConfig+0x6bc>
 800a0e4:	e03a      	b.n	800a15c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0e6:	f7fd f9ef 	bl	80074c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0ec:	e03c      	b.n	800a168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7fd f9fe 	bl	80074f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0fc:	e034      	b.n	800a168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0fe:	f107 0318 	add.w	r3, r7, #24
 800a102:	4618      	mov	r0, r3
 800a104:	f7fd fb4a 	bl	800779c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a108:	69fb      	ldr	r3, [r7, #28]
 800a10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a10c:	e02c      	b.n	800a168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a10e:	4b09      	ldr	r3, [pc, #36]	; (800a134 <UART_SetConfig+0x69c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d016      	beq.n	800a148 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a11a:	4b06      	ldr	r3, [pc, #24]	; (800a134 <UART_SetConfig+0x69c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	08db      	lsrs	r3, r3, #3
 800a120:	f003 0303 	and.w	r3, r3, #3
 800a124:	4a07      	ldr	r2, [pc, #28]	; (800a144 <UART_SetConfig+0x6ac>)
 800a126:	fa22 f303 	lsr.w	r3, r2, r3
 800a12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a12c:	e01c      	b.n	800a168 <UART_SetConfig+0x6d0>
 800a12e:	bf00      	nop
 800a130:	40011400 	.word	0x40011400
 800a134:	58024400 	.word	0x58024400
 800a138:	40007800 	.word	0x40007800
 800a13c:	40007c00 	.word	0x40007c00
 800a140:	58000c00 	.word	0x58000c00
 800a144:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a148:	4b9d      	ldr	r3, [pc, #628]	; (800a3c0 <UART_SetConfig+0x928>)
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14c:	e00c      	b.n	800a168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a14e:	4b9d      	ldr	r3, [pc, #628]	; (800a3c4 <UART_SetConfig+0x92c>)
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a152:	e009      	b.n	800a168 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a154:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a15a:	e005      	b.n	800a168 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a15c:	2300      	movs	r3, #0
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a166:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 81de 	beq.w	800a52c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a174:	4a94      	ldr	r2, [pc, #592]	; (800a3c8 <UART_SetConfig+0x930>)
 800a176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a17a:	461a      	mov	r2, r3
 800a17c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a17e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a182:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	685a      	ldr	r2, [r3, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	4413      	add	r3, r2
 800a18e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a190:	429a      	cmp	r2, r3
 800a192:	d305      	bcc.n	800a1a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a19a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d903      	bls.n	800a1a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a1a6:	e1c1      	b.n	800a52c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	60bb      	str	r3, [r7, #8]
 800a1ae:	60fa      	str	r2, [r7, #12]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	4a84      	ldr	r2, [pc, #528]	; (800a3c8 <UART_SetConfig+0x930>)
 800a1b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	2200      	movs	r2, #0
 800a1be:	603b      	str	r3, [r7, #0]
 800a1c0:	607a      	str	r2, [r7, #4]
 800a1c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1ca:	f7f6 f8e1 	bl	8000390 <__aeabi_uldivmod>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	f04f 0200 	mov.w	r2, #0
 800a1da:	f04f 0300 	mov.w	r3, #0
 800a1de:	020b      	lsls	r3, r1, #8
 800a1e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1e4:	0202      	lsls	r2, r0, #8
 800a1e6:	6979      	ldr	r1, [r7, #20]
 800a1e8:	6849      	ldr	r1, [r1, #4]
 800a1ea:	0849      	lsrs	r1, r1, #1
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	460c      	mov	r4, r1
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	eb12 0804 	adds.w	r8, r2, r4
 800a1f6:	eb43 0905 	adc.w	r9, r3, r5
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	469a      	mov	sl, r3
 800a202:	4693      	mov	fp, r2
 800a204:	4652      	mov	r2, sl
 800a206:	465b      	mov	r3, fp
 800a208:	4640      	mov	r0, r8
 800a20a:	4649      	mov	r1, r9
 800a20c:	f7f6 f8c0 	bl	8000390 <__aeabi_uldivmod>
 800a210:	4602      	mov	r2, r0
 800a212:	460b      	mov	r3, r1
 800a214:	4613      	mov	r3, r2
 800a216:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a21a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a21e:	d308      	bcc.n	800a232 <UART_SetConfig+0x79a>
 800a220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a226:	d204      	bcs.n	800a232 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a22e:	60da      	str	r2, [r3, #12]
 800a230:	e17c      	b.n	800a52c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a238:	e178      	b.n	800a52c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	69db      	ldr	r3, [r3, #28]
 800a23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a242:	f040 80c5 	bne.w	800a3d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a246:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a24a:	2b20      	cmp	r3, #32
 800a24c:	dc48      	bgt.n	800a2e0 <UART_SetConfig+0x848>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	db7b      	blt.n	800a34a <UART_SetConfig+0x8b2>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d879      	bhi.n	800a34a <UART_SetConfig+0x8b2>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <UART_SetConfig+0x7c4>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a2e7 	.word	0x0800a2e7
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a34b 	.word	0x0800a34b
 800a268:	0800a34b 	.word	0x0800a34b
 800a26c:	0800a2f7 	.word	0x0800a2f7
 800a270:	0800a34b 	.word	0x0800a34b
 800a274:	0800a34b 	.word	0x0800a34b
 800a278:	0800a34b 	.word	0x0800a34b
 800a27c:	0800a307 	.word	0x0800a307
 800a280:	0800a34b 	.word	0x0800a34b
 800a284:	0800a34b 	.word	0x0800a34b
 800a288:	0800a34b 	.word	0x0800a34b
 800a28c:	0800a34b 	.word	0x0800a34b
 800a290:	0800a34b 	.word	0x0800a34b
 800a294:	0800a34b 	.word	0x0800a34b
 800a298:	0800a34b 	.word	0x0800a34b
 800a29c:	0800a317 	.word	0x0800a317
 800a2a0:	0800a34b 	.word	0x0800a34b
 800a2a4:	0800a34b 	.word	0x0800a34b
 800a2a8:	0800a34b 	.word	0x0800a34b
 800a2ac:	0800a34b 	.word	0x0800a34b
 800a2b0:	0800a34b 	.word	0x0800a34b
 800a2b4:	0800a34b 	.word	0x0800a34b
 800a2b8:	0800a34b 	.word	0x0800a34b
 800a2bc:	0800a34b 	.word	0x0800a34b
 800a2c0:	0800a34b 	.word	0x0800a34b
 800a2c4:	0800a34b 	.word	0x0800a34b
 800a2c8:	0800a34b 	.word	0x0800a34b
 800a2cc:	0800a34b 	.word	0x0800a34b
 800a2d0:	0800a34b 	.word	0x0800a34b
 800a2d4:	0800a34b 	.word	0x0800a34b
 800a2d8:	0800a34b 	.word	0x0800a34b
 800a2dc:	0800a33d 	.word	0x0800a33d
 800a2e0:	2b40      	cmp	r3, #64	; 0x40
 800a2e2:	d02e      	beq.n	800a342 <UART_SetConfig+0x8aa>
 800a2e4:	e031      	b.n	800a34a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2e6:	f7fb feb9 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 800a2ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2ec:	e033      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2ee:	f7fb fecb 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 800a2f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2f4:	e02f      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7fd f8fa 	bl	80074f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a304:	e027      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a306:	f107 0318 	add.w	r3, r7, #24
 800a30a:	4618      	mov	r0, r3
 800a30c:	f7fd fa46 	bl	800779c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a314:	e01f      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a316:	4b2d      	ldr	r3, [pc, #180]	; (800a3cc <UART_SetConfig+0x934>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0320 	and.w	r3, r3, #32
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d009      	beq.n	800a336 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a322:	4b2a      	ldr	r3, [pc, #168]	; (800a3cc <UART_SetConfig+0x934>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	08db      	lsrs	r3, r3, #3
 800a328:	f003 0303 	and.w	r3, r3, #3
 800a32c:	4a24      	ldr	r2, [pc, #144]	; (800a3c0 <UART_SetConfig+0x928>)
 800a32e:	fa22 f303 	lsr.w	r3, r2, r3
 800a332:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a334:	e00f      	b.n	800a356 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a336:	4b22      	ldr	r3, [pc, #136]	; (800a3c0 <UART_SetConfig+0x928>)
 800a338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a33a:	e00c      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a33c:	4b21      	ldr	r3, [pc, #132]	; (800a3c4 <UART_SetConfig+0x92c>)
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a340:	e009      	b.n	800a356 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a348:	e005      	b.n	800a356 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a34a:	2300      	movs	r3, #0
 800a34c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a354:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a358:	2b00      	cmp	r3, #0
 800a35a:	f000 80e7 	beq.w	800a52c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	4a19      	ldr	r2, [pc, #100]	; (800a3c8 <UART_SetConfig+0x930>)
 800a364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a368:	461a      	mov	r2, r3
 800a36a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a36c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a370:	005a      	lsls	r2, r3, #1
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a386:	2b0f      	cmp	r3, #15
 800a388:	d916      	bls.n	800a3b8 <UART_SetConfig+0x920>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a390:	d212      	bcs.n	800a3b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	b29b      	uxth	r3, r3
 800a396:	f023 030f 	bic.w	r3, r3, #15
 800a39a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39e:	085b      	lsrs	r3, r3, #1
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f003 0307 	and.w	r3, r3, #7
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3b4:	60da      	str	r2, [r3, #12]
 800a3b6:	e0b9      	b.n	800a52c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3be:	e0b5      	b.n	800a52c <UART_SetConfig+0xa94>
 800a3c0:	03d09000 	.word	0x03d09000
 800a3c4:	003d0900 	.word	0x003d0900
 800a3c8:	08011bf8 	.word	0x08011bf8
 800a3cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3d4:	2b20      	cmp	r3, #32
 800a3d6:	dc49      	bgt.n	800a46c <UART_SetConfig+0x9d4>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	db7c      	blt.n	800a4d6 <UART_SetConfig+0xa3e>
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	d87a      	bhi.n	800a4d6 <UART_SetConfig+0xa3e>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0x950>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a4d7 	.word	0x0800a4d7
 800a3f4:	0800a4d7 	.word	0x0800a4d7
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a4d7 	.word	0x0800a4d7
 800a400:	0800a4d7 	.word	0x0800a4d7
 800a404:	0800a4d7 	.word	0x0800a4d7
 800a408:	0800a493 	.word	0x0800a493
 800a40c:	0800a4d7 	.word	0x0800a4d7
 800a410:	0800a4d7 	.word	0x0800a4d7
 800a414:	0800a4d7 	.word	0x0800a4d7
 800a418:	0800a4d7 	.word	0x0800a4d7
 800a41c:	0800a4d7 	.word	0x0800a4d7
 800a420:	0800a4d7 	.word	0x0800a4d7
 800a424:	0800a4d7 	.word	0x0800a4d7
 800a428:	0800a4a3 	.word	0x0800a4a3
 800a42c:	0800a4d7 	.word	0x0800a4d7
 800a430:	0800a4d7 	.word	0x0800a4d7
 800a434:	0800a4d7 	.word	0x0800a4d7
 800a438:	0800a4d7 	.word	0x0800a4d7
 800a43c:	0800a4d7 	.word	0x0800a4d7
 800a440:	0800a4d7 	.word	0x0800a4d7
 800a444:	0800a4d7 	.word	0x0800a4d7
 800a448:	0800a4d7 	.word	0x0800a4d7
 800a44c:	0800a4d7 	.word	0x0800a4d7
 800a450:	0800a4d7 	.word	0x0800a4d7
 800a454:	0800a4d7 	.word	0x0800a4d7
 800a458:	0800a4d7 	.word	0x0800a4d7
 800a45c:	0800a4d7 	.word	0x0800a4d7
 800a460:	0800a4d7 	.word	0x0800a4d7
 800a464:	0800a4d7 	.word	0x0800a4d7
 800a468:	0800a4c9 	.word	0x0800a4c9
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d02e      	beq.n	800a4ce <UART_SetConfig+0xa36>
 800a470:	e031      	b.n	800a4d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a472:	f7fb fdf3 	bl	800605c <HAL_RCC_GetPCLK1Freq>
 800a476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a478:	e033      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a47a:	f7fb fe05 	bl	8006088 <HAL_RCC_GetPCLK2Freq>
 800a47e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a480:	e02f      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fd f834 	bl	80074f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a490:	e027      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a492:	f107 0318 	add.w	r3, r7, #24
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd f980 	bl	800779c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a0:	e01f      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a2:	4b2d      	ldr	r3, [pc, #180]	; (800a558 <UART_SetConfig+0xac0>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ae:	4b2a      	ldr	r3, [pc, #168]	; (800a558 <UART_SetConfig+0xac0>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	08db      	lsrs	r3, r3, #3
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	4a28      	ldr	r2, [pc, #160]	; (800a55c <UART_SetConfig+0xac4>)
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4c0:	e00f      	b.n	800a4e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a4c2:	4b26      	ldr	r3, [pc, #152]	; (800a55c <UART_SetConfig+0xac4>)
 800a4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4c6:	e00c      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4c8:	4b25      	ldr	r3, [pc, #148]	; (800a560 <UART_SetConfig+0xac8>)
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4cc:	e009      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d4:	e005      	b.n	800a4e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4e0:	bf00      	nop
    }

    if (pclk != 0U)
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d021      	beq.n	800a52c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ec:	4a1d      	ldr	r2, [pc, #116]	; (800a564 <UART_SetConfig+0xacc>)
 800a4ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	441a      	add	r2, r3
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	2b0f      	cmp	r3, #15
 800a510:	d909      	bls.n	800a526 <UART_SetConfig+0xa8e>
 800a512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a518:	d205      	bcs.n	800a526 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60da      	str	r2, [r3, #12]
 800a524:	e002      	b.n	800a52c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2201      	movs	r2, #1
 800a530:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2201      	movs	r2, #1
 800a538:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2200      	movs	r2, #0
 800a540:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2200      	movs	r2, #0
 800a546:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a548:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3748      	adds	r7, #72	; 0x48
 800a550:	46bd      	mov	sp, r7
 800a552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a556:	bf00      	nop
 800a558:	58024400 	.word	0x58024400
 800a55c:	03d09000 	.word	0x03d09000
 800a560:	003d0900 	.word	0x003d0900
 800a564:	08011bf8 	.word	0x08011bf8

0800a568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a574:	f003 0301 	and.w	r3, r3, #1
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00a      	beq.n	800a592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	430a      	orrs	r2, r1
 800a590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a596:	f003 0302 	and.w	r3, r3, #2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d00a      	beq.n	800a5b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	430a      	orrs	r2, r1
 800a5b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b8:	f003 0304 	and.w	r3, r3, #4
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d00a      	beq.n	800a5d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	430a      	orrs	r2, r1
 800a5d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5da:	f003 0308 	and.w	r3, r3, #8
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00a      	beq.n	800a5f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	430a      	orrs	r2, r1
 800a5f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fc:	f003 0310 	and.w	r3, r3, #16
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	430a      	orrs	r2, r1
 800a618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00a      	beq.n	800a63c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	430a      	orrs	r2, r1
 800a63a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d01a      	beq.n	800a67e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	430a      	orrs	r2, r1
 800a65c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a666:	d10a      	bne.n	800a67e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	430a      	orrs	r2, r1
 800a67c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a686:	2b00      	cmp	r3, #0
 800a688:	d00a      	beq.n	800a6a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	430a      	orrs	r2, r1
 800a69e:	605a      	str	r2, [r3, #4]
  }
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b098      	sub	sp, #96	; 0x60
 800a6b0:	af02      	add	r7, sp, #8
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6bc:	f7f8 f960 	bl	8002980 <HAL_GetTick>
 800a6c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0308 	and.w	r3, r3, #8
 800a6cc:	2b08      	cmp	r3, #8
 800a6ce:	d12f      	bne.n	800a730 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6d4:	9300      	str	r3, [sp, #0]
 800a6d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f88e 	bl	800a800 <UART_WaitOnFlagUntilTimeout>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d022      	beq.n	800a730 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f2:	e853 3f00 	ldrex	r3, [r3]
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6fe:	653b      	str	r3, [r7, #80]	; 0x50
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	461a      	mov	r2, r3
 800a706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a708:	647b      	str	r3, [r7, #68]	; 0x44
 800a70a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a70e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a710:	e841 2300 	strex	r3, r2, [r1]
 800a714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1e6      	bne.n	800a6ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e063      	b.n	800a7f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 0304 	and.w	r3, r3, #4
 800a73a:	2b04      	cmp	r3, #4
 800a73c:	d149      	bne.n	800a7d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a73e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a746:	2200      	movs	r2, #0
 800a748:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f857 	bl	800a800 <UART_WaitOnFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d03c      	beq.n	800a7d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	623b      	str	r3, [r7, #32]
   return(result);
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a76c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	461a      	mov	r2, r3
 800a774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a776:	633b      	str	r3, [r7, #48]	; 0x30
 800a778:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a77e:	e841 2300 	strex	r3, r2, [r1]
 800a782:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e6      	bne.n	800a758 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	e853 3f00 	ldrex	r3, [r3]
 800a798:	60fb      	str	r3, [r7, #12]
   return(result);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f023 0301 	bic.w	r3, r3, #1
 800a7a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7aa:	61fa      	str	r2, [r7, #28]
 800a7ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ae:	69b9      	ldr	r1, [r7, #24]
 800a7b0:	69fa      	ldr	r2, [r7, #28]
 800a7b2:	e841 2300 	strex	r3, r2, [r1]
 800a7b6:	617b      	str	r3, [r7, #20]
   return(result);
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1e5      	bne.n	800a78a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e012      	b.n	800a7f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3758      	adds	r7, #88	; 0x58
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	603b      	str	r3, [r7, #0]
 800a80c:	4613      	mov	r3, r2
 800a80e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a810:	e049      	b.n	800a8a6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a818:	d045      	beq.n	800a8a6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a81a:	f7f8 f8b1 	bl	8002980 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	69ba      	ldr	r2, [r7, #24]
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <UART_WaitOnFlagUntilTimeout+0x30>
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a830:	2303      	movs	r3, #3
 800a832:	e048      	b.n	800a8c6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d031      	beq.n	800a8a6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f003 0308 	and.w	r3, r3, #8
 800a84c:	2b08      	cmp	r3, #8
 800a84e:	d110      	bne.n	800a872 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2208      	movs	r2, #8
 800a856:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f000 f839 	bl	800a8d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2208      	movs	r2, #8
 800a862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	e029      	b.n	800a8c6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a87c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a880:	d111      	bne.n	800a8a6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a88a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f81f 	bl	800a8d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	2220      	movs	r2, #32
 800a896:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e00f      	b.n	800a8c6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69da      	ldr	r2, [r3, #28]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	68ba      	ldr	r2, [r7, #8]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	bf0c      	ite	eq
 800a8b6:	2301      	moveq	r3, #1
 800a8b8:	2300      	movne	r3, #0
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	79fb      	ldrb	r3, [r7, #7]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d0a6      	beq.n	800a812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
	...

0800a8d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b095      	sub	sp, #84	; 0x54
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a8f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e6      	bne.n	800a8d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	61fb      	str	r3, [r7, #28]
   return(result);
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	4b1e      	ldr	r3, [pc, #120]	; (800a998 <UART_EndRxTransfer+0xc8>)
 800a91e:	4013      	ands	r3, r2
 800a920:	64bb      	str	r3, [r7, #72]	; 0x48
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a92a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a92c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a942:	2b01      	cmp	r3, #1
 800a944:	d118      	bne.n	800a978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	e853 3f00 	ldrex	r3, [r3]
 800a952:	60bb      	str	r3, [r7, #8]
   return(result);
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	f023 0310 	bic.w	r3, r3, #16
 800a95a:	647b      	str	r3, [r7, #68]	; 0x44
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	461a      	mov	r2, r3
 800a962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a964:	61bb      	str	r3, [r7, #24]
 800a966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a968:	6979      	ldr	r1, [r7, #20]
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	e841 2300 	strex	r3, r2, [r1]
 800a970:	613b      	str	r3, [r7, #16]
   return(result);
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d1e6      	bne.n	800a946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2220      	movs	r2, #32
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2200      	movs	r2, #0
 800a984:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2200      	movs	r2, #0
 800a98a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a98c:	bf00      	nop
 800a98e:	3754      	adds	r7, #84	; 0x54
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	effffffe 	.word	0xeffffffe

0800a99c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f7ff f856 	bl	8009a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9c0:	bf00      	nop
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b088      	sub	sp, #32
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	e853 3f00 	ldrex	r3, [r3]
 800a9dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9e4:	61fb      	str	r3, [r7, #28]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	69fb      	ldr	r3, [r7, #28]
 800a9ee:	61bb      	str	r3, [r7, #24]
 800a9f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f2:	6979      	ldr	r1, [r7, #20]
 800a9f4:	69ba      	ldr	r2, [r7, #24]
 800a9f6:	e841 2300 	strex	r3, r2, [r1]
 800a9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d1e6      	bne.n	800a9d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f7ff f821 	bl	8009a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa16:	bf00      	nop
 800aa18:	3720      	adds	r7, #32
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr

0800aa32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b085      	sub	sp, #20
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e027      	b.n	800aac0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2224      	movs	r2, #36	; 0x24
 800aa7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 0201 	bic.w	r2, r2, #1
 800aa96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2220      	movs	r2, #32
 800aab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d101      	bne.n	800aae4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aae0:	2302      	movs	r3, #2
 800aae2:	e02d      	b.n	800ab40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2224      	movs	r2, #36	; 0x24
 800aaf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f022 0201 	bic.w	r2, r2, #1
 800ab0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	430a      	orrs	r2, r1
 800ab1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 f84f 	bl	800abc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2220      	movs	r2, #32
 800ab32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e02d      	b.n	800abbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2224      	movs	r2, #36	; 0x24
 800ab6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0201 	bic.w	r2, r2, #1
 800ab86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f811 	bl	800abc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2220      	movs	r2, #32
 800abae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d108      	bne.n	800abe6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2201      	movs	r2, #1
 800abd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2201      	movs	r2, #1
 800abe0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abe4:	e031      	b.n	800ac4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abe6:	2310      	movs	r3, #16
 800abe8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abea:	2310      	movs	r3, #16
 800abec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	0e5b      	lsrs	r3, r3, #25
 800abf6:	b2db      	uxtb	r3, r3
 800abf8:	f003 0307 	and.w	r3, r3, #7
 800abfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	0f5b      	lsrs	r3, r3, #29
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac0e:	7bbb      	ldrb	r3, [r7, #14]
 800ac10:	7b3a      	ldrb	r2, [r7, #12]
 800ac12:	4911      	ldr	r1, [pc, #68]	; (800ac58 <UARTEx_SetNbDataToProcess+0x94>)
 800ac14:	5c8a      	ldrb	r2, [r1, r2]
 800ac16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac1a:	7b3a      	ldrb	r2, [r7, #12]
 800ac1c:	490f      	ldr	r1, [pc, #60]	; (800ac5c <UARTEx_SetNbDataToProcess+0x98>)
 800ac1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	7b7a      	ldrb	r2, [r7, #13]
 800ac30:	4909      	ldr	r1, [pc, #36]	; (800ac58 <UARTEx_SetNbDataToProcess+0x94>)
 800ac32:	5c8a      	ldrb	r2, [r1, r2]
 800ac34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac38:	7b7a      	ldrb	r2, [r7, #13]
 800ac3a:	4908      	ldr	r1, [pc, #32]	; (800ac5c <UARTEx_SetNbDataToProcess+0x98>)
 800ac3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac4a:	bf00      	nop
 800ac4c:	3714      	adds	r7, #20
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr
 800ac56:	bf00      	nop
 800ac58:	08011c10 	.word	0x08011c10
 800ac5c:	08011c18 	.word	0x08011c18

0800ac60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac60:	b084      	sub	sp, #16
 800ac62:	b580      	push	{r7, lr}
 800ac64:	b084      	sub	sp, #16
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	f107 001c 	add.w	r0, r7, #28
 800ac6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d120      	bne.n	800acba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	4b2a      	ldr	r3, [pc, #168]	; (800ad34 <USB_CoreInit+0xd4>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	68db      	ldr	r3, [r3, #12]
 800ac94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ac9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d105      	bne.n	800acae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 faf8 	bl	800c2a4 <USB_CoreReset>
 800acb4:	4603      	mov	r3, r0
 800acb6:	73fb      	strb	r3, [r7, #15]
 800acb8:	e01a      	b.n	800acf0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f001 faec 	bl	800c2a4 <USB_CoreReset>
 800accc:	4603      	mov	r3, r0
 800acce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800acd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d106      	bne.n	800ace4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
 800ace2:	e005      	b.n	800acf0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800acf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d116      	bne.n	800ad24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad04:	4b0c      	ldr	r3, [pc, #48]	; (800ad38 <USB_CoreInit+0xd8>)
 800ad06:	4313      	orrs	r3, r2
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	f043 0206 	orr.w	r2, r3, #6
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	689b      	ldr	r3, [r3, #8]
 800ad1c:	f043 0220 	orr.w	r2, r3, #32
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3710      	adds	r7, #16
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad30:	b004      	add	sp, #16
 800ad32:	4770      	bx	lr
 800ad34:	ffbdffbf 	.word	0xffbdffbf
 800ad38:	03ee0000 	.word	0x03ee0000

0800ad3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	4613      	mov	r3, r2
 800ad48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	2b02      	cmp	r3, #2
 800ad4e:	d165      	bne.n	800ae1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	4a41      	ldr	r2, [pc, #260]	; (800ae58 <USB_SetTurnaroundTime+0x11c>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d906      	bls.n	800ad66 <USB_SetTurnaroundTime+0x2a>
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	4a40      	ldr	r2, [pc, #256]	; (800ae5c <USB_SetTurnaroundTime+0x120>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d202      	bcs.n	800ad66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ad60:	230f      	movs	r3, #15
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	e062      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	4a3c      	ldr	r2, [pc, #240]	; (800ae5c <USB_SetTurnaroundTime+0x120>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d306      	bcc.n	800ad7c <USB_SetTurnaroundTime+0x40>
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4a3b      	ldr	r2, [pc, #236]	; (800ae60 <USB_SetTurnaroundTime+0x124>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d202      	bcs.n	800ad7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ad76:	230e      	movs	r3, #14
 800ad78:	617b      	str	r3, [r7, #20]
 800ad7a:	e057      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ad7c:	68bb      	ldr	r3, [r7, #8]
 800ad7e:	4a38      	ldr	r2, [pc, #224]	; (800ae60 <USB_SetTurnaroundTime+0x124>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d306      	bcc.n	800ad92 <USB_SetTurnaroundTime+0x56>
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	4a37      	ldr	r2, [pc, #220]	; (800ae64 <USB_SetTurnaroundTime+0x128>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d202      	bcs.n	800ad92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ad8c:	230d      	movs	r3, #13
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	e04c      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	4a33      	ldr	r2, [pc, #204]	; (800ae64 <USB_SetTurnaroundTime+0x128>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d306      	bcc.n	800ada8 <USB_SetTurnaroundTime+0x6c>
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	4a32      	ldr	r2, [pc, #200]	; (800ae68 <USB_SetTurnaroundTime+0x12c>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d802      	bhi.n	800ada8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ada2:	230c      	movs	r3, #12
 800ada4:	617b      	str	r3, [r7, #20]
 800ada6:	e041      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4a2f      	ldr	r2, [pc, #188]	; (800ae68 <USB_SetTurnaroundTime+0x12c>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d906      	bls.n	800adbe <USB_SetTurnaroundTime+0x82>
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	4a2e      	ldr	r2, [pc, #184]	; (800ae6c <USB_SetTurnaroundTime+0x130>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d802      	bhi.n	800adbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800adb8:	230b      	movs	r3, #11
 800adba:	617b      	str	r3, [r7, #20]
 800adbc:	e036      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4a2a      	ldr	r2, [pc, #168]	; (800ae6c <USB_SetTurnaroundTime+0x130>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d906      	bls.n	800add4 <USB_SetTurnaroundTime+0x98>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	4a29      	ldr	r2, [pc, #164]	; (800ae70 <USB_SetTurnaroundTime+0x134>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d802      	bhi.n	800add4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800adce:	230a      	movs	r3, #10
 800add0:	617b      	str	r3, [r7, #20]
 800add2:	e02b      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4a26      	ldr	r2, [pc, #152]	; (800ae70 <USB_SetTurnaroundTime+0x134>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d906      	bls.n	800adea <USB_SetTurnaroundTime+0xae>
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	4a25      	ldr	r2, [pc, #148]	; (800ae74 <USB_SetTurnaroundTime+0x138>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d202      	bcs.n	800adea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ade4:	2309      	movs	r3, #9
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	e020      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4a21      	ldr	r2, [pc, #132]	; (800ae74 <USB_SetTurnaroundTime+0x138>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d306      	bcc.n	800ae00 <USB_SetTurnaroundTime+0xc4>
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	4a20      	ldr	r2, [pc, #128]	; (800ae78 <USB_SetTurnaroundTime+0x13c>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d802      	bhi.n	800ae00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800adfa:	2308      	movs	r3, #8
 800adfc:	617b      	str	r3, [r7, #20]
 800adfe:	e015      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4a1d      	ldr	r2, [pc, #116]	; (800ae78 <USB_SetTurnaroundTime+0x13c>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d906      	bls.n	800ae16 <USB_SetTurnaroundTime+0xda>
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	4a1c      	ldr	r2, [pc, #112]	; (800ae7c <USB_SetTurnaroundTime+0x140>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d202      	bcs.n	800ae16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae10:	2307      	movs	r3, #7
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	e00a      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae16:	2306      	movs	r3, #6
 800ae18:	617b      	str	r3, [r7, #20]
 800ae1a:	e007      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae1c:	79fb      	ldrb	r3, [r7, #7]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d102      	bne.n	800ae28 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae22:	2309      	movs	r3, #9
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	e001      	b.n	800ae2c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae28:	2309      	movs	r3, #9
 800ae2a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	029b      	lsls	r3, r3, #10
 800ae40:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae44:	431a      	orrs	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	371c      	adds	r7, #28
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr
 800ae58:	00d8acbf 	.word	0x00d8acbf
 800ae5c:	00e4e1c0 	.word	0x00e4e1c0
 800ae60:	00f42400 	.word	0x00f42400
 800ae64:	01067380 	.word	0x01067380
 800ae68:	011a499f 	.word	0x011a499f
 800ae6c:	01312cff 	.word	0x01312cff
 800ae70:	014ca43f 	.word	0x014ca43f
 800ae74:	016e3600 	.word	0x016e3600
 800ae78:	01a6ab1f 	.word	0x01a6ab1f
 800ae7c:	01e84800 	.word	0x01e84800

0800ae80 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b083      	sub	sp, #12
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f043 0201 	orr.w	r2, r3, #1
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ae94:	2300      	movs	r3, #0
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f023 0201 	bic.w	r2, r3, #1
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	460b      	mov	r3, r1
 800aece:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	68db      	ldr	r3, [r3, #12]
 800aed8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d115      	bne.n	800af12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aef2:	2001      	movs	r0, #1
 800aef4:	f7f7 fd50 	bl	8002998 <HAL_Delay>
      ms++;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f001 f93f 	bl	800c182 <USB_GetMode>
 800af04:	4603      	mov	r3, r0
 800af06:	2b01      	cmp	r3, #1
 800af08:	d01e      	beq.n	800af48 <USB_SetCurrentMode+0x84>
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b31      	cmp	r3, #49	; 0x31
 800af0e:	d9f0      	bls.n	800aef2 <USB_SetCurrentMode+0x2e>
 800af10:	e01a      	b.n	800af48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af12:	78fb      	ldrb	r3, [r7, #3]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d115      	bne.n	800af44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af24:	2001      	movs	r0, #1
 800af26:	f7f7 fd37 	bl	8002998 <HAL_Delay>
      ms++;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	3301      	adds	r3, #1
 800af2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 f926 	bl	800c182 <USB_GetMode>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d005      	beq.n	800af48 <USB_SetCurrentMode+0x84>
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b31      	cmp	r3, #49	; 0x31
 800af40:	d9f0      	bls.n	800af24 <USB_SetCurrentMode+0x60>
 800af42:	e001      	b.n	800af48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e005      	b.n	800af54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b32      	cmp	r3, #50	; 0x32
 800af4c:	d101      	bne.n	800af52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af4e:	2301      	movs	r3, #1
 800af50:	e000      	b.n	800af54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800af52:	2300      	movs	r3, #0
}
 800af54:	4618      	mov	r0, r3
 800af56:	3710      	adds	r7, #16
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800af5c:	b084      	sub	sp, #16
 800af5e:	b580      	push	{r7, lr}
 800af60:	b086      	sub	sp, #24
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
 800af66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800af6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800af6e:	2300      	movs	r3, #0
 800af70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800af76:	2300      	movs	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
 800af7a:	e009      	b.n	800af90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3340      	adds	r3, #64	; 0x40
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	2200      	movs	r2, #0
 800af88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	3301      	adds	r3, #1
 800af8e:	613b      	str	r3, [r7, #16]
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	2b0e      	cmp	r3, #14
 800af94:	d9f2      	bls.n	800af7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800af96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d11c      	bne.n	800afd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	68fa      	ldr	r2, [r7, #12]
 800afa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800afaa:	f043 0302 	orr.w	r3, r3, #2
 800afae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e005      	b.n	800afe2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afe8:	461a      	mov	r2, r3
 800afea:	2300      	movs	r3, #0
 800afec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff4:	4619      	mov	r1, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800affc:	461a      	mov	r2, r3
 800affe:	680b      	ldr	r3, [r1, #0]
 800b000:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b004:	2b01      	cmp	r3, #1
 800b006:	d10c      	bne.n	800b022 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d104      	bne.n	800b018 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b00e:	2100      	movs	r1, #0
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f965 	bl	800b2e0 <USB_SetDevSpeed>
 800b016:	e008      	b.n	800b02a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b018:	2101      	movs	r1, #1
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f960 	bl	800b2e0 <USB_SetDevSpeed>
 800b020:	e003      	b.n	800b02a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b022:	2103      	movs	r1, #3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 f95b 	bl	800b2e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b02a:	2110      	movs	r1, #16
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 f8f3 	bl	800b218 <USB_FlushTxFifo>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f91f 	bl	800b280 <USB_FlushRxFifo>
 800b042:	4603      	mov	r3, r0
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b052:	461a      	mov	r2, r3
 800b054:	2300      	movs	r3, #0
 800b056:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b05e:	461a      	mov	r2, r3
 800b060:	2300      	movs	r3, #0
 800b062:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b06a:	461a      	mov	r2, r3
 800b06c:	2300      	movs	r3, #0
 800b06e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b070:	2300      	movs	r3, #0
 800b072:	613b      	str	r3, [r7, #16]
 800b074:	e043      	b.n	800b0fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	015a      	lsls	r2, r3, #5
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	4413      	add	r3, r2
 800b07e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b088:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b08c:	d118      	bne.n	800b0c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b094:	693b      	ldr	r3, [r7, #16]
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0a6:	6013      	str	r3, [r2, #0]
 800b0a8:	e013      	b.n	800b0d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b0bc:	6013      	str	r3, [r2, #0]
 800b0be:	e008      	b.n	800b0d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	015a      	lsls	r2, r3, #5
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0de:	461a      	mov	r2, r3
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b0f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	613b      	str	r3, [r7, #16]
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	429a      	cmp	r2, r3
 800b104:	d3b7      	bcc.n	800b076 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b106:	2300      	movs	r3, #0
 800b108:	613b      	str	r3, [r7, #16]
 800b10a:	e043      	b.n	800b194 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	4413      	add	r3, r2
 800b114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b11e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b122:	d118      	bne.n	800b156 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10a      	bne.n	800b140 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	015a      	lsls	r2, r3, #5
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	4413      	add	r3, r2
 800b132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b136:	461a      	mov	r2, r3
 800b138:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	e013      	b.n	800b168 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	015a      	lsls	r2, r3, #5
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4413      	add	r3, r2
 800b148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b14c:	461a      	mov	r2, r3
 800b14e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b152:	6013      	str	r3, [r2, #0]
 800b154:	e008      	b.n	800b168 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	015a      	lsls	r2, r3, #5
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	4413      	add	r3, r2
 800b15e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b162:	461a      	mov	r2, r3
 800b164:	2300      	movs	r3, #0
 800b166:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	015a      	lsls	r2, r3, #5
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b174:	461a      	mov	r2, r3
 800b176:	2300      	movs	r3, #0
 800b178:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b186:	461a      	mov	r2, r3
 800b188:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b18c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	3301      	adds	r3, #1
 800b192:	613b      	str	r3, [r7, #16]
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	693a      	ldr	r2, [r7, #16]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d3b7      	bcc.n	800b10c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b1bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d105      	bne.n	800b1d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f043 0210 	orr.w	r2, r3, #16
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	699a      	ldr	r2, [r3, #24]
 800b1d4:	4b0e      	ldr	r3, [pc, #56]	; (800b210 <USB_DevInit+0x2b4>)
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	f043 0208 	orr.w	r2, r3, #8
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d105      	bne.n	800b200 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699a      	ldr	r2, [r3, #24]
 800b1f8:	4b06      	ldr	r3, [pc, #24]	; (800b214 <USB_DevInit+0x2b8>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b200:	7dfb      	ldrb	r3, [r7, #23]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b20c:	b004      	add	sp, #16
 800b20e:	4770      	bx	lr
 800b210:	803c3800 	.word	0x803c3800
 800b214:	40000004 	.word	0x40000004

0800b218 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b218:	b480      	push	{r7}
 800b21a:	b085      	sub	sp, #20
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b222:	2300      	movs	r3, #0
 800b224:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	3301      	adds	r3, #1
 800b22a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4a13      	ldr	r2, [pc, #76]	; (800b27c <USB_FlushTxFifo+0x64>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d901      	bls.n	800b238 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b234:	2303      	movs	r3, #3
 800b236:	e01b      	b.n	800b270 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	daf2      	bge.n	800b226 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	019b      	lsls	r3, r3, #6
 800b248:	f043 0220 	orr.w	r2, r3, #32
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	4a08      	ldr	r2, [pc, #32]	; (800b27c <USB_FlushTxFifo+0x64>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d901      	bls.n	800b262 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e006      	b.n	800b270 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	691b      	ldr	r3, [r3, #16]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d0f0      	beq.n	800b250 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr
 800b27c:	00030d40 	.word	0x00030d40

0800b280 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b288:	2300      	movs	r3, #0
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	3301      	adds	r3, #1
 800b290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	4a11      	ldr	r2, [pc, #68]	; (800b2dc <USB_FlushRxFifo+0x5c>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d901      	bls.n	800b29e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e018      	b.n	800b2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	daf2      	bge.n	800b28c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2210      	movs	r2, #16
 800b2ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	4a08      	ldr	r2, [pc, #32]	; (800b2dc <USB_FlushRxFifo+0x5c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d901      	bls.n	800b2c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b2be:	2303      	movs	r3, #3
 800b2c0:	e006      	b.n	800b2d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	f003 0310 	and.w	r3, r3, #16
 800b2ca:	2b10      	cmp	r3, #16
 800b2cc:	d0f0      	beq.n	800b2b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	00030d40 	.word	0x00030d40

0800b2e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b300:	4313      	orrs	r3, r2
 800b302:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b304:	2300      	movs	r3, #0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b312:	b480      	push	{r7}
 800b314:	b087      	sub	sp, #28
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	f003 0306 	and.w	r3, r3, #6
 800b32a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d102      	bne.n	800b338 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b332:	2300      	movs	r3, #0
 800b334:	75fb      	strb	r3, [r7, #23]
 800b336:	e00a      	b.n	800b34e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2b02      	cmp	r3, #2
 800b33c:	d002      	beq.n	800b344 <USB_GetDevSpeed+0x32>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2b06      	cmp	r3, #6
 800b342:	d102      	bne.n	800b34a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b344:	2302      	movs	r3, #2
 800b346:	75fb      	strb	r3, [r7, #23]
 800b348:	e001      	b.n	800b34e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b34a:	230f      	movs	r3, #15
 800b34c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b34e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b350:	4618      	mov	r0, r3
 800b352:	371c      	adds	r7, #28
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
 800b364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	785b      	ldrb	r3, [r3, #1]
 800b374:	2b01      	cmp	r3, #1
 800b376:	d139      	bne.n	800b3ec <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37e:	69da      	ldr	r2, [r3, #28]
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	781b      	ldrb	r3, [r3, #0]
 800b384:	f003 030f 	and.w	r3, r3, #15
 800b388:	2101      	movs	r1, #1
 800b38a:	fa01 f303 	lsl.w	r3, r1, r3
 800b38e:	b29b      	uxth	r3, r3
 800b390:	68f9      	ldr	r1, [r7, #12]
 800b392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b396:	4313      	orrs	r3, r2
 800b398:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	015a      	lsls	r2, r3, #5
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d153      	bne.n	800b458 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	015a      	lsls	r2, r3, #5
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3bc:	681a      	ldr	r2, [r3, #0]
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	791b      	ldrb	r3, [r3, #4]
 800b3ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	059b      	lsls	r3, r3, #22
 800b3d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	0159      	lsls	r1, r3, #5
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	440b      	add	r3, r1
 800b3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e2:	4619      	mov	r1, r3
 800b3e4:	4b20      	ldr	r3, [pc, #128]	; (800b468 <USB_ActivateEndpoint+0x10c>)
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	600b      	str	r3, [r1, #0]
 800b3ea:	e035      	b.n	800b458 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3f2:	69da      	ldr	r2, [r3, #28]
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	f003 030f 	and.w	r3, r3, #15
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b402:	041b      	lsls	r3, r3, #16
 800b404:	68f9      	ldr	r1, [r7, #12]
 800b406:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b40a:	4313      	orrs	r3, r2
 800b40c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b420:	2b00      	cmp	r3, #0
 800b422:	d119      	bne.n	800b458 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	791b      	ldrb	r3, [r3, #4]
 800b43e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b440:	430b      	orrs	r3, r1
 800b442:	431a      	orrs	r2, r3
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	0159      	lsls	r1, r3, #5
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	440b      	add	r3, r1
 800b44c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b450:	4619      	mov	r1, r3
 800b452:	4b05      	ldr	r3, [pc, #20]	; (800b468 <USB_ActivateEndpoint+0x10c>)
 800b454:	4313      	orrs	r3, r2
 800b456:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	10008000 	.word	0x10008000

0800b46c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b01      	cmp	r3, #1
 800b486:	d161      	bne.n	800b54c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b49a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b49e:	d11f      	bne.n	800b4e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	68fa      	ldr	r2, [r7, #12]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	43db      	mvns	r3, r3
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b500:	4013      	ands	r3, r2
 800b502:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50a:	69da      	ldr	r2, [r3, #28]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f003 030f 	and.w	r3, r3, #15
 800b514:	2101      	movs	r1, #1
 800b516:	fa01 f303 	lsl.w	r3, r1, r3
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	43db      	mvns	r3, r3
 800b51e:	68f9      	ldr	r1, [r7, #12]
 800b520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b524:	4013      	ands	r3, r2
 800b526:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	0159      	lsls	r1, r3, #5
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	440b      	add	r3, r1
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	4619      	mov	r1, r3
 800b544:	4b35      	ldr	r3, [pc, #212]	; (800b61c <USB_DeactivateEndpoint+0x1b0>)
 800b546:	4013      	ands	r3, r2
 800b548:	600b      	str	r3, [r1, #0]
 800b54a:	e060      	b.n	800b60e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b55e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b562:	d11f      	bne.n	800b5a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	015a      	lsls	r2, r3, #5
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	4413      	add	r3, r2
 800b56c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	68ba      	ldr	r2, [r7, #8]
 800b574:	0151      	lsls	r1, r2, #5
 800b576:	68fa      	ldr	r2, [r7, #12]
 800b578:	440a      	add	r2, r1
 800b57a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b57e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b582:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	015a      	lsls	r2, r3, #5
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	4413      	add	r3, r2
 800b58c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68ba      	ldr	r2, [r7, #8]
 800b594:	0151      	lsls	r1, r2, #5
 800b596:	68fa      	ldr	r2, [r7, #12]
 800b598:	440a      	add	r2, r1
 800b59a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b59e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	f003 030f 	and.w	r3, r3, #15
 800b5b4:	2101      	movs	r1, #1
 800b5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ba:	041b      	lsls	r3, r3, #16
 800b5bc:	43db      	mvns	r3, r3
 800b5be:	68f9      	ldr	r1, [r7, #12]
 800b5c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5c4:	4013      	ands	r3, r2
 800b5c6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ce:	69da      	ldr	r2, [r3, #28]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	2101      	movs	r1, #1
 800b5da:	fa01 f303 	lsl.w	r3, r1, r3
 800b5de:	041b      	lsls	r3, r3, #16
 800b5e0:	43db      	mvns	r3, r3
 800b5e2:	68f9      	ldr	r1, [r7, #12]
 800b5e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	015a      	lsls	r2, r3, #5
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	0159      	lsls	r1, r3, #5
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	440b      	add	r3, r1
 800b602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b606:	4619      	mov	r1, r3
 800b608:	4b05      	ldr	r3, [pc, #20]	; (800b620 <USB_DeactivateEndpoint+0x1b4>)
 800b60a:	4013      	ands	r3, r2
 800b60c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr
 800b61c:	ec337800 	.word	0xec337800
 800b620:	eff37800 	.word	0xeff37800

0800b624 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	; 0x28
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	4613      	mov	r3, r2
 800b630:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	785b      	ldrb	r3, [r3, #1]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f040 8181 	bne.w	800b948 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d132      	bne.n	800b6b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	691a      	ldr	r2, [r3, #16]
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	0159      	lsls	r1, r3, #5
 800b660:	69fb      	ldr	r3, [r7, #28]
 800b662:	440b      	add	r3, r1
 800b664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b668:	4619      	mov	r1, r3
 800b66a:	4ba5      	ldr	r3, [pc, #660]	; (800b900 <USB_EPStartXfer+0x2dc>)
 800b66c:	4013      	ands	r3, r2
 800b66e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	015a      	lsls	r2, r3, #5
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67c:	691b      	ldr	r3, [r3, #16]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	0151      	lsls	r1, r2, #5
 800b682:	69fa      	ldr	r2, [r7, #28]
 800b684:	440a      	add	r2, r1
 800b686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b68a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b68e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69c:	691a      	ldr	r2, [r3, #16]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	0159      	lsls	r1, r3, #5
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	440b      	add	r3, r1
 800b6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	4b95      	ldr	r3, [pc, #596]	; (800b904 <USB_EPStartXfer+0x2e0>)
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	610b      	str	r3, [r1, #16]
 800b6b2:	e092      	b.n	800b7da <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	015a      	lsls	r2, r3, #5
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6c0:	691a      	ldr	r2, [r3, #16]
 800b6c2:	69bb      	ldr	r3, [r7, #24]
 800b6c4:	0159      	lsls	r1, r3, #5
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	440b      	add	r3, r1
 800b6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	4b8c      	ldr	r3, [pc, #560]	; (800b904 <USB_EPStartXfer+0x2e0>)
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	69bb      	ldr	r3, [r7, #24]
 800b6e6:	0159      	lsls	r1, r3, #5
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	440b      	add	r3, r1
 800b6ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f0:	4619      	mov	r1, r3
 800b6f2:	4b83      	ldr	r3, [pc, #524]	; (800b900 <USB_EPStartXfer+0x2dc>)
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b6f8:	69bb      	ldr	r3, [r7, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d11a      	bne.n	800b734 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	691a      	ldr	r2, [r3, #16]
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	429a      	cmp	r2, r3
 800b708:	d903      	bls.n	800b712 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	689a      	ldr	r2, [r3, #8]
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	69ba      	ldr	r2, [r7, #24]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	69fa      	ldr	r2, [r7, #28]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b730:	6113      	str	r3, [r2, #16]
 800b732:	e01b      	b.n	800b76c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b740:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	6919      	ldr	r1, [r3, #16]
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	440b      	add	r3, r1
 800b74c:	1e59      	subs	r1, r3, #1
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	689b      	ldr	r3, [r3, #8]
 800b752:	fbb1 f3f3 	udiv	r3, r1, r3
 800b756:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b758:	4b6b      	ldr	r3, [pc, #428]	; (800b908 <USB_EPStartXfer+0x2e4>)
 800b75a:	400b      	ands	r3, r1
 800b75c:	69b9      	ldr	r1, [r7, #24]
 800b75e:	0148      	lsls	r0, r1, #5
 800b760:	69f9      	ldr	r1, [r7, #28]
 800b762:	4401      	add	r1, r0
 800b764:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b768:	4313      	orrs	r3, r2
 800b76a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	69fb      	ldr	r3, [r7, #28]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	691a      	ldr	r2, [r3, #16]
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	691b      	ldr	r3, [r3, #16]
 800b77e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b782:	69b9      	ldr	r1, [r7, #24]
 800b784:	0148      	lsls	r0, r1, #5
 800b786:	69f9      	ldr	r1, [r7, #28]
 800b788:	4401      	add	r1, r0
 800b78a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b78e:	4313      	orrs	r3, r2
 800b790:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	791b      	ldrb	r3, [r3, #4]
 800b796:	2b01      	cmp	r3, #1
 800b798:	d11f      	bne.n	800b7da <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	015a      	lsls	r2, r3, #5
 800b79e:	69fb      	ldr	r3, [r7, #28]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	0151      	lsls	r1, r2, #5
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	440a      	add	r2, r1
 800b7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b7b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	69ba      	ldr	r2, [r7, #24]
 800b7ca:	0151      	lsls	r1, r2, #5
 800b7cc:	69fa      	ldr	r2, [r7, #28]
 800b7ce:	440a      	add	r2, r1
 800b7d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d14b      	bne.n	800b878 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	69db      	ldr	r3, [r3, #28]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d009      	beq.n	800b7fc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	69db      	ldr	r3, [r3, #28]
 800b7fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	791b      	ldrb	r3, [r3, #4]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d128      	bne.n	800b856 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b810:	2b00      	cmp	r3, #0
 800b812:	d110      	bne.n	800b836 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	69ba      	ldr	r2, [r7, #24]
 800b824:	0151      	lsls	r1, r2, #5
 800b826:	69fa      	ldr	r2, [r7, #28]
 800b828:	440a      	add	r2, r1
 800b82a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b82e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	e00f      	b.n	800b856 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	015a      	lsls	r2, r3, #5
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	4413      	add	r3, r2
 800b83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	0151      	lsls	r1, r2, #5
 800b848:	69fa      	ldr	r2, [r7, #28]
 800b84a:	440a      	add	r2, r1
 800b84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b854:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	015a      	lsls	r2, r3, #5
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	4413      	add	r3, r2
 800b85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	69ba      	ldr	r2, [r7, #24]
 800b866:	0151      	lsls	r1, r2, #5
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	440a      	add	r2, r1
 800b86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	e16a      	b.n	800bb4e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b878:	69bb      	ldr	r3, [r7, #24]
 800b87a:	015a      	lsls	r2, r3, #5
 800b87c:	69fb      	ldr	r3, [r7, #28]
 800b87e:	4413      	add	r3, r2
 800b880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	69ba      	ldr	r2, [r7, #24]
 800b888:	0151      	lsls	r1, r2, #5
 800b88a:	69fa      	ldr	r2, [r7, #28]
 800b88c:	440a      	add	r2, r1
 800b88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b896:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	791b      	ldrb	r3, [r3, #4]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d015      	beq.n	800b8cc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	f000 8152 	beq.w	800bb4e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	781b      	ldrb	r3, [r3, #0]
 800b8b6:	f003 030f 	and.w	r3, r3, #15
 800b8ba:	2101      	movs	r1, #1
 800b8bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b8c0:	69f9      	ldr	r1, [r7, #28]
 800b8c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	634b      	str	r3, [r1, #52]	; 0x34
 800b8ca:	e140      	b.n	800bb4e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d117      	bne.n	800b90c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	015a      	lsls	r2, r3, #5
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	69ba      	ldr	r2, [r7, #24]
 800b8ec:	0151      	lsls	r1, r2, #5
 800b8ee:	69fa      	ldr	r2, [r7, #28]
 800b8f0:	440a      	add	r2, r1
 800b8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b8fa:	6013      	str	r3, [r2, #0]
 800b8fc:	e016      	b.n	800b92c <USB_EPStartXfer+0x308>
 800b8fe:	bf00      	nop
 800b900:	e007ffff 	.word	0xe007ffff
 800b904:	fff80000 	.word	0xfff80000
 800b908:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	69fb      	ldr	r3, [r7, #28]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	0151      	lsls	r1, r2, #5
 800b91e:	69fa      	ldr	r2, [r7, #28]
 800b920:	440a      	add	r2, r1
 800b922:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b92a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	68d9      	ldr	r1, [r3, #12]
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	781a      	ldrb	r2, [r3, #0]
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	b298      	uxth	r0, r3
 800b93a:	79fb      	ldrb	r3, [r7, #7]
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	4603      	mov	r3, r0
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f9b9 	bl	800bcb8 <USB_WritePacket>
 800b946:	e102      	b.n	800bb4e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b954:	691a      	ldr	r2, [r3, #16]
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	0159      	lsls	r1, r3, #5
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	440b      	add	r3, r1
 800b95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b962:	4619      	mov	r1, r3
 800b964:	4b7c      	ldr	r3, [pc, #496]	; (800bb58 <USB_EPStartXfer+0x534>)
 800b966:	4013      	ands	r3, r2
 800b968:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	0159      	lsls	r1, r3, #5
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	440b      	add	r3, r1
 800b980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b984:	4619      	mov	r1, r3
 800b986:	4b75      	ldr	r3, [pc, #468]	; (800bb5c <USB_EPStartXfer+0x538>)
 800b988:	4013      	ands	r3, r2
 800b98a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d12f      	bne.n	800b9f2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	689a      	ldr	r2, [r3, #8]
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	689a      	ldr	r2, [r3, #8]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	015a      	lsls	r2, r3, #5
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	4413      	add	r3, r2
 800b9b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b6:	691a      	ldr	r2, [r3, #16]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9c0:	69b9      	ldr	r1, [r7, #24]
 800b9c2:	0148      	lsls	r0, r1, #5
 800b9c4:	69f9      	ldr	r1, [r7, #28]
 800b9c6:	4401      	add	r1, r0
 800b9c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	69ba      	ldr	r2, [r7, #24]
 800b9e0:	0151      	lsls	r1, r2, #5
 800b9e2:	69fa      	ldr	r2, [r7, #28]
 800b9e4:	440a      	add	r2, r1
 800b9e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ee:	6113      	str	r3, [r2, #16]
 800b9f0:	e05f      	b.n	800bab2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d123      	bne.n	800ba42 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba10:	69b9      	ldr	r1, [r7, #24]
 800ba12:	0148      	lsls	r0, r1, #5
 800ba14:	69f9      	ldr	r1, [r7, #28]
 800ba16:	4401      	add	r1, r0
 800ba18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	69fa      	ldr	r2, [r7, #28]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba3e:	6113      	str	r3, [r2, #16]
 800ba40:	e037      	b.n	800bab2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	691a      	ldr	r2, [r3, #16]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	4413      	add	r3, r2
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba56:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	8afa      	ldrh	r2, [r7, #22]
 800ba5e:	fb03 f202 	mul.w	r2, r3, r2
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	015a      	lsls	r2, r3, #5
 800ba6a:	69fb      	ldr	r3, [r7, #28]
 800ba6c:	4413      	add	r3, r2
 800ba6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba72:	691a      	ldr	r2, [r3, #16]
 800ba74:	8afb      	ldrh	r3, [r7, #22]
 800ba76:	04d9      	lsls	r1, r3, #19
 800ba78:	4b39      	ldr	r3, [pc, #228]	; (800bb60 <USB_EPStartXfer+0x53c>)
 800ba7a:	400b      	ands	r3, r1
 800ba7c:	69b9      	ldr	r1, [r7, #24]
 800ba7e:	0148      	lsls	r0, r1, #5
 800ba80:	69f9      	ldr	r1, [r7, #28]
 800ba82:	4401      	add	r1, r0
 800ba84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba98:	691a      	ldr	r2, [r3, #16]
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baa2:	69b9      	ldr	r1, [r7, #24]
 800baa4:	0148      	lsls	r0, r1, #5
 800baa6:	69f9      	ldr	r1, [r7, #28]
 800baa8:	4401      	add	r1, r0
 800baaa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800baae:	4313      	orrs	r3, r2
 800bab0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d10d      	bne.n	800bad4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d009      	beq.n	800bad4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	68d9      	ldr	r1, [r3, #12]
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	69fb      	ldr	r3, [r7, #28]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad0:	460a      	mov	r2, r1
 800bad2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	791b      	ldrb	r3, [r3, #4]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d128      	bne.n	800bb2e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d110      	bne.n	800bb0e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	0151      	lsls	r1, r2, #5
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	440a      	add	r2, r1
 800bb02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb0a:	6013      	str	r3, [r2, #0]
 800bb0c:	e00f      	b.n	800bb2e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	69ba      	ldr	r2, [r7, #24]
 800bb1e:	0151      	lsls	r1, r2, #5
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	440a      	add	r2, r1
 800bb24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb2c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	015a      	lsls	r2, r3, #5
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	0151      	lsls	r1, r2, #5
 800bb40:	69fa      	ldr	r2, [r7, #28]
 800bb42:	440a      	add	r2, r1
 800bb44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3720      	adds	r7, #32
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	fff80000 	.word	0xfff80000
 800bb5c:	e007ffff 	.word	0xe007ffff
 800bb60:	1ff80000 	.word	0x1ff80000

0800bb64 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b087      	sub	sp, #28
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	785b      	ldrb	r3, [r3, #1]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d14a      	bne.n	800bc18 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb9a:	f040 8086 	bne.w	800bcaa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	683a      	ldr	r2, [r7, #0]
 800bbb0:	7812      	ldrb	r2, [r2, #0]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbbc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbc0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	683a      	ldr	r2, [r7, #0]
 800bbd4:	7812      	ldrb	r2, [r2, #0]
 800bbd6:	0151      	lsls	r1, r2, #5
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	440a      	add	r2, r1
 800bbdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbe0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbe4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3301      	adds	r3, #1
 800bbea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f242 7210 	movw	r2, #10000	; 0x2710
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d902      	bls.n	800bbfc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	75fb      	strb	r3, [r7, #23]
          break;
 800bbfa:	e056      	b.n	800bcaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc14:	d0e7      	beq.n	800bbe6 <USB_EPStopXfer+0x82>
 800bc16:	e048      	b.n	800bcaa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	015a      	lsls	r2, r3, #5
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	4413      	add	r3, r2
 800bc22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc30:	d13b      	bne.n	800bcaa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	015a      	lsls	r2, r3, #5
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	7812      	ldrb	r2, [r2, #0]
 800bc46:	0151      	lsls	r1, r2, #5
 800bc48:	693a      	ldr	r2, [r7, #16]
 800bc4a:	440a      	add	r2, r1
 800bc4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc54:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	015a      	lsls	r2, r3, #5
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	4413      	add	r3, r2
 800bc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	7812      	ldrb	r2, [r2, #0]
 800bc6a:	0151      	lsls	r1, r2, #5
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	440a      	add	r2, r1
 800bc70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d902      	bls.n	800bc90 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	75fb      	strb	r3, [r7, #23]
          break;
 800bc8e:	e00c      	b.n	800bcaa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	015a      	lsls	r2, r3, #5
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	4413      	add	r3, r2
 800bc9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bca8:	d0e7      	beq.n	800bc7a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	371c      	adds	r7, #28
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b089      	sub	sp, #36	; 0x24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	4611      	mov	r1, r2
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	71fb      	strb	r3, [r7, #7]
 800bcca:	4613      	mov	r3, r2
 800bccc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bcd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d123      	bne.n	800bd26 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bcde:	88bb      	ldrh	r3, [r7, #4]
 800bce0:	3303      	adds	r3, #3
 800bce2:	089b      	lsrs	r3, r3, #2
 800bce4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bce6:	2300      	movs	r3, #0
 800bce8:	61bb      	str	r3, [r7, #24]
 800bcea:	e018      	b.n	800bd1e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bcec:	79fb      	ldrb	r3, [r7, #7]
 800bcee:	031a      	lsls	r2, r3, #12
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	3301      	adds	r3, #1
 800bd04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd06:	69fb      	ldr	r3, [r7, #28]
 800bd08:	3301      	adds	r3, #1
 800bd0a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	3301      	adds	r3, #1
 800bd16:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd18:	69bb      	ldr	r3, [r7, #24]
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	61bb      	str	r3, [r7, #24]
 800bd1e:	69ba      	ldr	r2, [r7, #24]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d3e2      	bcc.n	800bcec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd26:	2300      	movs	r3, #0
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3724      	adds	r7, #36	; 0x24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b08b      	sub	sp, #44	; 0x2c
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	4613      	mov	r3, r2
 800bd40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	089b      	lsrs	r3, r3, #2
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bd52:	88fb      	ldrh	r3, [r7, #6]
 800bd54:	f003 0303 	and.w	r3, r3, #3
 800bd58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	623b      	str	r3, [r7, #32]
 800bd5e:	e014      	b.n	800bd8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bd60:	69bb      	ldr	r3, [r7, #24]
 800bd62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6a:	601a      	str	r2, [r3, #0]
    pDest++;
 800bd6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6e:	3301      	adds	r3, #1
 800bd70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd74:	3301      	adds	r3, #1
 800bd76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	3301      	adds	r3, #1
 800bd7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd80:	3301      	adds	r3, #1
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bd84:	6a3b      	ldr	r3, [r7, #32]
 800bd86:	3301      	adds	r3, #1
 800bd88:	623b      	str	r3, [r7, #32]
 800bd8a:	6a3a      	ldr	r2, [r7, #32]
 800bd8c:	697b      	ldr	r3, [r7, #20]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d3e6      	bcc.n	800bd60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bd92:	8bfb      	ldrh	r3, [r7, #30]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d01e      	beq.n	800bdd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bd9c:	69bb      	ldr	r3, [r7, #24]
 800bd9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bda2:	461a      	mov	r2, r3
 800bda4:	f107 0310 	add.w	r3, r7, #16
 800bda8:	6812      	ldr	r2, [r2, #0]
 800bdaa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	b2db      	uxtb	r3, r3
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	fa22 f303 	lsr.w	r3, r2, r3
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	701a      	strb	r2, [r3, #0]
      i++;
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	623b      	str	r3, [r7, #32]
      pDest++;
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bdca:	8bfb      	ldrh	r3, [r7, #30]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bdd0:	8bfb      	ldrh	r3, [r7, #30]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1ea      	bne.n	800bdac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	372c      	adds	r7, #44	; 0x2c
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	785b      	ldrb	r3, [r3, #1]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d12c      	bne.n	800be5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	db12      	blt.n	800be38 <USB_EPSetStall+0x54>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00f      	beq.n	800be38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	015a      	lsls	r2, r3, #5
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	4413      	add	r3, r2
 800be20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68ba      	ldr	r2, [r7, #8]
 800be28:	0151      	lsls	r1, r2, #5
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	440a      	add	r2, r1
 800be2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	0151      	lsls	r1, r2, #5
 800be4a:	68fa      	ldr	r2, [r7, #12]
 800be4c:	440a      	add	r2, r1
 800be4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	e02b      	b.n	800beb2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	db12      	blt.n	800be92 <USB_EPSetStall+0xae>
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00f      	beq.n	800be92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	015a      	lsls	r2, r3, #5
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	4413      	add	r3, r2
 800be7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	68ba      	ldr	r2, [r7, #8]
 800be82:	0151      	lsls	r1, r2, #5
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	440a      	add	r2, r1
 800be88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800be92:	68bb      	ldr	r3, [r7, #8]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	0151      	lsls	r1, r2, #5
 800bea4:	68fa      	ldr	r2, [r7, #12]
 800bea6:	440a      	add	r2, r1
 800bea8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800beb0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b085      	sub	sp, #20
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
 800bec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	785b      	ldrb	r3, [r3, #1]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d128      	bne.n	800bf2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	015a      	lsls	r2, r3, #5
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68ba      	ldr	r2, [r7, #8]
 800beec:	0151      	lsls	r1, r2, #5
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	440a      	add	r2, r1
 800bef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800befa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	791b      	ldrb	r3, [r3, #4]
 800bf00:	2b03      	cmp	r3, #3
 800bf02:	d003      	beq.n	800bf0c <USB_EPClearStall+0x4c>
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	791b      	ldrb	r3, [r3, #4]
 800bf08:	2b02      	cmp	r3, #2
 800bf0a:	d138      	bne.n	800bf7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	015a      	lsls	r2, r3, #5
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	4413      	add	r3, r2
 800bf14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	68ba      	ldr	r2, [r7, #8]
 800bf1c:	0151      	lsls	r1, r2, #5
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	440a      	add	r2, r1
 800bf22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf2a:	6013      	str	r3, [r2, #0]
 800bf2c:	e027      	b.n	800bf7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	015a      	lsls	r2, r3, #5
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	4413      	add	r3, r2
 800bf36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	0151      	lsls	r1, r2, #5
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	440a      	add	r2, r1
 800bf44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	791b      	ldrb	r3, [r3, #4]
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d003      	beq.n	800bf5e <USB_EPClearStall+0x9e>
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	791b      	ldrb	r3, [r3, #4]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d10f      	bne.n	800bf7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	0151      	lsls	r1, r2, #5
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	440a      	add	r2, r1
 800bf74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bf7e:	2300      	movs	r3, #0
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3714      	adds	r7, #20
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	460b      	mov	r3, r1
 800bf96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68fa      	ldr	r2, [r7, #12]
 800bfa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bfae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	78fb      	ldrb	r3, [r7, #3]
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bfc0:	68f9      	ldr	r1, [r7, #12]
 800bfc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bff2:	f023 0303 	bic.w	r3, r3, #3
 800bff6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c006:	f023 0302 	bic.w	r3, r3, #2
 800c00a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c00c:	2300      	movs	r3, #0
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b085      	sub	sp, #20
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c034:	f023 0303 	bic.w	r3, r3, #3
 800c038:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	699b      	ldr	r3, [r3, #24]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	4013      	ands	r3, r2
 800c072:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c074:	68fb      	ldr	r3, [r7, #12]
}
 800c076:	4618      	mov	r0, r3
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c082:	b480      	push	{r7}
 800c084:	b085      	sub	sp, #20
 800c086:	af00      	add	r7, sp, #0
 800c088:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c094:	699b      	ldr	r3, [r3, #24]
 800c096:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c09e:	69db      	ldr	r3, [r3, #28]
 800c0a0:	68ba      	ldr	r2, [r7, #8]
 800c0a2:	4013      	ands	r3, r2
 800c0a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	0c1b      	lsrs	r3, r3, #16
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3714      	adds	r7, #20
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr

0800c0b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0b6:	b480      	push	{r7}
 800c0b8:	b085      	sub	sp, #20
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c8:	699b      	ldr	r3, [r3, #24]
 800c0ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d2:	69db      	ldr	r3, [r3, #28]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	b29b      	uxth	r3, r3
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0ea:	b480      	push	{r7}
 800c0ec:	b085      	sub	sp, #20
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c0fa:	78fb      	ldrb	r3, [r7, #3]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	4013      	ands	r3, r2
 800c116:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c118:	68bb      	ldr	r3, [r7, #8]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3714      	adds	r7, #20
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c126:	b480      	push	{r7}
 800c128:	b087      	sub	sp, #28
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	460b      	mov	r3, r1
 800c130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c13c:	691b      	ldr	r3, [r3, #16]
 800c13e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c140:	697b      	ldr	r3, [r7, #20]
 800c142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c148:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	f003 030f 	and.w	r3, r3, #15
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	fa22 f303 	lsr.w	r3, r2, r3
 800c156:	01db      	lsls	r3, r3, #7
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4313      	orrs	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c160:	78fb      	ldrb	r3, [r7, #3]
 800c162:	015a      	lsls	r2, r3, #5
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	4413      	add	r3, r2
 800c168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16c:	689b      	ldr	r3, [r3, #8]
 800c16e:	693a      	ldr	r2, [r7, #16]
 800c170:	4013      	ands	r3, r2
 800c172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c174:	68bb      	ldr	r3, [r7, #8]
}
 800c176:	4618      	mov	r0, r3
 800c178:	371c      	adds	r7, #28
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c182:	b480      	push	{r7}
 800c184:	b083      	sub	sp, #12
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	f003 0301 	and.w	r3, r3, #1
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
	...

0800c1a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b085      	sub	sp, #20
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4b09      	ldr	r3, [pc, #36]	; (800c1e4 <USB_ActivateSetup+0x44>)
 800c1be:	4013      	ands	r3, r2
 800c1c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3714      	adds	r7, #20
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr
 800c1e4:	fffff800 	.word	0xfffff800

0800c1e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	607a      	str	r2, [r7, #4]
 800c1f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	333c      	adds	r3, #60	; 0x3c
 800c1fe:	3304      	adds	r3, #4
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	4a26      	ldr	r2, [pc, #152]	; (800c2a0 <USB_EP0_OutStart+0xb8>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d90a      	bls.n	800c222 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c218:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c21c:	d101      	bne.n	800c222 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	e037      	b.n	800c292 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c228:	461a      	mov	r2, r3
 800c22a:	2300      	movs	r3, #0
 800c22c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	697a      	ldr	r2, [r7, #20]
 800c238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c23c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c240:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c248:	691b      	ldr	r3, [r3, #16]
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c250:	f043 0318 	orr.w	r3, r3, #24
 800c254:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c25c:	691b      	ldr	r3, [r3, #16]
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c264:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c268:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c26a:	7afb      	ldrb	r3, [r7, #11]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d10f      	bne.n	800c290 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c276:	461a      	mov	r2, r3
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c28e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	371c      	adds	r7, #28
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	4f54300a 	.word	0x4f54300a

0800c2a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b085      	sub	sp, #20
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	3301      	adds	r3, #1
 800c2b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	4a13      	ldr	r2, [pc, #76]	; (800c308 <USB_CoreReset+0x64>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d901      	bls.n	800c2c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c2be:	2303      	movs	r3, #3
 800c2c0:	e01b      	b.n	800c2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	daf2      	bge.n	800c2b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	f043 0201 	orr.w	r2, r3, #1
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	4a09      	ldr	r2, [pc, #36]	; (800c308 <USB_CoreReset+0x64>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d901      	bls.n	800c2ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c2e8:	2303      	movs	r3, #3
 800c2ea:	e006      	b.n	800c2fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	f003 0301 	and.w	r3, r3, #1
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d0f0      	beq.n	800c2da <USB_CoreReset+0x36>

  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3714      	adds	r7, #20
 800c2fe:	46bd      	mov	sp, r7
 800c300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	00030d40 	.word	0x00030d40

0800c30c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
 800c314:	460b      	mov	r3, r1
 800c316:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c318:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c31c:	f002 fd58 	bl	800edd0 <USBD_static_malloc>
 800c320:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d109      	bne.n	800c33c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	32b0      	adds	r2, #176	; 0xb0
 800c332:	2100      	movs	r1, #0
 800c334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c338:	2302      	movs	r3, #2
 800c33a:	e0d4      	b.n	800c4e6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c33c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c340:	2100      	movs	r1, #0
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f003 fb65 	bl	800fa12 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	32b0      	adds	r2, #176	; 0xb0
 800c352:	68f9      	ldr	r1, [r7, #12]
 800c354:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	32b0      	adds	r2, #176	; 0xb0
 800c362:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	7c1b      	ldrb	r3, [r3, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d138      	bne.n	800c3e6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c374:	4b5e      	ldr	r3, [pc, #376]	; (800c4f0 <USBD_CDC_Init+0x1e4>)
 800c376:	7819      	ldrb	r1, [r3, #0]
 800c378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c37c:	2202      	movs	r2, #2
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f002 fc03 	bl	800eb8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c384:	4b5a      	ldr	r3, [pc, #360]	; (800c4f0 <USBD_CDC_Init+0x1e4>)
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	f003 020f 	and.w	r2, r3, #15
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	4613      	mov	r3, r2
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	4413      	add	r3, r2
 800c394:	009b      	lsls	r3, r3, #2
 800c396:	440b      	add	r3, r1
 800c398:	3324      	adds	r3, #36	; 0x24
 800c39a:	2201      	movs	r2, #1
 800c39c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c39e:	4b55      	ldr	r3, [pc, #340]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c3a0:	7819      	ldrb	r1, [r3, #0]
 800c3a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f002 fbee 	bl	800eb8a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3ae:	4b51      	ldr	r3, [pc, #324]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	f003 020f 	and.w	r2, r3, #15
 800c3b6:	6879      	ldr	r1, [r7, #4]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	009b      	lsls	r3, r3, #2
 800c3c0:	440b      	add	r3, r1
 800c3c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c3ca:	4b4b      	ldr	r3, [pc, #300]	; (800c4f8 <USBD_CDC_Init+0x1ec>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	f003 020f 	and.w	r2, r3, #15
 800c3d2:	6879      	ldr	r1, [r7, #4]
 800c3d4:	4613      	mov	r3, r2
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	4413      	add	r3, r2
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	440b      	add	r3, r1
 800c3de:	3326      	adds	r3, #38	; 0x26
 800c3e0:	2210      	movs	r2, #16
 800c3e2:	801a      	strh	r2, [r3, #0]
 800c3e4:	e035      	b.n	800c452 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3e6:	4b42      	ldr	r3, [pc, #264]	; (800c4f0 <USBD_CDC_Init+0x1e4>)
 800c3e8:	7819      	ldrb	r1, [r3, #0]
 800c3ea:	2340      	movs	r3, #64	; 0x40
 800c3ec:	2202      	movs	r2, #2
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f002 fbcb 	bl	800eb8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c3f4:	4b3e      	ldr	r3, [pc, #248]	; (800c4f0 <USBD_CDC_Init+0x1e4>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	f003 020f 	and.w	r2, r3, #15
 800c3fc:	6879      	ldr	r1, [r7, #4]
 800c3fe:	4613      	mov	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	4413      	add	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	440b      	add	r3, r1
 800c408:	3324      	adds	r3, #36	; 0x24
 800c40a:	2201      	movs	r2, #1
 800c40c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c40e:	4b39      	ldr	r3, [pc, #228]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c410:	7819      	ldrb	r1, [r3, #0]
 800c412:	2340      	movs	r3, #64	; 0x40
 800c414:	2202      	movs	r2, #2
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f002 fbb7 	bl	800eb8a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c41c:	4b35      	ldr	r3, [pc, #212]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	f003 020f 	and.w	r2, r3, #15
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	440b      	add	r3, r1
 800c430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c434:	2201      	movs	r2, #1
 800c436:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c438:	4b2f      	ldr	r3, [pc, #188]	; (800c4f8 <USBD_CDC_Init+0x1ec>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	f003 020f 	and.w	r2, r3, #15
 800c440:	6879      	ldr	r1, [r7, #4]
 800c442:	4613      	mov	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	440b      	add	r3, r1
 800c44c:	3326      	adds	r3, #38	; 0x26
 800c44e:	2210      	movs	r2, #16
 800c450:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c452:	4b29      	ldr	r3, [pc, #164]	; (800c4f8 <USBD_CDC_Init+0x1ec>)
 800c454:	7819      	ldrb	r1, [r3, #0]
 800c456:	2308      	movs	r3, #8
 800c458:	2203      	movs	r2, #3
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f002 fb95 	bl	800eb8a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c460:	4b25      	ldr	r3, [pc, #148]	; (800c4f8 <USBD_CDC_Init+0x1ec>)
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	f003 020f 	and.w	r2, r3, #15
 800c468:	6879      	ldr	r1, [r7, #4]
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	440b      	add	r3, r1
 800c474:	3324      	adds	r3, #36	; 0x24
 800c476:	2201      	movs	r2, #1
 800c478:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	33b0      	adds	r3, #176	; 0xb0
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2200      	movs	r2, #0
 800c49a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c4b0:	2302      	movs	r3, #2
 800c4b2:	e018      	b.n	800c4e6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7c1b      	ldrb	r3, [r3, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d10a      	bne.n	800c4d2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4bc:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c4be:	7819      	ldrb	r1, [r3, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f002 fc4c 	bl	800ed68 <USBD_LL_PrepareReceive>
 800c4d0:	e008      	b.n	800c4e4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4d2:	4b08      	ldr	r3, [pc, #32]	; (800c4f4 <USBD_CDC_Init+0x1e8>)
 800c4d4:	7819      	ldrb	r1, [r3, #0]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c4dc:	2340      	movs	r3, #64	; 0x40
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f002 fc42 	bl	800ed68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	240000a7 	.word	0x240000a7
 800c4f4:	240000a8 	.word	0x240000a8
 800c4f8:	240000a9 	.word	0x240000a9

0800c4fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
 800c504:	460b      	mov	r3, r1
 800c506:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c508:	4b3a      	ldr	r3, [pc, #232]	; (800c5f4 <USBD_CDC_DeInit+0xf8>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	4619      	mov	r1, r3
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f002 fb61 	bl	800ebd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c514:	4b37      	ldr	r3, [pc, #220]	; (800c5f4 <USBD_CDC_DeInit+0xf8>)
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	f003 020f 	and.w	r2, r3, #15
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	4613      	mov	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	4413      	add	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	440b      	add	r3, r1
 800c528:	3324      	adds	r3, #36	; 0x24
 800c52a:	2200      	movs	r2, #0
 800c52c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c52e:	4b32      	ldr	r3, [pc, #200]	; (800c5f8 <USBD_CDC_DeInit+0xfc>)
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	4619      	mov	r1, r3
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f002 fb4e 	bl	800ebd6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c53a:	4b2f      	ldr	r3, [pc, #188]	; (800c5f8 <USBD_CDC_DeInit+0xfc>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	f003 020f 	and.w	r2, r3, #15
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	4613      	mov	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	440b      	add	r3, r1
 800c54e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c552:	2200      	movs	r2, #0
 800c554:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c556:	4b29      	ldr	r3, [pc, #164]	; (800c5fc <USBD_CDC_DeInit+0x100>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f002 fb3a 	bl	800ebd6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c562:	4b26      	ldr	r3, [pc, #152]	; (800c5fc <USBD_CDC_DeInit+0x100>)
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	f003 020f 	and.w	r2, r3, #15
 800c56a:	6879      	ldr	r1, [r7, #4]
 800c56c:	4613      	mov	r3, r2
 800c56e:	009b      	lsls	r3, r3, #2
 800c570:	4413      	add	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	440b      	add	r3, r1
 800c576:	3324      	adds	r3, #36	; 0x24
 800c578:	2200      	movs	r2, #0
 800c57a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c57c:	4b1f      	ldr	r3, [pc, #124]	; (800c5fc <USBD_CDC_DeInit+0x100>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	f003 020f 	and.w	r2, r3, #15
 800c584:	6879      	ldr	r1, [r7, #4]
 800c586:	4613      	mov	r3, r2
 800c588:	009b      	lsls	r3, r3, #2
 800c58a:	4413      	add	r3, r2
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	440b      	add	r3, r1
 800c590:	3326      	adds	r3, #38	; 0x26
 800c592:	2200      	movs	r2, #0
 800c594:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	32b0      	adds	r2, #176	; 0xb0
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01f      	beq.n	800c5e8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	33b0      	adds	r3, #176	; 0xb0
 800c5b2:	009b      	lsls	r3, r3, #2
 800c5b4:	4413      	add	r3, r2
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	685b      	ldr	r3, [r3, #4]
 800c5ba:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	32b0      	adds	r2, #176	; 0xb0
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f002 fc0e 	bl	800edec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	32b0      	adds	r2, #176	; 0xb0
 800c5da:	2100      	movs	r1, #0
 800c5dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3708      	adds	r7, #8
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	240000a7 	.word	0x240000a7
 800c5f8:	240000a8 	.word	0x240000a8
 800c5fc:	240000a9 	.word	0x240000a9

0800c600 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	32b0      	adds	r2, #176	; 0xb0
 800c614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c618:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c61e:	2300      	movs	r3, #0
 800c620:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d101      	bne.n	800c630 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c62c:	2303      	movs	r3, #3
 800c62e:	e0bf      	b.n	800c7b0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d050      	beq.n	800c6de <USBD_CDC_Setup+0xde>
 800c63c:	2b20      	cmp	r3, #32
 800c63e:	f040 80af 	bne.w	800c7a0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	88db      	ldrh	r3, [r3, #6]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d03a      	beq.n	800c6c0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	b25b      	sxtb	r3, r3
 800c650:	2b00      	cmp	r3, #0
 800c652:	da1b      	bge.n	800c68c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	33b0      	adds	r3, #176	; 0xb0
 800c65e:	009b      	lsls	r3, r3, #2
 800c660:	4413      	add	r3, r2
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c66a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c66c:	683a      	ldr	r2, [r7, #0]
 800c66e:	88d2      	ldrh	r2, [r2, #6]
 800c670:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	88db      	ldrh	r3, [r3, #6]
 800c676:	2b07      	cmp	r3, #7
 800c678:	bf28      	it	cs
 800c67a:	2307      	movcs	r3, #7
 800c67c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	89fa      	ldrh	r2, [r7, #14]
 800c682:	4619      	mov	r1, r3
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f001 fd89 	bl	800e19c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c68a:	e090      	b.n	800c7ae <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	785a      	ldrb	r2, [r3, #1]
 800c690:	693b      	ldr	r3, [r7, #16]
 800c692:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	88db      	ldrh	r3, [r3, #6]
 800c69a:	2b3f      	cmp	r3, #63	; 0x3f
 800c69c:	d803      	bhi.n	800c6a6 <USBD_CDC_Setup+0xa6>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	88db      	ldrh	r3, [r3, #6]
 800c6a2:	b2da      	uxtb	r2, r3
 800c6a4:	e000      	b.n	800c6a8 <USBD_CDC_Setup+0xa8>
 800c6a6:	2240      	movs	r2, #64	; 0x40
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6ae:	6939      	ldr	r1, [r7, #16]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c6b6:	461a      	mov	r2, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f001 fd9b 	bl	800e1f4 <USBD_CtlPrepareRx>
      break;
 800c6be:	e076      	b.n	800c7ae <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	33b0      	adds	r3, #176	; 0xb0
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	7850      	ldrb	r0, [r2, #1]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	4798      	blx	r3
      break;
 800c6dc:	e067      	b.n	800c7ae <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	785b      	ldrb	r3, [r3, #1]
 800c6e2:	2b0b      	cmp	r3, #11
 800c6e4:	d851      	bhi.n	800c78a <USBD_CDC_Setup+0x18a>
 800c6e6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ec <USBD_CDC_Setup+0xec>)
 800c6e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ec:	0800c71d 	.word	0x0800c71d
 800c6f0:	0800c799 	.word	0x0800c799
 800c6f4:	0800c78b 	.word	0x0800c78b
 800c6f8:	0800c78b 	.word	0x0800c78b
 800c6fc:	0800c78b 	.word	0x0800c78b
 800c700:	0800c78b 	.word	0x0800c78b
 800c704:	0800c78b 	.word	0x0800c78b
 800c708:	0800c78b 	.word	0x0800c78b
 800c70c:	0800c78b 	.word	0x0800c78b
 800c710:	0800c78b 	.word	0x0800c78b
 800c714:	0800c747 	.word	0x0800c747
 800c718:	0800c771 	.word	0x0800c771
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c722:	b2db      	uxtb	r3, r3
 800c724:	2b03      	cmp	r3, #3
 800c726:	d107      	bne.n	800c738 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c728:	f107 030a 	add.w	r3, r7, #10
 800c72c:	2202      	movs	r2, #2
 800c72e:	4619      	mov	r1, r3
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f001 fd33 	bl	800e19c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c736:	e032      	b.n	800c79e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c738:	6839      	ldr	r1, [r7, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f001 fcbd 	bl	800e0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800c740:	2303      	movs	r3, #3
 800c742:	75fb      	strb	r3, [r7, #23]
          break;
 800c744:	e02b      	b.n	800c79e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d107      	bne.n	800c762 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c752:	f107 030d 	add.w	r3, r7, #13
 800c756:	2201      	movs	r2, #1
 800c758:	4619      	mov	r1, r3
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f001 fd1e 	bl	800e19c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c760:	e01d      	b.n	800c79e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c762:	6839      	ldr	r1, [r7, #0]
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f001 fca8 	bl	800e0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800c76a:	2303      	movs	r3, #3
 800c76c:	75fb      	strb	r3, [r7, #23]
          break;
 800c76e:	e016      	b.n	800c79e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c776:	b2db      	uxtb	r3, r3
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d00f      	beq.n	800c79c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c77c:	6839      	ldr	r1, [r7, #0]
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 fc9b 	bl	800e0ba <USBD_CtlError>
            ret = USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c788:	e008      	b.n	800c79c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f001 fc94 	bl	800e0ba <USBD_CtlError>
          ret = USBD_FAIL;
 800c792:	2303      	movs	r3, #3
 800c794:	75fb      	strb	r3, [r7, #23]
          break;
 800c796:	e002      	b.n	800c79e <USBD_CDC_Setup+0x19e>
          break;
 800c798:	bf00      	nop
 800c79a:	e008      	b.n	800c7ae <USBD_CDC_Setup+0x1ae>
          break;
 800c79c:	bf00      	nop
      }
      break;
 800c79e:	e006      	b.n	800c7ae <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 fc89 	bl	800e0ba <USBD_CtlError>
      ret = USBD_FAIL;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c7ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3718      	adds	r7, #24
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}

0800c7b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b084      	sub	sp, #16
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	460b      	mov	r3, r1
 800c7c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c7ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	32b0      	adds	r2, #176	; 0xb0
 800c7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e065      	b.n	800c8ae <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	32b0      	adds	r2, #176	; 0xb0
 800c7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c7f2:	78fb      	ldrb	r3, [r7, #3]
 800c7f4:	f003 020f 	and.w	r2, r3, #15
 800c7f8:	6879      	ldr	r1, [r7, #4]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	440b      	add	r3, r1
 800c804:	3318      	adds	r3, #24
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d02f      	beq.n	800c86c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c80c:	78fb      	ldrb	r3, [r7, #3]
 800c80e:	f003 020f 	and.w	r2, r3, #15
 800c812:	6879      	ldr	r1, [r7, #4]
 800c814:	4613      	mov	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	440b      	add	r3, r1
 800c81e:	3318      	adds	r3, #24
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	78fb      	ldrb	r3, [r7, #3]
 800c824:	f003 010f 	and.w	r1, r3, #15
 800c828:	68f8      	ldr	r0, [r7, #12]
 800c82a:	460b      	mov	r3, r1
 800c82c:	00db      	lsls	r3, r3, #3
 800c82e:	440b      	add	r3, r1
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	4403      	add	r3, r0
 800c834:	3344      	adds	r3, #68	; 0x44
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	fbb2 f1f3 	udiv	r1, r2, r3
 800c83c:	fb01 f303 	mul.w	r3, r1, r3
 800c840:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c842:	2b00      	cmp	r3, #0
 800c844:	d112      	bne.n	800c86c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c846:	78fb      	ldrb	r3, [r7, #3]
 800c848:	f003 020f 	and.w	r2, r3, #15
 800c84c:	6879      	ldr	r1, [r7, #4]
 800c84e:	4613      	mov	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4413      	add	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	440b      	add	r3, r1
 800c858:	3318      	adds	r3, #24
 800c85a:	2200      	movs	r2, #0
 800c85c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c85e:	78f9      	ldrb	r1, [r7, #3]
 800c860:	2300      	movs	r3, #0
 800c862:	2200      	movs	r2, #0
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f002 fa5e 	bl	800ed26 <USBD_LL_Transmit>
 800c86a:	e01f      	b.n	800c8ac <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	33b0      	adds	r3, #176	; 0xb0
 800c87e:	009b      	lsls	r3, r3, #2
 800c880:	4413      	add	r3, r2
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d010      	beq.n	800c8ac <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	33b0      	adds	r3, #176	; 0xb0
 800c894:	009b      	lsls	r3, r3, #2
 800c896:	4413      	add	r3, r2
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	691b      	ldr	r3, [r3, #16]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c8a8:	78fa      	ldrb	r2, [r7, #3]
 800c8aa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}

0800c8b6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c8b6:	b580      	push	{r7, lr}
 800c8b8:	b084      	sub	sp, #16
 800c8ba:	af00      	add	r7, sp, #0
 800c8bc:	6078      	str	r0, [r7, #4]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	32b0      	adds	r2, #176	; 0xb0
 800c8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8d0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	32b0      	adds	r2, #176	; 0xb0
 800c8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e01a      	b.n	800c91e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c8e8:	78fb      	ldrb	r3, [r7, #3]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f002 fa5c 	bl	800edaa <USBD_LL_GetRxDataSize>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	33b0      	adds	r3, #176	; 0xb0
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	4413      	add	r3, r2
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c912:	68fa      	ldr	r2, [r7, #12]
 800c914:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c918:	4611      	mov	r1, r2
 800c91a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c926:	b580      	push	{r7, lr}
 800c928:	b084      	sub	sp, #16
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	32b0      	adds	r2, #176	; 0xb0
 800c938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d101      	bne.n	800c948 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c944:	2303      	movs	r3, #3
 800c946:	e025      	b.n	800c994 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	33b0      	adds	r3, #176	; 0xb0
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	4413      	add	r3, r2
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01a      	beq.n	800c992 <USBD_CDC_EP0_RxReady+0x6c>
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c962:	2bff      	cmp	r3, #255	; 0xff
 800c964:	d015      	beq.n	800c992 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	33b0      	adds	r3, #176	; 0xb0
 800c970:	009b      	lsls	r3, r3, #2
 800c972:	4413      	add	r3, r2
 800c974:	685b      	ldr	r3, [r3, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c97e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c986:	b292      	uxth	r2, r2
 800c988:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	22ff      	movs	r2, #255	; 0xff
 800c98e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c992:	2300      	movs	r3, #0
}
 800c994:	4618      	mov	r0, r3
 800c996:	3710      	adds	r7, #16
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}

0800c99c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9a4:	2182      	movs	r1, #130	; 0x82
 800c9a6:	4818      	ldr	r0, [pc, #96]	; (800ca08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9a8:	f000 fd4f 	bl	800d44a <USBD_GetEpDesc>
 800c9ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9ae:	2101      	movs	r1, #1
 800c9b0:	4815      	ldr	r0, [pc, #84]	; (800ca08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9b2:	f000 fd4a 	bl	800d44a <USBD_GetEpDesc>
 800c9b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c9b8:	2181      	movs	r1, #129	; 0x81
 800c9ba:	4813      	ldr	r0, [pc, #76]	; (800ca08 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9bc:	f000 fd45 	bl	800d44a <USBD_GetEpDesc>
 800c9c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d002      	beq.n	800c9ce <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	2210      	movs	r2, #16
 800c9cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d006      	beq.n	800c9e2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9dc:	711a      	strb	r2, [r3, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d006      	beq.n	800c9f6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9f0:	711a      	strb	r2, [r3, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2243      	movs	r2, #67	; 0x43
 800c9fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c9fc:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	3718      	adds	r7, #24
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	24000064 	.word	0x24000064

0800ca0c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca14:	2182      	movs	r1, #130	; 0x82
 800ca16:	4818      	ldr	r0, [pc, #96]	; (800ca78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca18:	f000 fd17 	bl	800d44a <USBD_GetEpDesc>
 800ca1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca1e:	2101      	movs	r1, #1
 800ca20:	4815      	ldr	r0, [pc, #84]	; (800ca78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca22:	f000 fd12 	bl	800d44a <USBD_GetEpDesc>
 800ca26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca28:	2181      	movs	r1, #129	; 0x81
 800ca2a:	4813      	ldr	r0, [pc, #76]	; (800ca78 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca2c:	f000 fd0d 	bl	800d44a <USBD_GetEpDesc>
 800ca30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca38:	697b      	ldr	r3, [r7, #20]
 800ca3a:	2210      	movs	r2, #16
 800ca3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d006      	beq.n	800ca52 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2200      	movs	r2, #0
 800ca48:	711a      	strb	r2, [r3, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f042 0202 	orr.w	r2, r2, #2
 800ca50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d006      	beq.n	800ca66 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	711a      	strb	r2, [r3, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f042 0202 	orr.w	r2, r2, #2
 800ca64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2243      	movs	r2, #67	; 0x43
 800ca6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca6c:	4b02      	ldr	r3, [pc, #8]	; (800ca78 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	24000064 	.word	0x24000064

0800ca7c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b086      	sub	sp, #24
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca84:	2182      	movs	r1, #130	; 0x82
 800ca86:	4818      	ldr	r0, [pc, #96]	; (800cae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca88:	f000 fcdf 	bl	800d44a <USBD_GetEpDesc>
 800ca8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca8e:	2101      	movs	r1, #1
 800ca90:	4815      	ldr	r0, [pc, #84]	; (800cae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca92:	f000 fcda 	bl	800d44a <USBD_GetEpDesc>
 800ca96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca98:	2181      	movs	r1, #129	; 0x81
 800ca9a:	4813      	ldr	r0, [pc, #76]	; (800cae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ca9c:	f000 fcd5 	bl	800d44a <USBD_GetEpDesc>
 800caa0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800caa8:	697b      	ldr	r3, [r7, #20]
 800caaa:	2210      	movs	r2, #16
 800caac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d006      	beq.n	800cac2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cabc:	711a      	strb	r2, [r3, #4]
 800cabe:	2200      	movs	r2, #0
 800cac0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d006      	beq.n	800cad6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cad0:	711a      	strb	r2, [r3, #4]
 800cad2:	2200      	movs	r2, #0
 800cad4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2243      	movs	r2, #67	; 0x43
 800cada:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cadc:	4b02      	ldr	r3, [pc, #8]	; (800cae8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cade:	4618      	mov	r0, r3
 800cae0:	3718      	adds	r7, #24
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	24000064 	.word	0x24000064

0800caec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	220a      	movs	r2, #10
 800caf8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cafa:	4b03      	ldr	r3, [pc, #12]	; (800cb08 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	370c      	adds	r7, #12
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	24000020 	.word	0x24000020

0800cb0c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	e009      	b.n	800cb34 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb26:	687a      	ldr	r2, [r7, #4]
 800cb28:	33b0      	adds	r3, #176	; 0xb0
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	32b0      	adds	r2, #176	; 0xb0
 800cb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb5a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d101      	bne.n	800cb66 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cb62:	2303      	movs	r3, #3
 800cb64:	e008      	b.n	800cb78 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	687a      	ldr	r2, [r7, #4]
 800cb72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	371c      	adds	r7, #28
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	32b0      	adds	r2, #176	; 0xb0
 800cb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d101      	bne.n	800cba8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cba4:	2303      	movs	r3, #3
 800cba6:	e004      	b.n	800cbb2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3714      	adds	r7, #20
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbc:	4770      	bx	lr
	...

0800cbc0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	32b0      	adds	r2, #176	; 0xb0
 800cbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d101      	bne.n	800cbe6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbe2:	2303      	movs	r3, #3
 800cbe4:	e025      	b.n	800cc32 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d11f      	bne.n	800cc30 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cbf8:	4b10      	ldr	r3, [pc, #64]	; (800cc3c <USBD_CDC_TransmitPacket+0x7c>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	f003 020f 	and.w	r2, r3, #15
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4403      	add	r3, r0
 800cc12:	3318      	adds	r3, #24
 800cc14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc16:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <USBD_CDC_TransmitPacket+0x7c>)
 800cc18:	7819      	ldrb	r1, [r3, #0]
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f002 f87d 	bl	800ed26 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	240000a7 	.word	0x240000a7

0800cc40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	32b0      	adds	r2, #176	; 0xb0
 800cc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32b0      	adds	r2, #176	; 0xb0
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cc6a:	2303      	movs	r3, #3
 800cc6c:	e018      	b.n	800cca0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7c1b      	ldrb	r3, [r3, #16]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d10a      	bne.n	800cc8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc76:	4b0c      	ldr	r3, [pc, #48]	; (800cca8 <USBD_CDC_ReceivePacket+0x68>)
 800cc78:	7819      	ldrb	r1, [r3, #0]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc80:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f002 f86f 	bl	800ed68 <USBD_LL_PrepareReceive>
 800cc8a:	e008      	b.n	800cc9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc8c:	4b06      	ldr	r3, [pc, #24]	; (800cca8 <USBD_CDC_ReceivePacket+0x68>)
 800cc8e:	7819      	ldrb	r1, [r3, #0]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc96:	2340      	movs	r3, #64	; 0x40
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f002 f865 	bl	800ed68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	240000a8 	.word	0x240000a8

0800ccac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e01f      	b.n	800cd04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d003      	beq.n	800ccea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	68ba      	ldr	r2, [r7, #8]
 800cce6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	79fa      	ldrb	r2, [r7, #7]
 800ccf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f001 fedb 	bl	800eab4 <USBD_LL_Init>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd02:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3718      	adds	r7, #24
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}

0800cd0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b084      	sub	sp, #16
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
 800cd14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d101      	bne.n	800cd24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e025      	b.n	800cd70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	32ae      	adds	r2, #174	; 0xae
 800cd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00f      	beq.n	800cd60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	32ae      	adds	r2, #174	; 0xae
 800cd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd50:	f107 020e 	add.w	r2, r7, #14
 800cd54:	4610      	mov	r0, r2
 800cd56:	4798      	blx	r3
 800cd58:	4602      	mov	r2, r0
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cd6e:	2300      	movs	r3, #0
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3710      	adds	r7, #16
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f001 fee7 	bl	800eb54 <USBD_LL_Start>
 800cd86:	4603      	mov	r3, r0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	370c      	adds	r7, #12
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda4:	4770      	bx	lr

0800cda6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cda6:	b580      	push	{r7, lr}
 800cda8:	b084      	sub	sp, #16
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d009      	beq.n	800cdd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	78fa      	ldrb	r2, [r7, #3]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	4798      	blx	r3
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cdd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3710      	adds	r7, #16
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}

0800cdde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b084      	sub	sp, #16
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
 800cde6:	460b      	mov	r3, r1
 800cde8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdea:	2300      	movs	r3, #0
 800cdec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	78fa      	ldrb	r2, [r7, #3]
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	4798      	blx	r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce04:	2303      	movs	r3, #3
 800ce06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f001 f90e 	bl	800e046 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce38:	461a      	mov	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce46:	f003 031f 	and.w	r3, r3, #31
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d01a      	beq.n	800ce84 <USBD_LL_SetupStage+0x72>
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d822      	bhi.n	800ce98 <USBD_LL_SetupStage+0x86>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d002      	beq.n	800ce5c <USBD_LL_SetupStage+0x4a>
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d00a      	beq.n	800ce70 <USBD_LL_SetupStage+0x5e>
 800ce5a:	e01d      	b.n	800ce98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fb65 	bl	800d534 <USBD_StdDevReq>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ce6e:	e020      	b.n	800ceb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce76:	4619      	mov	r1, r3
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fbcd 	bl	800d618 <USBD_StdItfReq>
 800ce7e:	4603      	mov	r3, r0
 800ce80:	73fb      	strb	r3, [r7, #15]
      break;
 800ce82:	e016      	b.n	800ceb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f000 fc2f 	bl	800d6f0 <USBD_StdEPReq>
 800ce92:	4603      	mov	r3, r0
 800ce94:	73fb      	strb	r3, [r7, #15]
      break;
 800ce96:	e00c      	b.n	800ceb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cea2:	b2db      	uxtb	r3, r3
 800cea4:	4619      	mov	r1, r3
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f001 feb4 	bl	800ec14 <USBD_LL_StallEP>
 800ceac:	4603      	mov	r3, r0
 800ceae:	73fb      	strb	r3, [r7, #15]
      break;
 800ceb0:	bf00      	nop
  }

  return ret;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	460b      	mov	r3, r1
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cece:	7afb      	ldrb	r3, [r7, #11]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d16e      	bne.n	800cfb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ceda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cee2:	2b03      	cmp	r3, #3
 800cee4:	f040 8098 	bne.w	800d018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	689a      	ldr	r2, [r3, #8]
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d913      	bls.n	800cf1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	689a      	ldr	r2, [r3, #8]
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	1ad2      	subs	r2, r2, r3
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	68da      	ldr	r2, [r3, #12]
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	bf28      	it	cs
 800cf0e:	4613      	movcs	r3, r2
 800cf10:	461a      	mov	r2, r3
 800cf12:	6879      	ldr	r1, [r7, #4]
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f001 f98a 	bl	800e22e <USBD_CtlContinueRx>
 800cf1a:	e07d      	b.n	800d018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf22:	f003 031f 	and.w	r3, r3, #31
 800cf26:	2b02      	cmp	r3, #2
 800cf28:	d014      	beq.n	800cf54 <USBD_LL_DataOutStage+0x98>
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d81d      	bhi.n	800cf6a <USBD_LL_DataOutStage+0xae>
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d002      	beq.n	800cf38 <USBD_LL_DataOutStage+0x7c>
 800cf32:	2b01      	cmp	r3, #1
 800cf34:	d003      	beq.n	800cf3e <USBD_LL_DataOutStage+0x82>
 800cf36:	e018      	b.n	800cf6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	75bb      	strb	r3, [r7, #22]
            break;
 800cf3c:	e018      	b.n	800cf70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf44:	b2db      	uxtb	r3, r3
 800cf46:	4619      	mov	r1, r3
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 fa64 	bl	800d416 <USBD_CoreFindIF>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	75bb      	strb	r3, [r7, #22]
            break;
 800cf52:	e00d      	b.n	800cf70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 fa66 	bl	800d430 <USBD_CoreFindEP>
 800cf64:	4603      	mov	r3, r0
 800cf66:	75bb      	strb	r3, [r7, #22]
            break;
 800cf68:	e002      	b.n	800cf70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	75bb      	strb	r3, [r7, #22]
            break;
 800cf6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cf70:	7dbb      	ldrb	r3, [r7, #22]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d119      	bne.n	800cfaa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	d113      	bne.n	800cfaa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cf82:	7dba      	ldrb	r2, [r7, #22]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	32ae      	adds	r2, #174	; 0xae
 800cf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8c:	691b      	ldr	r3, [r3, #16]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00b      	beq.n	800cfaa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cf92:	7dba      	ldrb	r2, [r7, #22]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cf9a:	7dba      	ldrb	r2, [r7, #22]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	32ae      	adds	r2, #174	; 0xae
 800cfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cfaa:	68f8      	ldr	r0, [r7, #12]
 800cfac:	f001 f950 	bl	800e250 <USBD_CtlSendStatus>
 800cfb0:	e032      	b.n	800d018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cfb2:	7afb      	ldrb	r3, [r7, #11]
 800cfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	4619      	mov	r1, r3
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 fa37 	bl	800d430 <USBD_CoreFindEP>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfc6:	7dbb      	ldrb	r3, [r7, #22]
 800cfc8:	2bff      	cmp	r3, #255	; 0xff
 800cfca:	d025      	beq.n	800d018 <USBD_LL_DataOutStage+0x15c>
 800cfcc:	7dbb      	ldrb	r3, [r7, #22]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d122      	bne.n	800d018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d117      	bne.n	800d00e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cfde:	7dba      	ldrb	r2, [r7, #22]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	32ae      	adds	r2, #174	; 0xae
 800cfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe8:	699b      	ldr	r3, [r3, #24]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d00f      	beq.n	800d00e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cfee:	7dba      	ldrb	r2, [r7, #22]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cff6:	7dba      	ldrb	r2, [r7, #22]
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	32ae      	adds	r2, #174	; 0xae
 800cffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d000:	699b      	ldr	r3, [r3, #24]
 800d002:	7afa      	ldrb	r2, [r7, #11]
 800d004:	4611      	mov	r1, r2
 800d006:	68f8      	ldr	r0, [r7, #12]
 800d008:	4798      	blx	r3
 800d00a:	4603      	mov	r3, r0
 800d00c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	e000      	b.n	800d01a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b086      	sub	sp, #24
 800d026:	af00      	add	r7, sp, #0
 800d028:	60f8      	str	r0, [r7, #12]
 800d02a:	460b      	mov	r3, r1
 800d02c:	607a      	str	r2, [r7, #4]
 800d02e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d030:	7afb      	ldrb	r3, [r7, #11]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d16f      	bne.n	800d116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	3314      	adds	r3, #20
 800d03a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d042:	2b02      	cmp	r3, #2
 800d044:	d15a      	bne.n	800d0fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	689a      	ldr	r2, [r3, #8]
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d914      	bls.n	800d07c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	689a      	ldr	r2, [r3, #8]
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	68db      	ldr	r3, [r3, #12]
 800d05a:	1ad2      	subs	r2, r2, r3
 800d05c:	693b      	ldr	r3, [r7, #16]
 800d05e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	461a      	mov	r2, r3
 800d066:	6879      	ldr	r1, [r7, #4]
 800d068:	68f8      	ldr	r0, [r7, #12]
 800d06a:	f001 f8b2 	bl	800e1d2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d06e:	2300      	movs	r3, #0
 800d070:	2200      	movs	r2, #0
 800d072:	2100      	movs	r1, #0
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f001 fe77 	bl	800ed68 <USBD_LL_PrepareReceive>
 800d07a:	e03f      	b.n	800d0fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	68da      	ldr	r2, [r3, #12]
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	429a      	cmp	r2, r3
 800d086:	d11c      	bne.n	800d0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d088:	693b      	ldr	r3, [r7, #16]
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d090:	429a      	cmp	r2, r3
 800d092:	d316      	bcc.n	800d0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	685a      	ldr	r2, [r3, #4]
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d20f      	bcs.n	800d0c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f001 f893 	bl	800e1d2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2100      	movs	r1, #0
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	f001 fe54 	bl	800ed68 <USBD_LL_PrepareReceive>
 800d0c0:	e01c      	b.n	800d0fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d10f      	bne.n	800d0ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	68f8      	ldr	r0, [r7, #12]
 800d0ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0ee:	2180      	movs	r1, #128	; 0x80
 800d0f0:	68f8      	ldr	r0, [r7, #12]
 800d0f2:	f001 fd8f 	bl	800ec14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f001 f8bd 	bl	800e276 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d102:	2b00      	cmp	r3, #0
 800d104:	d03a      	beq.n	800d17c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7ff fe42 	bl	800cd90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d114:	e032      	b.n	800d17c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d116:	7afb      	ldrb	r3, [r7, #11]
 800d118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	4619      	mov	r1, r3
 800d120:	68f8      	ldr	r0, [r7, #12]
 800d122:	f000 f985 	bl	800d430 <USBD_CoreFindEP>
 800d126:	4603      	mov	r3, r0
 800d128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	2bff      	cmp	r3, #255	; 0xff
 800d12e:	d025      	beq.n	800d17c <USBD_LL_DataInStage+0x15a>
 800d130:	7dfb      	ldrb	r3, [r7, #23]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d122      	bne.n	800d17c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	2b03      	cmp	r3, #3
 800d140:	d11c      	bne.n	800d17c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d142:	7dfa      	ldrb	r2, [r7, #23]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	32ae      	adds	r2, #174	; 0xae
 800d148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d14c:	695b      	ldr	r3, [r3, #20]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d014      	beq.n	800d17c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d152:	7dfa      	ldrb	r2, [r7, #23]
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d15a:	7dfa      	ldrb	r2, [r7, #23]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	32ae      	adds	r2, #174	; 0xae
 800d160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d164:	695b      	ldr	r3, [r3, #20]
 800d166:	7afa      	ldrb	r2, [r7, #11]
 800d168:	4611      	mov	r1, r2
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	4798      	blx	r3
 800d16e:	4603      	mov	r3, r0
 800d170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d172:	7dbb      	ldrb	r3, [r7, #22]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d178:	7dbb      	ldrb	r3, [r7, #22]
 800d17a:	e000      	b.n	800d17e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d17c:	2300      	movs	r3, #0
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3718      	adds	r7, #24
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b084      	sub	sp, #16
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d014      	beq.n	800d1ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00e      	beq.n	800d1ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	687a      	ldr	r2, [r7, #4]
 800d1d8:	6852      	ldr	r2, [r2, #4]
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	4611      	mov	r1, r2
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	4798      	blx	r3
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d001      	beq.n	800d1ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d1e8:	2303      	movs	r3, #3
 800d1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d1ec:	2340      	movs	r3, #64	; 0x40
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 fcc9 	bl	800eb8a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2240      	movs	r2, #64	; 0x40
 800d204:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d208:	2340      	movs	r3, #64	; 0x40
 800d20a:	2200      	movs	r2, #0
 800d20c:	2180      	movs	r1, #128	; 0x80
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 fcbb 	bl	800eb8a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2240      	movs	r2, #64	; 0x40
 800d21e:	621a      	str	r2, [r3, #32]

  return ret;
 800d220:	7bfb      	ldrb	r3, [r7, #15]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b083      	sub	sp, #12
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
 800d232:	460b      	mov	r3, r1
 800d234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	78fa      	ldrb	r2, [r7, #3]
 800d23a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	370c      	adds	r7, #12
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d24a:	b480      	push	{r7}
 800d24c:	b083      	sub	sp, #12
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	d006      	beq.n	800d26c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d264:	b2da      	uxtb	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2204      	movs	r2, #4
 800d270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d274:	2300      	movs	r3, #0
}
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr

0800d282 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d282:	b480      	push	{r7}
 800d284:	b083      	sub	sp, #12
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b04      	cmp	r3, #4
 800d294:	d106      	bne.n	800d2a4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2a4:	2300      	movs	r3, #0
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr

0800d2b2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b082      	sub	sp, #8
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d110      	bne.n	800d2e8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00b      	beq.n	800d2e8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d6:	69db      	ldr	r3, [r3, #28]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d005      	beq.n	800d2e8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e2:	69db      	ldr	r3, [r3, #28]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3708      	adds	r7, #8
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	bd80      	pop	{r7, pc}

0800d2f2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d2f2:	b580      	push	{r7, lr}
 800d2f4:	b082      	sub	sp, #8
 800d2f6:	af00      	add	r7, sp, #0
 800d2f8:	6078      	str	r0, [r7, #4]
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	32ae      	adds	r2, #174	; 0xae
 800d308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d310:	2303      	movs	r3, #3
 800d312:	e01c      	b.n	800d34e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d115      	bne.n	800d34c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	32ae      	adds	r2, #174	; 0xae
 800d32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d32e:	6a1b      	ldr	r3, [r3, #32]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d00b      	beq.n	800d34c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	32ae      	adds	r2, #174	; 0xae
 800d33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d342:	6a1b      	ldr	r3, [r3, #32]
 800d344:	78fa      	ldrb	r2, [r7, #3]
 800d346:	4611      	mov	r1, r2
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d356:	b580      	push	{r7, lr}
 800d358:	b082      	sub	sp, #8
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	32ae      	adds	r2, #174	; 0xae
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d374:	2303      	movs	r3, #3
 800d376:	e01c      	b.n	800d3b2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b03      	cmp	r3, #3
 800d382:	d115      	bne.n	800d3b0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	32ae      	adds	r2, #174	; 0xae
 800d38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d394:	2b00      	cmp	r3, #0
 800d396:	d00b      	beq.n	800d3b0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	32ae      	adds	r2, #174	; 0xae
 800d3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3a8:	78fa      	ldrb	r2, [r7, #3]
 800d3aa:	4611      	mov	r1, r2
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	370c      	adds	r7, #12
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ce:	4770      	bx	lr

0800d3d0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d00e      	beq.n	800d40c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	687a      	ldr	r2, [r7, #4]
 800d3f8:	6852      	ldr	r2, [r2, #4]
 800d3fa:	b2d2      	uxtb	r2, r2
 800d3fc:	4611      	mov	r1, r2
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	4798      	blx	r3
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d408:	2303      	movs	r3, #3
 800d40a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d416:	b480      	push	{r7}
 800d418:	b083      	sub	sp, #12
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
 800d41e:	460b      	mov	r3, r1
 800d420:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d422:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d424:	4618      	mov	r0, r3
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d43c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d43e:	4618      	mov	r0, r3
 800d440:	370c      	adds	r7, #12
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b086      	sub	sp, #24
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	460b      	mov	r3, r1
 800d454:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d45e:	2300      	movs	r3, #0
 800d460:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	885b      	ldrh	r3, [r3, #2]
 800d466:	b29a      	uxth	r2, r3
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	429a      	cmp	r2, r3
 800d470:	d920      	bls.n	800d4b4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b29b      	uxth	r3, r3
 800d478:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d47a:	e013      	b.n	800d4a4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d47c:	f107 030a 	add.w	r3, r7, #10
 800d480:	4619      	mov	r1, r3
 800d482:	6978      	ldr	r0, [r7, #20]
 800d484:	f000 f81b 	bl	800d4be <USBD_GetNextDesc>
 800d488:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	785b      	ldrb	r3, [r3, #1]
 800d48e:	2b05      	cmp	r3, #5
 800d490:	d108      	bne.n	800d4a4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	789b      	ldrb	r3, [r3, #2]
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d008      	beq.n	800d4b2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	885b      	ldrh	r3, [r3, #2]
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	897b      	ldrh	r3, [r7, #10]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d8e5      	bhi.n	800d47c <USBD_GetEpDesc+0x32>
 800d4b0:	e000      	b.n	800d4b4 <USBD_GetEpDesc+0x6a>
          break;
 800d4b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d4b4:	693b      	ldr	r3, [r7, #16]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b085      	sub	sp, #20
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
 800d4c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	881a      	ldrh	r2, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	4413      	add	r3, r2
 800d4d8:	b29a      	uxth	r2, r3
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d4ea:	68fb      	ldr	r3, [r7, #12]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d4f8:	b480      	push	{r7}
 800d4fa:	b087      	sub	sp, #28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	3301      	adds	r3, #1
 800d50e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d516:	8a3b      	ldrh	r3, [r7, #16]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	b21a      	sxth	r2, r3
 800d51c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d520:	4313      	orrs	r3, r2
 800d522:	b21b      	sxth	r3, r3
 800d524:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d526:	89fb      	ldrh	r3, [r7, #14]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	371c      	adds	r7, #28
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b084      	sub	sp, #16
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d53e:	2300      	movs	r3, #0
 800d540:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d54a:	2b40      	cmp	r3, #64	; 0x40
 800d54c:	d005      	beq.n	800d55a <USBD_StdDevReq+0x26>
 800d54e:	2b40      	cmp	r3, #64	; 0x40
 800d550:	d857      	bhi.n	800d602 <USBD_StdDevReq+0xce>
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00f      	beq.n	800d576 <USBD_StdDevReq+0x42>
 800d556:	2b20      	cmp	r3, #32
 800d558:	d153      	bne.n	800d602 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	32ae      	adds	r2, #174	; 0xae
 800d564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
 800d570:	4603      	mov	r3, r0
 800d572:	73fb      	strb	r3, [r7, #15]
      break;
 800d574:	e04a      	b.n	800d60c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	785b      	ldrb	r3, [r3, #1]
 800d57a:	2b09      	cmp	r3, #9
 800d57c:	d83b      	bhi.n	800d5f6 <USBD_StdDevReq+0xc2>
 800d57e:	a201      	add	r2, pc, #4	; (adr r2, 800d584 <USBD_StdDevReq+0x50>)
 800d580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d584:	0800d5d9 	.word	0x0800d5d9
 800d588:	0800d5ed 	.word	0x0800d5ed
 800d58c:	0800d5f7 	.word	0x0800d5f7
 800d590:	0800d5e3 	.word	0x0800d5e3
 800d594:	0800d5f7 	.word	0x0800d5f7
 800d598:	0800d5b7 	.word	0x0800d5b7
 800d59c:	0800d5ad 	.word	0x0800d5ad
 800d5a0:	0800d5f7 	.word	0x0800d5f7
 800d5a4:	0800d5cf 	.word	0x0800d5cf
 800d5a8:	0800d5c1 	.word	0x0800d5c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d5ac:	6839      	ldr	r1, [r7, #0]
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 fa3c 	bl	800da2c <USBD_GetDescriptor>
          break;
 800d5b4:	e024      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d5b6:	6839      	ldr	r1, [r7, #0]
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 fba1 	bl	800dd00 <USBD_SetAddress>
          break;
 800d5be:	e01f      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d5c0:	6839      	ldr	r1, [r7, #0]
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 fbe0 	bl	800dd88 <USBD_SetConfig>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73fb      	strb	r3, [r7, #15]
          break;
 800d5cc:	e018      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d5ce:	6839      	ldr	r1, [r7, #0]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f000 fc83 	bl	800dedc <USBD_GetConfig>
          break;
 800d5d6:	e013      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fcb4 	bl	800df48 <USBD_GetStatus>
          break;
 800d5e0:	e00e      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d5e2:	6839      	ldr	r1, [r7, #0]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fce3 	bl	800dfb0 <USBD_SetFeature>
          break;
 800d5ea:	e009      	b.n	800d600 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 fd07 	bl	800e002 <USBD_ClrFeature>
          break;
 800d5f4:	e004      	b.n	800d600 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fd5e 	bl	800e0ba <USBD_CtlError>
          break;
 800d5fe:	bf00      	nop
      }
      break;
 800d600:	e004      	b.n	800d60c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 fd58 	bl	800e0ba <USBD_CtlError>
      break;
 800d60a:	bf00      	nop
  }

  return ret;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop

0800d618 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d622:	2300      	movs	r3, #0
 800d624:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	781b      	ldrb	r3, [r3, #0]
 800d62a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d62e:	2b40      	cmp	r3, #64	; 0x40
 800d630:	d005      	beq.n	800d63e <USBD_StdItfReq+0x26>
 800d632:	2b40      	cmp	r3, #64	; 0x40
 800d634:	d852      	bhi.n	800d6dc <USBD_StdItfReq+0xc4>
 800d636:	2b00      	cmp	r3, #0
 800d638:	d001      	beq.n	800d63e <USBD_StdItfReq+0x26>
 800d63a:	2b20      	cmp	r3, #32
 800d63c:	d14e      	bne.n	800d6dc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d644:	b2db      	uxtb	r3, r3
 800d646:	3b01      	subs	r3, #1
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d840      	bhi.n	800d6ce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	889b      	ldrh	r3, [r3, #4]
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b01      	cmp	r3, #1
 800d654:	d836      	bhi.n	800d6c4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	889b      	ldrh	r3, [r3, #4]
 800d65a:	b2db      	uxtb	r3, r3
 800d65c:	4619      	mov	r1, r3
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f7ff fed9 	bl	800d416 <USBD_CoreFindIF>
 800d664:	4603      	mov	r3, r0
 800d666:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d668:	7bbb      	ldrb	r3, [r7, #14]
 800d66a:	2bff      	cmp	r3, #255	; 0xff
 800d66c:	d01d      	beq.n	800d6aa <USBD_StdItfReq+0x92>
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d11a      	bne.n	800d6aa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d674:	7bba      	ldrb	r2, [r7, #14]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	32ae      	adds	r2, #174	; 0xae
 800d67a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00f      	beq.n	800d6a4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d684:	7bba      	ldrb	r2, [r7, #14]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d68c:	7bba      	ldrb	r2, [r7, #14]
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	32ae      	adds	r2, #174	; 0xae
 800d692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	4798      	blx	r3
 800d69e:	4603      	mov	r3, r0
 800d6a0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6a2:	e004      	b.n	800d6ae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6a8:	e001      	b.n	800d6ae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d6aa:	2303      	movs	r3, #3
 800d6ac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	88db      	ldrh	r3, [r3, #6]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d110      	bne.n	800d6d8 <USBD_StdItfReq+0xc0>
 800d6b6:	7bfb      	ldrb	r3, [r7, #15]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10d      	bne.n	800d6d8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fdc7 	bl	800e250 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6c2:	e009      	b.n	800d6d8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fcf7 	bl	800e0ba <USBD_CtlError>
          break;
 800d6cc:	e004      	b.n	800d6d8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d6ce:	6839      	ldr	r1, [r7, #0]
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fcf2 	bl	800e0ba <USBD_CtlError>
          break;
 800d6d6:	e000      	b.n	800d6da <USBD_StdItfReq+0xc2>
          break;
 800d6d8:	bf00      	nop
      }
      break;
 800d6da:	e004      	b.n	800d6e6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d6dc:	6839      	ldr	r1, [r7, #0]
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f000 fceb 	bl	800e0ba <USBD_CtlError>
      break;
 800d6e4:	bf00      	nop
  }

  return ret;
 800d6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	889b      	ldrh	r3, [r3, #4]
 800d702:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d70c:	2b40      	cmp	r3, #64	; 0x40
 800d70e:	d007      	beq.n	800d720 <USBD_StdEPReq+0x30>
 800d710:	2b40      	cmp	r3, #64	; 0x40
 800d712:	f200 817f 	bhi.w	800da14 <USBD_StdEPReq+0x324>
 800d716:	2b00      	cmp	r3, #0
 800d718:	d02a      	beq.n	800d770 <USBD_StdEPReq+0x80>
 800d71a:	2b20      	cmp	r3, #32
 800d71c:	f040 817a 	bne.w	800da14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d720:	7bbb      	ldrb	r3, [r7, #14]
 800d722:	4619      	mov	r1, r3
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7ff fe83 	bl	800d430 <USBD_CoreFindEP>
 800d72a:	4603      	mov	r3, r0
 800d72c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d72e:	7b7b      	ldrb	r3, [r7, #13]
 800d730:	2bff      	cmp	r3, #255	; 0xff
 800d732:	f000 8174 	beq.w	800da1e <USBD_StdEPReq+0x32e>
 800d736:	7b7b      	ldrb	r3, [r7, #13]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f040 8170 	bne.w	800da1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d73e:	7b7a      	ldrb	r2, [r7, #13]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d746:	7b7a      	ldrb	r2, [r7, #13]
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	32ae      	adds	r2, #174	; 0xae
 800d74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 8163 	beq.w	800da1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d758:	7b7a      	ldrb	r2, [r7, #13]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	32ae      	adds	r2, #174	; 0xae
 800d75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	6839      	ldr	r1, [r7, #0]
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	4798      	blx	r3
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d76e:	e156      	b.n	800da1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	785b      	ldrb	r3, [r3, #1]
 800d774:	2b03      	cmp	r3, #3
 800d776:	d008      	beq.n	800d78a <USBD_StdEPReq+0x9a>
 800d778:	2b03      	cmp	r3, #3
 800d77a:	f300 8145 	bgt.w	800da08 <USBD_StdEPReq+0x318>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f000 809b 	beq.w	800d8ba <USBD_StdEPReq+0x1ca>
 800d784:	2b01      	cmp	r3, #1
 800d786:	d03c      	beq.n	800d802 <USBD_StdEPReq+0x112>
 800d788:	e13e      	b.n	800da08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d790:	b2db      	uxtb	r3, r3
 800d792:	2b02      	cmp	r3, #2
 800d794:	d002      	beq.n	800d79c <USBD_StdEPReq+0xac>
 800d796:	2b03      	cmp	r3, #3
 800d798:	d016      	beq.n	800d7c8 <USBD_StdEPReq+0xd8>
 800d79a:	e02c      	b.n	800d7f6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d79c:	7bbb      	ldrb	r3, [r7, #14]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00d      	beq.n	800d7be <USBD_StdEPReq+0xce>
 800d7a2:	7bbb      	ldrb	r3, [r7, #14]
 800d7a4:	2b80      	cmp	r3, #128	; 0x80
 800d7a6:	d00a      	beq.n	800d7be <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7a8:	7bbb      	ldrb	r3, [r7, #14]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f001 fa31 	bl	800ec14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7b2:	2180      	movs	r1, #128	; 0x80
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f001 fa2d 	bl	800ec14 <USBD_LL_StallEP>
 800d7ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7bc:	e020      	b.n	800d800 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d7be:	6839      	ldr	r1, [r7, #0]
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 fc7a 	bl	800e0ba <USBD_CtlError>
              break;
 800d7c6:	e01b      	b.n	800d800 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	885b      	ldrh	r3, [r3, #2]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d10e      	bne.n	800d7ee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d7d0:	7bbb      	ldrb	r3, [r7, #14]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00b      	beq.n	800d7ee <USBD_StdEPReq+0xfe>
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
 800d7d8:	2b80      	cmp	r3, #128	; 0x80
 800d7da:	d008      	beq.n	800d7ee <USBD_StdEPReq+0xfe>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	88db      	ldrh	r3, [r3, #6]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d104      	bne.n	800d7ee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f001 fa13 	bl	800ec14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f000 fd2e 	bl	800e250 <USBD_CtlSendStatus>

              break;
 800d7f4:	e004      	b.n	800d800 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fc5e 	bl	800e0ba <USBD_CtlError>
              break;
 800d7fe:	bf00      	nop
          }
          break;
 800d800:	e107      	b.n	800da12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d002      	beq.n	800d814 <USBD_StdEPReq+0x124>
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d016      	beq.n	800d840 <USBD_StdEPReq+0x150>
 800d812:	e04b      	b.n	800d8ac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d814:	7bbb      	ldrb	r3, [r7, #14]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00d      	beq.n	800d836 <USBD_StdEPReq+0x146>
 800d81a:	7bbb      	ldrb	r3, [r7, #14]
 800d81c:	2b80      	cmp	r3, #128	; 0x80
 800d81e:	d00a      	beq.n	800d836 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d820:	7bbb      	ldrb	r3, [r7, #14]
 800d822:	4619      	mov	r1, r3
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f001 f9f5 	bl	800ec14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d82a:	2180      	movs	r1, #128	; 0x80
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 f9f1 	bl	800ec14 <USBD_LL_StallEP>
 800d832:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d834:	e040      	b.n	800d8b8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 fc3e 	bl	800e0ba <USBD_CtlError>
              break;
 800d83e:	e03b      	b.n	800d8b8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	885b      	ldrh	r3, [r3, #2]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d136      	bne.n	800d8b6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d848:	7bbb      	ldrb	r3, [r7, #14]
 800d84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d004      	beq.n	800d85c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d852:	7bbb      	ldrb	r3, [r7, #14]
 800d854:	4619      	mov	r1, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f001 f9fb 	bl	800ec52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fcf7 	bl	800e250 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d862:	7bbb      	ldrb	r3, [r7, #14]
 800d864:	4619      	mov	r1, r3
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7ff fde2 	bl	800d430 <USBD_CoreFindEP>
 800d86c:	4603      	mov	r3, r0
 800d86e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d870:	7b7b      	ldrb	r3, [r7, #13]
 800d872:	2bff      	cmp	r3, #255	; 0xff
 800d874:	d01f      	beq.n	800d8b6 <USBD_StdEPReq+0x1c6>
 800d876:	7b7b      	ldrb	r3, [r7, #13]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d11c      	bne.n	800d8b6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d87c:	7b7a      	ldrb	r2, [r7, #13]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d884:	7b7a      	ldrb	r2, [r7, #13]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	32ae      	adds	r2, #174	; 0xae
 800d88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d010      	beq.n	800d8b6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d894:	7b7a      	ldrb	r2, [r7, #13]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	32ae      	adds	r2, #174	; 0xae
 800d89a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	6839      	ldr	r1, [r7, #0]
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	4798      	blx	r3
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d8aa:	e004      	b.n	800d8b6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d8ac:	6839      	ldr	r1, [r7, #0]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f000 fc03 	bl	800e0ba <USBD_CtlError>
              break;
 800d8b4:	e000      	b.n	800d8b8 <USBD_StdEPReq+0x1c8>
              break;
 800d8b6:	bf00      	nop
          }
          break;
 800d8b8:	e0ab      	b.n	800da12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d002      	beq.n	800d8cc <USBD_StdEPReq+0x1dc>
 800d8c6:	2b03      	cmp	r3, #3
 800d8c8:	d032      	beq.n	800d930 <USBD_StdEPReq+0x240>
 800d8ca:	e097      	b.n	800d9fc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8cc:	7bbb      	ldrb	r3, [r7, #14]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <USBD_StdEPReq+0x1f2>
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	2b80      	cmp	r3, #128	; 0x80
 800d8d6:	d004      	beq.n	800d8e2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d8d8:	6839      	ldr	r1, [r7, #0]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 fbed 	bl	800e0ba <USBD_CtlError>
                break;
 800d8e0:	e091      	b.n	800da06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	da0b      	bge.n	800d902 <USBD_StdEPReq+0x212>
 800d8ea:	7bbb      	ldrb	r3, [r7, #14]
 800d8ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	3310      	adds	r3, #16
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	3304      	adds	r3, #4
 800d900:	e00b      	b.n	800d91a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d902:	7bbb      	ldrb	r3, [r7, #14]
 800d904:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d908:	4613      	mov	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	4413      	add	r3, r2
 800d918:	3304      	adds	r3, #4
 800d91a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2202      	movs	r2, #2
 800d926:	4619      	mov	r1, r3
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fc37 	bl	800e19c <USBD_CtlSendData>
              break;
 800d92e:	e06a      	b.n	800da06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d930:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d934:	2b00      	cmp	r3, #0
 800d936:	da11      	bge.n	800d95c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d938:	7bbb      	ldrb	r3, [r7, #14]
 800d93a:	f003 020f 	and.w	r2, r3, #15
 800d93e:	6879      	ldr	r1, [r7, #4]
 800d940:	4613      	mov	r3, r2
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	4413      	add	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	440b      	add	r3, r1
 800d94a:	3324      	adds	r3, #36	; 0x24
 800d94c:	881b      	ldrh	r3, [r3, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d117      	bne.n	800d982 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d952:	6839      	ldr	r1, [r7, #0]
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f000 fbb0 	bl	800e0ba <USBD_CtlError>
                  break;
 800d95a:	e054      	b.n	800da06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d95c:	7bbb      	ldrb	r3, [r7, #14]
 800d95e:	f003 020f 	and.w	r2, r3, #15
 800d962:	6879      	ldr	r1, [r7, #4]
 800d964:	4613      	mov	r3, r2
 800d966:	009b      	lsls	r3, r3, #2
 800d968:	4413      	add	r3, r2
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	440b      	add	r3, r1
 800d96e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d104      	bne.n	800d982 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 fb9d 	bl	800e0ba <USBD_CtlError>
                  break;
 800d980:	e041      	b.n	800da06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d986:	2b00      	cmp	r3, #0
 800d988:	da0b      	bge.n	800d9a2 <USBD_StdEPReq+0x2b2>
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
 800d98c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	3310      	adds	r3, #16
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	4413      	add	r3, r2
 800d99e:	3304      	adds	r3, #4
 800d9a0:	e00b      	b.n	800d9ba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9a2:	7bbb      	ldrb	r3, [r7, #14]
 800d9a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d9bc:	7bbb      	ldrb	r3, [r7, #14]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d002      	beq.n	800d9c8 <USBD_StdEPReq+0x2d8>
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	2b80      	cmp	r3, #128	; 0x80
 800d9c6:	d103      	bne.n	800d9d0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	601a      	str	r2, [r3, #0]
 800d9ce:	e00e      	b.n	800d9ee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d9d0:	7bbb      	ldrb	r3, [r7, #14]
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f001 f95b 	bl	800ec90 <USBD_LL_IsStallEP>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	601a      	str	r2, [r3, #0]
 800d9e6:	e002      	b.n	800d9ee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fbd1 	bl	800e19c <USBD_CtlSendData>
              break;
 800d9fa:	e004      	b.n	800da06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fb5b 	bl	800e0ba <USBD_CtlError>
              break;
 800da04:	bf00      	nop
          }
          break;
 800da06:	e004      	b.n	800da12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da08:	6839      	ldr	r1, [r7, #0]
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 fb55 	bl	800e0ba <USBD_CtlError>
          break;
 800da10:	bf00      	nop
      }
      break;
 800da12:	e005      	b.n	800da20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fb4f 	bl	800e0ba <USBD_CtlError>
      break;
 800da1c:	e000      	b.n	800da20 <USBD_StdEPReq+0x330>
      break;
 800da1e:	bf00      	nop
  }

  return ret;
 800da20:	7bfb      	ldrb	r3, [r7, #15]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da36:	2300      	movs	r3, #0
 800da38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da3a:	2300      	movs	r3, #0
 800da3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da3e:	2300      	movs	r3, #0
 800da40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	885b      	ldrh	r3, [r3, #2]
 800da46:	0a1b      	lsrs	r3, r3, #8
 800da48:	b29b      	uxth	r3, r3
 800da4a:	3b01      	subs	r3, #1
 800da4c:	2b06      	cmp	r3, #6
 800da4e:	f200 8128 	bhi.w	800dca2 <USBD_GetDescriptor+0x276>
 800da52:	a201      	add	r2, pc, #4	; (adr r2, 800da58 <USBD_GetDescriptor+0x2c>)
 800da54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da58:	0800da75 	.word	0x0800da75
 800da5c:	0800da8d 	.word	0x0800da8d
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800dca3 	.word	0x0800dca3
 800da68:	0800dca3 	.word	0x0800dca3
 800da6c:	0800dc43 	.word	0x0800dc43
 800da70:	0800dc6f 	.word	0x0800dc6f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	687a      	ldr	r2, [r7, #4]
 800da7e:	7c12      	ldrb	r2, [r2, #16]
 800da80:	f107 0108 	add.w	r1, r7, #8
 800da84:	4610      	mov	r0, r2
 800da86:	4798      	blx	r3
 800da88:	60f8      	str	r0, [r7, #12]
      break;
 800da8a:	e112      	b.n	800dcb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	7c1b      	ldrb	r3, [r3, #16]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d10d      	bne.n	800dab0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da9c:	f107 0208 	add.w	r2, r7, #8
 800daa0:	4610      	mov	r0, r2
 800daa2:	4798      	blx	r3
 800daa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	3301      	adds	r3, #1
 800daaa:	2202      	movs	r2, #2
 800daac:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800daae:	e100      	b.n	800dcb2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	f107 0208 	add.w	r2, r7, #8
 800dabc:	4610      	mov	r0, r2
 800dabe:	4798      	blx	r3
 800dac0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3301      	adds	r3, #1
 800dac6:	2202      	movs	r2, #2
 800dac8:	701a      	strb	r2, [r3, #0]
      break;
 800daca:	e0f2      	b.n	800dcb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	885b      	ldrh	r3, [r3, #2]
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b05      	cmp	r3, #5
 800dad4:	f200 80ac 	bhi.w	800dc30 <USBD_GetDescriptor+0x204>
 800dad8:	a201      	add	r2, pc, #4	; (adr r2, 800dae0 <USBD_GetDescriptor+0xb4>)
 800dada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dade:	bf00      	nop
 800dae0:	0800daf9 	.word	0x0800daf9
 800dae4:	0800db2d 	.word	0x0800db2d
 800dae8:	0800db61 	.word	0x0800db61
 800daec:	0800db95 	.word	0x0800db95
 800daf0:	0800dbc9 	.word	0x0800dbc9
 800daf4:	0800dbfd 	.word	0x0800dbfd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00b      	beq.n	800db1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	7c12      	ldrb	r2, [r2, #16]
 800db10:	f107 0108 	add.w	r1, r7, #8
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
 800db18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db1a:	e091      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db1c:	6839      	ldr	r1, [r7, #0]
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 facb 	bl	800e0ba <USBD_CtlError>
            err++;
 800db24:	7afb      	ldrb	r3, [r7, #11]
 800db26:	3301      	adds	r3, #1
 800db28:	72fb      	strb	r3, [r7, #11]
          break;
 800db2a:	e089      	b.n	800dc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00b      	beq.n	800db50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db3e:	689b      	ldr	r3, [r3, #8]
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	7c12      	ldrb	r2, [r2, #16]
 800db44:	f107 0108 	add.w	r1, r7, #8
 800db48:	4610      	mov	r0, r2
 800db4a:	4798      	blx	r3
 800db4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db4e:	e077      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db50:	6839      	ldr	r1, [r7, #0]
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f000 fab1 	bl	800e0ba <USBD_CtlError>
            err++;
 800db58:	7afb      	ldrb	r3, [r7, #11]
 800db5a:	3301      	adds	r3, #1
 800db5c:	72fb      	strb	r3, [r7, #11]
          break;
 800db5e:	e06f      	b.n	800dc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db66:	68db      	ldr	r3, [r3, #12]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00b      	beq.n	800db84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	7c12      	ldrb	r2, [r2, #16]
 800db78:	f107 0108 	add.w	r1, r7, #8
 800db7c:	4610      	mov	r0, r2
 800db7e:	4798      	blx	r3
 800db80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db82:	e05d      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800db84:	6839      	ldr	r1, [r7, #0]
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 fa97 	bl	800e0ba <USBD_CtlError>
            err++;
 800db8c:	7afb      	ldrb	r3, [r7, #11]
 800db8e:	3301      	adds	r3, #1
 800db90:	72fb      	strb	r3, [r7, #11]
          break;
 800db92:	e055      	b.n	800dc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db9a:	691b      	ldr	r3, [r3, #16]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d00b      	beq.n	800dbb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dba6:	691b      	ldr	r3, [r3, #16]
 800dba8:	687a      	ldr	r2, [r7, #4]
 800dbaa:	7c12      	ldrb	r2, [r2, #16]
 800dbac:	f107 0108 	add.w	r1, r7, #8
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4798      	blx	r3
 800dbb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbb6:	e043      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbb8:	6839      	ldr	r1, [r7, #0]
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f000 fa7d 	bl	800e0ba <USBD_CtlError>
            err++;
 800dbc0:	7afb      	ldrb	r3, [r7, #11]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	72fb      	strb	r3, [r7, #11]
          break;
 800dbc6:	e03b      	b.n	800dc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbce:	695b      	ldr	r3, [r3, #20]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d00b      	beq.n	800dbec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbda:	695b      	ldr	r3, [r3, #20]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	7c12      	ldrb	r2, [r2, #16]
 800dbe0:	f107 0108 	add.w	r1, r7, #8
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4798      	blx	r3
 800dbe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbea:	e029      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 fa63 	bl	800e0ba <USBD_CtlError>
            err++;
 800dbf4:	7afb      	ldrb	r3, [r7, #11]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbfa:	e021      	b.n	800dc40 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc02:	699b      	ldr	r3, [r3, #24]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d00b      	beq.n	800dc20 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc0e:	699b      	ldr	r3, [r3, #24]
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	7c12      	ldrb	r2, [r2, #16]
 800dc14:	f107 0108 	add.w	r1, r7, #8
 800dc18:	4610      	mov	r0, r2
 800dc1a:	4798      	blx	r3
 800dc1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc1e:	e00f      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 fa49 	bl	800e0ba <USBD_CtlError>
            err++;
 800dc28:	7afb      	ldrb	r3, [r7, #11]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc2e:	e007      	b.n	800dc40 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dc30:	6839      	ldr	r1, [r7, #0]
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f000 fa41 	bl	800e0ba <USBD_CtlError>
          err++;
 800dc38:	7afb      	ldrb	r3, [r7, #11]
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dc3e:	bf00      	nop
      }
      break;
 800dc40:	e037      	b.n	800dcb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	7c1b      	ldrb	r3, [r3, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d109      	bne.n	800dc5e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc52:	f107 0208 	add.w	r2, r7, #8
 800dc56:	4610      	mov	r0, r2
 800dc58:	4798      	blx	r3
 800dc5a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc5c:	e029      	b.n	800dcb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa2a 	bl	800e0ba <USBD_CtlError>
        err++;
 800dc66:	7afb      	ldrb	r3, [r7, #11]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	72fb      	strb	r3, [r7, #11]
      break;
 800dc6c:	e021      	b.n	800dcb2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7c1b      	ldrb	r3, [r3, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10d      	bne.n	800dc92 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	f107 0208 	add.w	r2, r7, #8
 800dc82:	4610      	mov	r0, r2
 800dc84:	4798      	blx	r3
 800dc86:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	2207      	movs	r2, #7
 800dc8e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc90:	e00f      	b.n	800dcb2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 fa10 	bl	800e0ba <USBD_CtlError>
        err++;
 800dc9a:	7afb      	ldrb	r3, [r7, #11]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	72fb      	strb	r3, [r7, #11]
      break;
 800dca0:	e007      	b.n	800dcb2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fa08 	bl	800e0ba <USBD_CtlError>
      err++;
 800dcaa:	7afb      	ldrb	r3, [r7, #11]
 800dcac:	3301      	adds	r3, #1
 800dcae:	72fb      	strb	r3, [r7, #11]
      break;
 800dcb0:	bf00      	nop
  }

  if (err != 0U)
 800dcb2:	7afb      	ldrb	r3, [r7, #11]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d11e      	bne.n	800dcf6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	88db      	ldrh	r3, [r3, #6]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d016      	beq.n	800dcee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800dcc0:	893b      	ldrh	r3, [r7, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	88da      	ldrh	r2, [r3, #6]
 800dcca:	893b      	ldrh	r3, [r7, #8]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	bf28      	it	cs
 800dcd0:	4613      	movcs	r3, r2
 800dcd2:	b29b      	uxth	r3, r3
 800dcd4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dcd6:	893b      	ldrh	r3, [r7, #8]
 800dcd8:	461a      	mov	r2, r3
 800dcda:	68f9      	ldr	r1, [r7, #12]
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fa5d 	bl	800e19c <USBD_CtlSendData>
 800dce2:	e009      	b.n	800dcf8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dce4:	6839      	ldr	r1, [r7, #0]
 800dce6:	6878      	ldr	r0, [r7, #4]
 800dce8:	f000 f9e7 	bl	800e0ba <USBD_CtlError>
 800dcec:	e004      	b.n	800dcf8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 faae 	bl	800e250 <USBD_CtlSendStatus>
 800dcf4:	e000      	b.n	800dcf8 <USBD_GetDescriptor+0x2cc>
    return;
 800dcf6:	bf00      	nop
  }
}
 800dcf8:	3710      	adds	r7, #16
 800dcfa:	46bd      	mov	sp, r7
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop

0800dd00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	889b      	ldrh	r3, [r3, #4]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d131      	bne.n	800dd76 <USBD_SetAddress+0x76>
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	88db      	ldrh	r3, [r3, #6]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d12d      	bne.n	800dd76 <USBD_SetAddress+0x76>
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	885b      	ldrh	r3, [r3, #2]
 800dd1e:	2b7f      	cmp	r3, #127	; 0x7f
 800dd20:	d829      	bhi.n	800dd76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d104      	bne.n	800dd44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dd3a:	6839      	ldr	r1, [r7, #0]
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f000 f9bc 	bl	800e0ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd42:	e01d      	b.n	800dd80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7bfa      	ldrb	r2, [r7, #15]
 800dd48:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd4c:	7bfb      	ldrb	r3, [r7, #15]
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f000 ffc9 	bl	800ece8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fa7a 	bl	800e250 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd5c:	7bfb      	ldrb	r3, [r7, #15]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d004      	beq.n	800dd6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2202      	movs	r2, #2
 800dd66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd6a:	e009      	b.n	800dd80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd74:	e004      	b.n	800dd80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 f99e 	bl	800e0ba <USBD_CtlError>
  }
}
 800dd7e:	bf00      	nop
 800dd80:	bf00      	nop
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	885b      	ldrh	r3, [r3, #2]
 800dd9a:	b2da      	uxtb	r2, r3
 800dd9c:	4b4e      	ldr	r3, [pc, #312]	; (800ded8 <USBD_SetConfig+0x150>)
 800dd9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dda0:	4b4d      	ldr	r3, [pc, #308]	; (800ded8 <USBD_SetConfig+0x150>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b01      	cmp	r3, #1
 800dda6:	d905      	bls.n	800ddb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dda8:	6839      	ldr	r1, [r7, #0]
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 f985 	bl	800e0ba <USBD_CtlError>
    return USBD_FAIL;
 800ddb0:	2303      	movs	r3, #3
 800ddb2:	e08c      	b.n	800dece <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddba:	b2db      	uxtb	r3, r3
 800ddbc:	2b02      	cmp	r3, #2
 800ddbe:	d002      	beq.n	800ddc6 <USBD_SetConfig+0x3e>
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d029      	beq.n	800de18 <USBD_SetConfig+0x90>
 800ddc4:	e075      	b.n	800deb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddc6:	4b44      	ldr	r3, [pc, #272]	; (800ded8 <USBD_SetConfig+0x150>)
 800ddc8:	781b      	ldrb	r3, [r3, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d020      	beq.n	800de10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ddce:	4b42      	ldr	r3, [pc, #264]	; (800ded8 <USBD_SetConfig+0x150>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddd8:	4b3f      	ldr	r3, [pc, #252]	; (800ded8 <USBD_SetConfig+0x150>)
 800ddda:	781b      	ldrb	r3, [r3, #0]
 800dddc:	4619      	mov	r1, r3
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7fe ffe1 	bl	800cda6 <USBD_SetClassConfig>
 800dde4:	4603      	mov	r3, r0
 800dde6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dde8:	7bfb      	ldrb	r3, [r7, #15]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d008      	beq.n	800de00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ddee:	6839      	ldr	r1, [r7, #0]
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f000 f962 	bl	800e0ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ddfe:	e065      	b.n	800decc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fa25 	bl	800e250 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2203      	movs	r2, #3
 800de0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de0e:	e05d      	b.n	800decc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fa1d 	bl	800e250 <USBD_CtlSendStatus>
      break;
 800de16:	e059      	b.n	800decc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de18:	4b2f      	ldr	r3, [pc, #188]	; (800ded8 <USBD_SetConfig+0x150>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d112      	bne.n	800de46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2202      	movs	r2, #2
 800de24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de28:	4b2b      	ldr	r3, [pc, #172]	; (800ded8 <USBD_SetConfig+0x150>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	461a      	mov	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de32:	4b29      	ldr	r3, [pc, #164]	; (800ded8 <USBD_SetConfig+0x150>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	4619      	mov	r1, r3
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	f7fe ffd0 	bl	800cdde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fa06 	bl	800e250 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de44:	e042      	b.n	800decc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800de46:	4b24      	ldr	r3, [pc, #144]	; (800ded8 <USBD_SetConfig+0x150>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	461a      	mov	r2, r3
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	429a      	cmp	r2, r3
 800de52:	d02a      	beq.n	800deaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f7fe ffbe 	bl	800cdde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de62:	4b1d      	ldr	r3, [pc, #116]	; (800ded8 <USBD_SetConfig+0x150>)
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	461a      	mov	r2, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de6c:	4b1a      	ldr	r3, [pc, #104]	; (800ded8 <USBD_SetConfig+0x150>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	4619      	mov	r1, r3
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7fe ff97 	bl	800cda6 <USBD_SetClassConfig>
 800de78:	4603      	mov	r3, r0
 800de7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00f      	beq.n	800dea2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800de82:	6839      	ldr	r1, [r7, #0]
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 f918 	bl	800e0ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	685b      	ldr	r3, [r3, #4]
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	4619      	mov	r1, r3
 800de92:	6878      	ldr	r0, [r7, #4]
 800de94:	f7fe ffa3 	bl	800cdde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2202      	movs	r2, #2
 800de9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dea0:	e014      	b.n	800decc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f9d4 	bl	800e250 <USBD_CtlSendStatus>
      break;
 800dea8:	e010      	b.n	800decc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f9d0 	bl	800e250 <USBD_CtlSendStatus>
      break;
 800deb0:	e00c      	b.n	800decc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 f900 	bl	800e0ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800deba:	4b07      	ldr	r3, [pc, #28]	; (800ded8 <USBD_SetConfig+0x150>)
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7fe ff8c 	bl	800cdde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800dec6:	2303      	movs	r3, #3
 800dec8:	73fb      	strb	r3, [r7, #15]
      break;
 800deca:	bf00      	nop
  }

  return ret;
 800decc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3710      	adds	r7, #16
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
 800ded6:	bf00      	nop
 800ded8:	24001684 	.word	0x24001684

0800dedc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b082      	sub	sp, #8
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	88db      	ldrh	r3, [r3, #6]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d004      	beq.n	800def8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 f8e2 	bl	800e0ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800def6:	e023      	b.n	800df40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b02      	cmp	r3, #2
 800df02:	dc02      	bgt.n	800df0a <USBD_GetConfig+0x2e>
 800df04:	2b00      	cmp	r3, #0
 800df06:	dc03      	bgt.n	800df10 <USBD_GetConfig+0x34>
 800df08:	e015      	b.n	800df36 <USBD_GetConfig+0x5a>
 800df0a:	2b03      	cmp	r3, #3
 800df0c:	d00b      	beq.n	800df26 <USBD_GetConfig+0x4a>
 800df0e:	e012      	b.n	800df36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3308      	adds	r3, #8
 800df1a:	2201      	movs	r2, #1
 800df1c:	4619      	mov	r1, r3
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f93c 	bl	800e19c <USBD_CtlSendData>
        break;
 800df24:	e00c      	b.n	800df40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3304      	adds	r3, #4
 800df2a:	2201      	movs	r2, #1
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f934 	bl	800e19c <USBD_CtlSendData>
        break;
 800df34:	e004      	b.n	800df40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f8be 	bl	800e0ba <USBD_CtlError>
        break;
 800df3e:	bf00      	nop
}
 800df40:	bf00      	nop
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	3b01      	subs	r3, #1
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d81e      	bhi.n	800df9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	88db      	ldrh	r3, [r3, #6]
 800df64:	2b02      	cmp	r3, #2
 800df66:	d004      	beq.n	800df72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df68:	6839      	ldr	r1, [r7, #0]
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f8a5 	bl	800e0ba <USBD_CtlError>
        break;
 800df70:	e01a      	b.n	800dfa8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2201      	movs	r2, #1
 800df76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d005      	beq.n	800df8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f043 0202 	orr.w	r2, r3, #2
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	330c      	adds	r3, #12
 800df92:	2202      	movs	r2, #2
 800df94:	4619      	mov	r1, r3
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f900 	bl	800e19c <USBD_CtlSendData>
      break;
 800df9c:	e004      	b.n	800dfa8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800df9e:	6839      	ldr	r1, [r7, #0]
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 f88a 	bl	800e0ba <USBD_CtlError>
      break;
 800dfa6:	bf00      	nop
  }
}
 800dfa8:	bf00      	nop
 800dfaa:	3708      	adds	r7, #8
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	885b      	ldrh	r3, [r3, #2]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d107      	bne.n	800dfd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 f940 	bl	800e250 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dfd0:	e013      	b.n	800dffa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	885b      	ldrh	r3, [r3, #2]
 800dfd6:	2b02      	cmp	r3, #2
 800dfd8:	d10b      	bne.n	800dff2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	889b      	ldrh	r3, [r3, #4]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	b2da      	uxtb	r2, r3
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 f930 	bl	800e250 <USBD_CtlSendStatus>
}
 800dff0:	e003      	b.n	800dffa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dff2:	6839      	ldr	r1, [r7, #0]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f000 f860 	bl	800e0ba <USBD_CtlError>
}
 800dffa:	bf00      	nop
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}

0800e002 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e002:	b580      	push	{r7, lr}
 800e004:	b082      	sub	sp, #8
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
 800e00a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e012:	b2db      	uxtb	r3, r3
 800e014:	3b01      	subs	r3, #1
 800e016:	2b02      	cmp	r3, #2
 800e018:	d80b      	bhi.n	800e032 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	885b      	ldrh	r3, [r3, #2]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d10c      	bne.n	800e03c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f000 f910 	bl	800e250 <USBD_CtlSendStatus>
      }
      break;
 800e030:	e004      	b.n	800e03c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e032:	6839      	ldr	r1, [r7, #0]
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 f840 	bl	800e0ba <USBD_CtlError>
      break;
 800e03a:	e000      	b.n	800e03e <USBD_ClrFeature+0x3c>
      break;
 800e03c:	bf00      	nop
  }
}
 800e03e:	bf00      	nop
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e046:	b580      	push	{r7, lr}
 800e048:	b084      	sub	sp, #16
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	781a      	ldrb	r2, [r3, #0]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	781a      	ldrb	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3301      	adds	r3, #1
 800e06e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f7ff fa41 	bl	800d4f8 <SWAPBYTE>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3301      	adds	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7ff fa34 	bl	800d4f8 <SWAPBYTE>
 800e090:	4603      	mov	r3, r0
 800e092:	461a      	mov	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3301      	adds	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e0a4:	68f8      	ldr	r0, [r7, #12]
 800e0a6:	f7ff fa27 	bl	800d4f8 <SWAPBYTE>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	80da      	strh	r2, [r3, #6]
}
 800e0b2:	bf00      	nop
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0c4:	2180      	movs	r1, #128	; 0x80
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fda4 	bl	800ec14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fda0 	bl	800ec14 <USBD_LL_StallEP>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b086      	sub	sp, #24
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d036      	beq.n	800e160 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e0f6:	6938      	ldr	r0, [r7, #16]
 800e0f8:	f000 f836 	bl	800e168 <USBD_GetLen>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	3301      	adds	r3, #1
 800e100:	b29b      	uxth	r3, r3
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	b29a      	uxth	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e10a:	7dfb      	ldrb	r3, [r7, #23]
 800e10c:	68ba      	ldr	r2, [r7, #8]
 800e10e:	4413      	add	r3, r2
 800e110:	687a      	ldr	r2, [r7, #4]
 800e112:	7812      	ldrb	r2, [r2, #0]
 800e114:	701a      	strb	r2, [r3, #0]
  idx++;
 800e116:	7dfb      	ldrb	r3, [r7, #23]
 800e118:	3301      	adds	r3, #1
 800e11a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e11c:	7dfb      	ldrb	r3, [r7, #23]
 800e11e:	68ba      	ldr	r2, [r7, #8]
 800e120:	4413      	add	r3, r2
 800e122:	2203      	movs	r2, #3
 800e124:	701a      	strb	r2, [r3, #0]
  idx++;
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	3301      	adds	r3, #1
 800e12a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e12c:	e013      	b.n	800e156 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e12e:	7dfb      	ldrb	r3, [r7, #23]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	4413      	add	r3, r2
 800e134:	693a      	ldr	r2, [r7, #16]
 800e136:	7812      	ldrb	r2, [r2, #0]
 800e138:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	3301      	adds	r3, #1
 800e13e:	613b      	str	r3, [r7, #16]
    idx++;
 800e140:	7dfb      	ldrb	r3, [r7, #23]
 800e142:	3301      	adds	r3, #1
 800e144:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e146:	7dfb      	ldrb	r3, [r7, #23]
 800e148:	68ba      	ldr	r2, [r7, #8]
 800e14a:	4413      	add	r3, r2
 800e14c:	2200      	movs	r2, #0
 800e14e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	3301      	adds	r3, #1
 800e154:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d1e7      	bne.n	800e12e <USBD_GetString+0x52>
 800e15e:	e000      	b.n	800e162 <USBD_GetString+0x86>
    return;
 800e160:	bf00      	nop
  }
}
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e168:	b480      	push	{r7}
 800e16a:	b085      	sub	sp, #20
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e170:	2300      	movs	r3, #0
 800e172:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e178:	e005      	b.n	800e186 <USBD_GetLen+0x1e>
  {
    len++;
 800e17a:	7bfb      	ldrb	r3, [r7, #15]
 800e17c:	3301      	adds	r3, #1
 800e17e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	3301      	adds	r3, #1
 800e184:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1f5      	bne.n	800e17a <USBD_GetLen+0x12>
  }

  return len;
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3714      	adds	r7, #20
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f000 fdaf 	bl	800ed26 <USBD_LL_Transmit>

  return USBD_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b084      	sub	sp, #16
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	60f8      	str	r0, [r7, #12]
 800e1da:	60b9      	str	r1, [r7, #8]
 800e1dc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	68ba      	ldr	r2, [r7, #8]
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f000 fd9e 	bl	800ed26 <USBD_LL_Transmit>

  return USBD_OK;
 800e1ea:	2300      	movs	r3, #0
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}

0800e1f4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	b084      	sub	sp, #16
 800e1f8:	af00      	add	r7, sp, #0
 800e1fa:	60f8      	str	r0, [r7, #12]
 800e1fc:	60b9      	str	r1, [r7, #8]
 800e1fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2203      	movs	r2, #3
 800e204:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	68ba      	ldr	r2, [r7, #8]
 800e21c:	2100      	movs	r1, #0
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f000 fda2 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3710      	adds	r7, #16
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b084      	sub	sp, #16
 800e232:	af00      	add	r7, sp, #0
 800e234:	60f8      	str	r0, [r7, #12]
 800e236:	60b9      	str	r1, [r7, #8]
 800e238:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	68ba      	ldr	r2, [r7, #8]
 800e23e:	2100      	movs	r1, #0
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f000 fd91 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e246:	2300      	movs	r3, #0
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3710      	adds	r7, #16
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2204      	movs	r2, #4
 800e25c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e260:	2300      	movs	r3, #0
 800e262:	2200      	movs	r2, #0
 800e264:	2100      	movs	r1, #0
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fd5d 	bl	800ed26 <USBD_LL_Transmit>

  return USBD_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b082      	sub	sp, #8
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2205      	movs	r2, #5
 800e282:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e286:	2300      	movs	r3, #0
 800e288:	2200      	movs	r2, #0
 800e28a:	2100      	movs	r1, #0
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 fd6b 	bl	800ed68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e292:	2300      	movs	r3, #0
}
 800e294:	4618      	mov	r0, r3
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4913      	ldr	r1, [pc, #76]	; (800e2f0 <MX_USB_DEVICE_Init+0x54>)
 800e2a4:	4813      	ldr	r0, [pc, #76]	; (800e2f4 <MX_USB_DEVICE_Init+0x58>)
 800e2a6:	f7fe fd01 	bl	800ccac <USBD_Init>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e2b0:	f7f3 ff9e 	bl	80021f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e2b4:	4910      	ldr	r1, [pc, #64]	; (800e2f8 <MX_USB_DEVICE_Init+0x5c>)
 800e2b6:	480f      	ldr	r0, [pc, #60]	; (800e2f4 <MX_USB_DEVICE_Init+0x58>)
 800e2b8:	f7fe fd28 	bl	800cd0c <USBD_RegisterClass>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e2c2:	f7f3 ff95 	bl	80021f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e2c6:	490d      	ldr	r1, [pc, #52]	; (800e2fc <MX_USB_DEVICE_Init+0x60>)
 800e2c8:	480a      	ldr	r0, [pc, #40]	; (800e2f4 <MX_USB_DEVICE_Init+0x58>)
 800e2ca:	f7fe fc1f 	bl	800cb0c <USBD_CDC_RegisterInterface>
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d001      	beq.n	800e2d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e2d4:	f7f3 ff8c 	bl	80021f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e2d8:	4806      	ldr	r0, [pc, #24]	; (800e2f4 <MX_USB_DEVICE_Init+0x58>)
 800e2da:	f7fe fd4d 	bl	800cd78 <USBD_Start>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d001      	beq.n	800e2e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e2e4:	f7f3 ff84 	bl	80021f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e2e8:	f7f6 feee 	bl	80050c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e2ec:	bf00      	nop
 800e2ee:	bd80      	pop	{r7, pc}
 800e2f0:	240000c0 	.word	0x240000c0
 800e2f4:	24001688 	.word	0x24001688
 800e2f8:	2400002c 	.word	0x2400002c
 800e2fc:	240000ac 	.word	0x240000ac

0800e300 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e304:	2200      	movs	r2, #0
 800e306:	4905      	ldr	r1, [pc, #20]	; (800e31c <CDC_Init_FS+0x1c>)
 800e308:	4805      	ldr	r0, [pc, #20]	; (800e320 <CDC_Init_FS+0x20>)
 800e30a:	f7fe fc19 	bl	800cb40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e30e:	4905      	ldr	r1, [pc, #20]	; (800e324 <CDC_Init_FS+0x24>)
 800e310:	4803      	ldr	r0, [pc, #12]	; (800e320 <CDC_Init_FS+0x20>)
 800e312:	f7fe fc37 	bl	800cb84 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e316:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e318:	4618      	mov	r0, r3
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	24002164 	.word	0x24002164
 800e320:	24001688 	.word	0x24001688
 800e324:	24001964 	.word	0x24001964

0800e328 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e328:	b480      	push	{r7}
 800e32a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e32c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e32e:	4618      	mov	r0, r3
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	6039      	str	r1, [r7, #0]
 800e342:	71fb      	strb	r3, [r7, #7]
 800e344:	4613      	mov	r3, r2
 800e346:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e348:	79fb      	ldrb	r3, [r7, #7]
 800e34a:	2b23      	cmp	r3, #35	; 0x23
 800e34c:	d84a      	bhi.n	800e3e4 <CDC_Control_FS+0xac>
 800e34e:	a201      	add	r2, pc, #4	; (adr r2, 800e354 <CDC_Control_FS+0x1c>)
 800e350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e354:	0800e3e5 	.word	0x0800e3e5
 800e358:	0800e3e5 	.word	0x0800e3e5
 800e35c:	0800e3e5 	.word	0x0800e3e5
 800e360:	0800e3e5 	.word	0x0800e3e5
 800e364:	0800e3e5 	.word	0x0800e3e5
 800e368:	0800e3e5 	.word	0x0800e3e5
 800e36c:	0800e3e5 	.word	0x0800e3e5
 800e370:	0800e3e5 	.word	0x0800e3e5
 800e374:	0800e3e5 	.word	0x0800e3e5
 800e378:	0800e3e5 	.word	0x0800e3e5
 800e37c:	0800e3e5 	.word	0x0800e3e5
 800e380:	0800e3e5 	.word	0x0800e3e5
 800e384:	0800e3e5 	.word	0x0800e3e5
 800e388:	0800e3e5 	.word	0x0800e3e5
 800e38c:	0800e3e5 	.word	0x0800e3e5
 800e390:	0800e3e5 	.word	0x0800e3e5
 800e394:	0800e3e5 	.word	0x0800e3e5
 800e398:	0800e3e5 	.word	0x0800e3e5
 800e39c:	0800e3e5 	.word	0x0800e3e5
 800e3a0:	0800e3e5 	.word	0x0800e3e5
 800e3a4:	0800e3e5 	.word	0x0800e3e5
 800e3a8:	0800e3e5 	.word	0x0800e3e5
 800e3ac:	0800e3e5 	.word	0x0800e3e5
 800e3b0:	0800e3e5 	.word	0x0800e3e5
 800e3b4:	0800e3e5 	.word	0x0800e3e5
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	0800e3e5 	.word	0x0800e3e5
 800e3c0:	0800e3e5 	.word	0x0800e3e5
 800e3c4:	0800e3e5 	.word	0x0800e3e5
 800e3c8:	0800e3e5 	.word	0x0800e3e5
 800e3cc:	0800e3e5 	.word	0x0800e3e5
 800e3d0:	0800e3e5 	.word	0x0800e3e5
 800e3d4:	0800e3e5 	.word	0x0800e3e5
 800e3d8:	0800e3e5 	.word	0x0800e3e5
 800e3dc:	0800e3e5 	.word	0x0800e3e5
 800e3e0:	0800e3e5 	.word	0x0800e3e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e3e4:	bf00      	nop
  }

  return (USBD_OK);
 800e3e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	370c      	adds	r7, #12
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f2:	4770      	bx	lr

0800e3f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
 800e3fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e3fe:	6879      	ldr	r1, [r7, #4]
 800e400:	480f      	ldr	r0, [pc, #60]	; (800e440 <CDC_Receive_FS+0x4c>)
 800e402:	f7fe fbbf 	bl	800cb84 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e406:	480e      	ldr	r0, [pc, #56]	; (800e440 <CDC_Receive_FS+0x4c>)
 800e408:	f7fe fc1a 	bl	800cc40 <USBD_CDC_ReceivePacket>
  uint32_t len = (uint32_t) *Len;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	60fb      	str	r3, [r7, #12]
  memset(res_buf, '\0', 1024);
 800e412:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e416:	2100      	movs	r1, #0
 800e418:	480a      	ldr	r0, [pc, #40]	; (800e444 <CDC_Receive_FS+0x50>)
 800e41a:	f001 fafa 	bl	800fa12 <memset>
  memcpy(res_buf, Buf, len);
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	6879      	ldr	r1, [r7, #4]
 800e422:	4808      	ldr	r0, [pc, #32]	; (800e444 <CDC_Receive_FS+0x50>)
 800e424:	f001 fb96 	bl	800fb54 <memcpy>
  memset(Buf, '\0', len);
 800e428:	68fa      	ldr	r2, [r7, #12]
 800e42a:	2100      	movs	r1, #0
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f001 faf0 	bl	800fa12 <memset>
  ReciveCommand();
 800e432:	f7f3 f849 	bl	80014c8 <ReciveCommand>
  return (USBD_OK);
 800e436:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	24001688 	.word	0x24001688
 800e444:	240005b8 	.word	0x240005b8

0800e448 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800e44e:	af00      	add	r7, sp, #0
 800e450:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800e454:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800e458:	6018      	str	r0, [r3, #0]
 800e45a:	460a      	mov	r2, r1
 800e45c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800e460:	f2a3 430e 	subw	r3, r3, #1038	; 0x40e
 800e464:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e46c:	4b1d      	ldr	r3, [pc, #116]	; (800e4e4 <CDC_Transmit_FS+0x9c>)
 800e46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e472:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
  if (hcdc->TxState != 0){
 800e476:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800e47a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <CDC_Transmit_FS+0x3e>
    return USBD_BUSY;
 800e482:	2301      	movs	r3, #1
 800e484:	e028      	b.n	800e4d8 <CDC_Transmit_FS+0x90>
  }
  uint8_t buf[1024];
  memset(&buf, '\0', 1024);
 800e486:	f107 0308 	add.w	r3, r7, #8
 800e48a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e48e:	2100      	movs	r1, #0
 800e490:	4618      	mov	r0, r3
 800e492:	f001 fabe 	bl	800fa12 <memset>
  memcpy(&buf, Buf, Len);
 800e496:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800e49a:	f2a3 430e 	subw	r3, r3, #1038	; 0x40e
 800e49e:	881a      	ldrh	r2, [r3, #0]
 800e4a0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800e4a4:	f2a3 430c 	subw	r3, r3, #1036	; 0x40c
 800e4a8:	f107 0008 	add.w	r0, r7, #8
 800e4ac:	6819      	ldr	r1, [r3, #0]
 800e4ae:	f001 fb51 	bl	800fb54 <memcpy>
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, buf, Len);
 800e4b2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800e4b6:	f2a3 430e 	subw	r3, r3, #1038	; 0x40e
 800e4ba:	881a      	ldrh	r2, [r3, #0]
 800e4bc:	f107 0308 	add.w	r3, r7, #8
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4808      	ldr	r0, [pc, #32]	; (800e4e4 <CDC_Transmit_FS+0x9c>)
 800e4c4:	f7fe fb3c 	bl	800cb40 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e4c8:	4806      	ldr	r0, [pc, #24]	; (800e4e4 <CDC_Transmit_FS+0x9c>)
 800e4ca:	f7fe fb79 	bl	800cbc0 <USBD_CDC_TransmitPacket>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
  /* USER CODE END 7 */
  return result;
 800e4d4:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	24001688 	.word	0x24001688

0800e4e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b086      	sub	sp, #24
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  if (byte_to_tx > 0){
 800e4fa:	4b13      	ldr	r3, [pc, #76]	; (800e548 <CDC_TransmitCplt_FS+0x60>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	dd11      	ble.n	800e526 <CDC_TransmitCplt_FS+0x3e>
  	  uint8_t res = CDC_Transmit_FS(tx_buf, strlen((char *)&tx_buf));
 800e502:	4812      	ldr	r0, [pc, #72]	; (800e54c <CDC_TransmitCplt_FS+0x64>)
 800e504:	f7f1 ff3c 	bl	8000380 <strlen>
 800e508:	4603      	mov	r3, r0
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	4619      	mov	r1, r3
 800e50e:	480f      	ldr	r0, [pc, #60]	; (800e54c <CDC_TransmitCplt_FS+0x64>)
 800e510:	f7ff ff9a 	bl	800e448 <CDC_Transmit_FS>
 800e514:	4603      	mov	r3, r0
 800e516:	75bb      	strb	r3, [r7, #22]
  	  if (res == USBD_OK){
 800e518:	7dbb      	ldrb	r3, [r7, #22]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10d      	bne.n	800e53a <CDC_TransmitCplt_FS+0x52>
  		  byte_to_tx = 0;
 800e51e:	4b0a      	ldr	r3, [pc, #40]	; (800e548 <CDC_TransmitCplt_FS+0x60>)
 800e520:	2200      	movs	r2, #0
 800e522:	601a      	str	r2, [r3, #0]
 800e524:	e009      	b.n	800e53a <CDC_TransmitCplt_FS+0x52>
  	  }
  }
  else if (strlen((char *)&tx_buf) > 0){
 800e526:	4b09      	ldr	r3, [pc, #36]	; (800e54c <CDC_TransmitCplt_FS+0x64>)
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d005      	beq.n	800e53a <CDC_TransmitCplt_FS+0x52>
	  memset(tx_buf, '\0', 1024);
 800e52e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e532:	2100      	movs	r1, #0
 800e534:	4805      	ldr	r0, [pc, #20]	; (800e54c <CDC_TransmitCplt_FS+0x64>)
 800e536:	f001 fa6c 	bl	800fa12 <memset>
  //VerifyToTransmit();
  //else{
  //    memset(tx_buf, '\0', 1024);
  //}
  /* USER CODE END 13 */
  return result;
 800e53a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e53e:	4618      	mov	r0, r3
 800e540:	3718      	adds	r7, #24
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	24002d64 	.word	0x24002d64
 800e54c:	24002964 	.word	0x24002964

0800e550 <CDC_Transmit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t CDC_Transmit(uint8_t* Buf, uint16_t Len){
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	807b      	strh	r3, [r7, #2]
	uint8_t res = CDC_Transmit_FS(Buf, Len);
 800e55c:	887b      	ldrh	r3, [r7, #2]
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f7ff ff71 	bl	800e448 <CDC_Transmit_FS>
 800e566:	4603      	mov	r3, r0
 800e568:	73fb      	strb	r3, [r7, #15]
	if (res != USBD_OK){
 800e56a:	7bfb      	ldrb	r3, [r7, #15]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d009      	beq.n	800e584 <CDC_Transmit+0x34>
		strcat((char *)&tx_buf, (char *)Buf);
 800e570:	6879      	ldr	r1, [r7, #4]
 800e572:	4807      	ldr	r0, [pc, #28]	; (800e590 <CDC_Transmit+0x40>)
 800e574:	f001 fa55 	bl	800fa22 <strcat>
		byte_to_tx += Len;
 800e578:	887a      	ldrh	r2, [r7, #2]
 800e57a:	4b06      	ldr	r3, [pc, #24]	; (800e594 <CDC_Transmit+0x44>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4413      	add	r3, r2
 800e580:	4a04      	ldr	r2, [pc, #16]	; (800e594 <CDC_Transmit+0x44>)
 800e582:	6013      	str	r3, [r2, #0]
	}
	return res;
 800e584:	7bfb      	ldrb	r3, [r7, #15]
}
 800e586:	4618      	mov	r0, r3
 800e588:	3710      	adds	r7, #16
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	24002964 	.word	0x24002964
 800e594:	24002d64 	.word	0x24002d64

0800e598 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	6039      	str	r1, [r7, #0]
 800e5a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	2212      	movs	r2, #18
 800e5a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e5aa:	4b03      	ldr	r3, [pc, #12]	; (800e5b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	370c      	adds	r7, #12
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b6:	4770      	bx	lr
 800e5b8:	240000dc 	.word	0x240000dc

0800e5bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	6039      	str	r1, [r7, #0]
 800e5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	2204      	movs	r2, #4
 800e5cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e5ce:	4b03      	ldr	r3, [pc, #12]	; (800e5dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr
 800e5dc:	240000f0 	.word	0x240000f0

0800e5e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b082      	sub	sp, #8
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	6039      	str	r1, [r7, #0]
 800e5ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e5ec:	79fb      	ldrb	r3, [r7, #7]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d105      	bne.n	800e5fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5f2:	683a      	ldr	r2, [r7, #0]
 800e5f4:	4907      	ldr	r1, [pc, #28]	; (800e614 <USBD_FS_ProductStrDescriptor+0x34>)
 800e5f6:	4808      	ldr	r0, [pc, #32]	; (800e618 <USBD_FS_ProductStrDescriptor+0x38>)
 800e5f8:	f7ff fd70 	bl	800e0dc <USBD_GetString>
 800e5fc:	e004      	b.n	800e608 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e5fe:	683a      	ldr	r2, [r7, #0]
 800e600:	4904      	ldr	r1, [pc, #16]	; (800e614 <USBD_FS_ProductStrDescriptor+0x34>)
 800e602:	4805      	ldr	r0, [pc, #20]	; (800e618 <USBD_FS_ProductStrDescriptor+0x38>)
 800e604:	f7ff fd6a 	bl	800e0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e608:	4b02      	ldr	r3, [pc, #8]	; (800e614 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3708      	adds	r7, #8
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	24002d68 	.word	0x24002d68
 800e618:	08011ba0 	.word	0x08011ba0

0800e61c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	4603      	mov	r3, r0
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e628:	683a      	ldr	r2, [r7, #0]
 800e62a:	4904      	ldr	r1, [pc, #16]	; (800e63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e62c:	4804      	ldr	r0, [pc, #16]	; (800e640 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e62e:	f7ff fd55 	bl	800e0dc <USBD_GetString>
  return USBD_StrDesc;
 800e632:	4b02      	ldr	r3, [pc, #8]	; (800e63c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	24002d68 	.word	0x24002d68
 800e640:	08011bb8 	.word	0x08011bb8

0800e644 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	221a      	movs	r2, #26
 800e654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e656:	f000 f843 	bl	800e6e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e65a:	4b02      	ldr	r3, [pc, #8]	; (800e664 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	240000f4 	.word	0x240000f4

0800e668 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	6039      	str	r1, [r7, #0]
 800e672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d105      	bne.n	800e686 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e67a:	683a      	ldr	r2, [r7, #0]
 800e67c:	4907      	ldr	r1, [pc, #28]	; (800e69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e67e:	4808      	ldr	r0, [pc, #32]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e680:	f7ff fd2c 	bl	800e0dc <USBD_GetString>
 800e684:	e004      	b.n	800e690 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	4904      	ldr	r1, [pc, #16]	; (800e69c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e68a:	4805      	ldr	r0, [pc, #20]	; (800e6a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e68c:	f7ff fd26 	bl	800e0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e690:	4b02      	ldr	r3, [pc, #8]	; (800e69c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e692:	4618      	mov	r0, r3
 800e694:	3708      	adds	r7, #8
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
 800e69a:	bf00      	nop
 800e69c:	24002d68 	.word	0x24002d68
 800e6a0:	08011bcc 	.word	0x08011bcc

0800e6a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d105      	bne.n	800e6c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6b6:	683a      	ldr	r2, [r7, #0]
 800e6b8:	4907      	ldr	r1, [pc, #28]	; (800e6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6ba:	4808      	ldr	r0, [pc, #32]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6bc:	f7ff fd0e 	bl	800e0dc <USBD_GetString>
 800e6c0:	e004      	b.n	800e6cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e6c2:	683a      	ldr	r2, [r7, #0]
 800e6c4:	4904      	ldr	r1, [pc, #16]	; (800e6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e6c6:	4805      	ldr	r0, [pc, #20]	; (800e6dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e6c8:	f7ff fd08 	bl	800e0dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6cc:	4b02      	ldr	r3, [pc, #8]	; (800e6d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	24002d68 	.word	0x24002d68
 800e6dc:	08011bd8 	.word	0x08011bd8

0800e6e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e6e6:	4b0f      	ldr	r3, [pc, #60]	; (800e724 <Get_SerialNum+0x44>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e6ec:	4b0e      	ldr	r3, [pc, #56]	; (800e728 <Get_SerialNum+0x48>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e6f2:	4b0e      	ldr	r3, [pc, #56]	; (800e72c <Get_SerialNum+0x4c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e6f8:	68fa      	ldr	r2, [r7, #12]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4413      	add	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d009      	beq.n	800e71a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e706:	2208      	movs	r2, #8
 800e708:	4909      	ldr	r1, [pc, #36]	; (800e730 <Get_SerialNum+0x50>)
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f000 f814 	bl	800e738 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e710:	2204      	movs	r2, #4
 800e712:	4908      	ldr	r1, [pc, #32]	; (800e734 <Get_SerialNum+0x54>)
 800e714:	68b8      	ldr	r0, [r7, #8]
 800e716:	f000 f80f 	bl	800e738 <IntToUnicode>
  }
}
 800e71a:	bf00      	nop
 800e71c:	3710      	adds	r7, #16
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	1ff1e800 	.word	0x1ff1e800
 800e728:	1ff1e804 	.word	0x1ff1e804
 800e72c:	1ff1e808 	.word	0x1ff1e808
 800e730:	240000f6 	.word	0x240000f6
 800e734:	24000106 	.word	0x24000106

0800e738 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e738:	b480      	push	{r7}
 800e73a:	b087      	sub	sp, #28
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	60f8      	str	r0, [r7, #12]
 800e740:	60b9      	str	r1, [r7, #8]
 800e742:	4613      	mov	r3, r2
 800e744:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e746:	2300      	movs	r3, #0
 800e748:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e74a:	2300      	movs	r3, #0
 800e74c:	75fb      	strb	r3, [r7, #23]
 800e74e:	e027      	b.n	800e7a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	0f1b      	lsrs	r3, r3, #28
 800e754:	2b09      	cmp	r3, #9
 800e756:	d80b      	bhi.n	800e770 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	0f1b      	lsrs	r3, r3, #28
 800e75c:	b2da      	uxtb	r2, r3
 800e75e:	7dfb      	ldrb	r3, [r7, #23]
 800e760:	005b      	lsls	r3, r3, #1
 800e762:	4619      	mov	r1, r3
 800e764:	68bb      	ldr	r3, [r7, #8]
 800e766:	440b      	add	r3, r1
 800e768:	3230      	adds	r2, #48	; 0x30
 800e76a:	b2d2      	uxtb	r2, r2
 800e76c:	701a      	strb	r2, [r3, #0]
 800e76e:	e00a      	b.n	800e786 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	0f1b      	lsrs	r3, r3, #28
 800e774:	b2da      	uxtb	r2, r3
 800e776:	7dfb      	ldrb	r3, [r7, #23]
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	4619      	mov	r1, r3
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	440b      	add	r3, r1
 800e780:	3237      	adds	r2, #55	; 0x37
 800e782:	b2d2      	uxtb	r2, r2
 800e784:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	011b      	lsls	r3, r3, #4
 800e78a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e78c:	7dfb      	ldrb	r3, [r7, #23]
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	3301      	adds	r3, #1
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	4413      	add	r3, r2
 800e796:	2200      	movs	r2, #0
 800e798:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
 800e79c:	3301      	adds	r3, #1
 800e79e:	75fb      	strb	r3, [r7, #23]
 800e7a0:	7dfa      	ldrb	r2, [r7, #23]
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3d3      	bcc.n	800e750 <IntToUnicode+0x18>
  }
}
 800e7a8:	bf00      	nop
 800e7aa:	bf00      	nop
 800e7ac:	371c      	adds	r7, #28
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b0ba      	sub	sp, #232	; 0xe8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	601a      	str	r2, [r3, #0]
 800e7c8:	605a      	str	r2, [r3, #4]
 800e7ca:	609a      	str	r2, [r3, #8]
 800e7cc:	60da      	str	r2, [r3, #12]
 800e7ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e7d0:	f107 0310 	add.w	r3, r7, #16
 800e7d4:	22c0      	movs	r2, #192	; 0xc0
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f001 f91a 	bl	800fa12 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a38      	ldr	r2, [pc, #224]	; (800e8c4 <HAL_PCD_MspInit+0x10c>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d169      	bne.n	800e8bc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e7e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 800e7f8:	2312      	movs	r3, #18
 800e7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 800e800:	2303      	movs	r3, #3
 800e802:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800e804:	2302      	movs	r3, #2
 800e806:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800e808:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800e80c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144.0;
 800e80e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e812:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e814:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e81c:	f107 0310 	add.w	r3, r7, #16
 800e820:	4618      	mov	r0, r3
 800e822:	f7f7 fc47 	bl	80060b4 <HAL_RCCEx_PeriphCLKConfig>
 800e826:	4603      	mov	r3, r0
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <HAL_PCD_MspInit+0x78>
    {
      Error_Handler();
 800e82c:	f7f3 fce0 	bl	80021f0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e830:	f7f6 fc4a 	bl	80050c8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e834:	4b24      	ldr	r3, [pc, #144]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e83a:	4a23      	ldr	r2, [pc, #140]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e83c:	f043 0301 	orr.w	r3, r3, #1
 800e840:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e844:	4b20      	ldr	r3, [pc, #128]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e84a:	f003 0301 	and.w	r3, r3, #1
 800e84e:	60fb      	str	r3, [r7, #12]
 800e850:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e852:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e856:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e85a:	2302      	movs	r3, #2
 800e85c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e860:	2300      	movs	r3, #0
 800e862:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e866:	2300      	movs	r3, #0
 800e868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e86c:	230a      	movs	r3, #10
 800e86e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e872:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800e876:	4619      	mov	r1, r3
 800e878:	4814      	ldr	r0, [pc, #80]	; (800e8cc <HAL_PCD_MspInit+0x114>)
 800e87a:	f7f4 ff31 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e87e:	4b12      	ldr	r3, [pc, #72]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e880:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e884:	4a10      	ldr	r2, [pc, #64]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e886:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e88a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e88e:	4b0e      	ldr	r3, [pc, #56]	; (800e8c8 <HAL_PCD_MspInit+0x110>)
 800e890:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e898:	60bb      	str	r3, [r7, #8]
 800e89a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_EP1_IN_IRQn, 0, 0);
 800e89c:	2200      	movs	r2, #0
 800e89e:	2100      	movs	r1, #0
 800e8a0:	2063      	movs	r0, #99	; 0x63
 800e8a2:	f7f4 f984 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_EP1_IN_IRQn);
 800e8a6:	2063      	movs	r0, #99	; 0x63
 800e8a8:	f7f4 f99b 	bl	8002be2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	2065      	movs	r0, #101	; 0x65
 800e8b2:	f7f4 f97c 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e8b6:	2065      	movs	r0, #101	; 0x65
 800e8b8:	f7f4 f993 	bl	8002be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e8bc:	bf00      	nop
 800e8be:	37e8      	adds	r7, #232	; 0xe8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	40080000 	.word	0x40080000
 800e8c8:	58024400 	.word	0x58024400
 800e8cc:	58020000 	.word	0x58020000

0800e8d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe fa93 	bl	800ce12 <USBD_LL_SetupStage>
}
 800e8ec:	bf00      	nop
 800e8ee:	3708      	adds	r7, #8
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e906:	78fa      	ldrb	r2, [r7, #3]
 800e908:	6879      	ldr	r1, [r7, #4]
 800e90a:	4613      	mov	r3, r2
 800e90c:	00db      	lsls	r3, r3, #3
 800e90e:	4413      	add	r3, r2
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	440b      	add	r3, r1
 800e914:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	78fb      	ldrb	r3, [r7, #3]
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7fe facd 	bl	800cebc <USBD_LL_DataOutStage>
}
 800e922:	bf00      	nop
 800e924:	3708      	adds	r7, #8
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b082      	sub	sp, #8
 800e92e:	af00      	add	r7, sp, #0
 800e930:	6078      	str	r0, [r7, #4]
 800e932:	460b      	mov	r3, r1
 800e934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e93c:	78fa      	ldrb	r2, [r7, #3]
 800e93e:	6879      	ldr	r1, [r7, #4]
 800e940:	4613      	mov	r3, r2
 800e942:	00db      	lsls	r3, r3, #3
 800e944:	4413      	add	r3, r2
 800e946:	009b      	lsls	r3, r3, #2
 800e948:	440b      	add	r3, r1
 800e94a:	3348      	adds	r3, #72	; 0x48
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	78fb      	ldrb	r3, [r7, #3]
 800e950:	4619      	mov	r1, r3
 800e952:	f7fe fb66 	bl	800d022 <USBD_LL_DataInStage>
}
 800e956:	bf00      	nop
 800e958:	3708      	adds	r7, #8
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e95e:	b580      	push	{r7, lr}
 800e960:	b082      	sub	sp, #8
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e96c:	4618      	mov	r0, r3
 800e96e:	f7fe fca0 	bl	800d2b2 <USBD_LL_SOF>
}
 800e972:	bf00      	nop
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e982:	2301      	movs	r3, #1
 800e984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d102      	bne.n	800e994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e98e:	2300      	movs	r3, #0
 800e990:	73fb      	strb	r3, [r7, #15]
 800e992:	e008      	b.n	800e9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	691b      	ldr	r3, [r3, #16]
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d102      	bne.n	800e9a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e99c:	2301      	movs	r3, #1
 800e99e:	73fb      	strb	r3, [r7, #15]
 800e9a0:	e001      	b.n	800e9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e9a2:	f7f3 fc25 	bl	80021f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9ac:	7bfa      	ldrb	r2, [r7, #15]
 800e9ae:	4611      	mov	r1, r2
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fe fc3a 	bl	800d22a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7fe fbe2 	bl	800d186 <USBD_LL_Reset>
}
 800e9c2:	bf00      	nop
 800e9c4:	3710      	adds	r7, #16
 800e9c6:	46bd      	mov	sp, r7
 800e9c8:	bd80      	pop	{r7, pc}
	...

0800e9cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fe fc35 	bl	800d24a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	6812      	ldr	r2, [r2, #0]
 800e9ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e9f2:	f043 0301 	orr.w	r3, r3, #1
 800e9f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a1b      	ldr	r3, [r3, #32]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d005      	beq.n	800ea0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea00:	4b04      	ldr	r3, [pc, #16]	; (800ea14 <HAL_PCD_SuspendCallback+0x48>)
 800ea02:	691b      	ldr	r3, [r3, #16]
 800ea04:	4a03      	ldr	r2, [pc, #12]	; (800ea14 <HAL_PCD_SuspendCallback+0x48>)
 800ea06:	f043 0306 	orr.w	r3, r3, #6
 800ea0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	e000ed00 	.word	0xe000ed00

0800ea18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea26:	4618      	mov	r0, r3
 800ea28:	f7fe fc2b 	bl	800d282 <USBD_LL_Resume>
}
 800ea2c:	bf00      	nop
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea46:	78fa      	ldrb	r2, [r7, #3]
 800ea48:	4611      	mov	r1, r2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fc83 	bl	800d356 <USBD_LL_IsoOUTIncomplete>
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}

0800ea58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b082      	sub	sp, #8
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
 800ea60:	460b      	mov	r3, r1
 800ea62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea6a:	78fa      	ldrb	r2, [r7, #3]
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fe fc3f 	bl	800d2f2 <USBD_LL_IsoINIncomplete>
}
 800ea74:	bf00      	nop
 800ea76:	3708      	adds	r7, #8
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}

0800ea7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
 800ea82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe fc95 	bl	800d3ba <USBD_LL_DevConnected>
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe fc92 	bl	800d3d0 <USBD_LL_DevDisconnected>
}
 800eaac:	bf00      	nop
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b082      	sub	sp, #8
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d13e      	bne.n	800eb42 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eac4:	4a21      	ldr	r2, [pc, #132]	; (800eb4c <USBD_LL_Init+0x98>)
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a1f      	ldr	r2, [pc, #124]	; (800eb4c <USBD_LL_Init+0x98>)
 800ead0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ead4:	4b1d      	ldr	r3, [pc, #116]	; (800eb4c <USBD_LL_Init+0x98>)
 800ead6:	4a1e      	ldr	r2, [pc, #120]	; (800eb50 <USBD_LL_Init+0x9c>)
 800ead8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800eada:	4b1c      	ldr	r3, [pc, #112]	; (800eb4c <USBD_LL_Init+0x98>)
 800eadc:	2209      	movs	r2, #9
 800eade:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eae0:	4b1a      	ldr	r3, [pc, #104]	; (800eb4c <USBD_LL_Init+0x98>)
 800eae2:	2202      	movs	r2, #2
 800eae4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eae6:	4b19      	ldr	r3, [pc, #100]	; (800eb4c <USBD_LL_Init+0x98>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eaec:	4b17      	ldr	r3, [pc, #92]	; (800eb4c <USBD_LL_Init+0x98>)
 800eaee:	2202      	movs	r2, #2
 800eaf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eaf2:	4b16      	ldr	r3, [pc, #88]	; (800eb4c <USBD_LL_Init+0x98>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eaf8:	4b14      	ldr	r3, [pc, #80]	; (800eb4c <USBD_LL_Init+0x98>)
 800eafa:	2200      	movs	r2, #0
 800eafc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eafe:	4b13      	ldr	r3, [pc, #76]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800eb04:	4b11      	ldr	r3, [pc, #68]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb06:	2200      	movs	r2, #0
 800eb08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eb0a:	4b10      	ldr	r3, [pc, #64]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eb10:	4b0e      	ldr	r3, [pc, #56]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb12:	2200      	movs	r2, #0
 800eb14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eb16:	480d      	ldr	r0, [pc, #52]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb18:	f7f4 ffc3 	bl	8003aa2 <HAL_PCD_Init>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800eb22:	f7f3 fb65 	bl	80021f0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eb26:	2180      	movs	r1, #128	; 0x80
 800eb28:	4808      	ldr	r0, [pc, #32]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb2a:	f7f6 fa32 	bl	8004f92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eb2e:	2240      	movs	r2, #64	; 0x40
 800eb30:	2100      	movs	r1, #0
 800eb32:	4806      	ldr	r0, [pc, #24]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb34:	f7f6 f9e6 	bl	8004f04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800eb38:	2280      	movs	r2, #128	; 0x80
 800eb3a:	2101      	movs	r1, #1
 800eb3c:	4803      	ldr	r0, [pc, #12]	; (800eb4c <USBD_LL_Init+0x98>)
 800eb3e:	f7f6 f9e1 	bl	8004f04 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800eb42:	2300      	movs	r3, #0
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3708      	adds	r7, #8
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	24002f68 	.word	0x24002f68
 800eb50:	40080000 	.word	0x40080000

0800eb54 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b084      	sub	sp, #16
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb60:	2300      	movs	r3, #0
 800eb62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7f5 f8bd 	bl	8003cea <HAL_PCD_Start>
 800eb70:	4603      	mov	r3, r0
 800eb72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb74:	7bfb      	ldrb	r3, [r7, #15]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f942 	bl	800ee00 <USBD_Get_USB_Status>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb80:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3710      	adds	r7, #16
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}

0800eb8a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b084      	sub	sp, #16
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
 800eb92:	4608      	mov	r0, r1
 800eb94:	4611      	mov	r1, r2
 800eb96:	461a      	mov	r2, r3
 800eb98:	4603      	mov	r3, r0
 800eb9a:	70fb      	strb	r3, [r7, #3]
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	70bb      	strb	r3, [r7, #2]
 800eba0:	4613      	mov	r3, r2
 800eba2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eba4:	2300      	movs	r3, #0
 800eba6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebb2:	78bb      	ldrb	r3, [r7, #2]
 800ebb4:	883a      	ldrh	r2, [r7, #0]
 800ebb6:	78f9      	ldrb	r1, [r7, #3]
 800ebb8:	f7f5 fdbd 	bl	8004736 <HAL_PCD_EP_Open>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebc0:	7bfb      	ldrb	r3, [r7, #15]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f000 f91c 	bl	800ee00 <USBD_Get_USB_Status>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b084      	sub	sp, #16
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	460b      	mov	r3, r1
 800ebe0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebf0:	78fa      	ldrb	r2, [r7, #3]
 800ebf2:	4611      	mov	r1, r2
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f5 fe06 	bl	8004806 <HAL_PCD_EP_Close>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
 800ec00:	4618      	mov	r0, r3
 800ec02:	f000 f8fd 	bl	800ee00 <USBD_Get_USB_Status>
 800ec06:	4603      	mov	r3, r0
 800ec08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec20:	2300      	movs	r3, #0
 800ec22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec24:	2300      	movs	r3, #0
 800ec26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec2e:	78fa      	ldrb	r2, [r7, #3]
 800ec30:	4611      	mov	r1, r2
 800ec32:	4618      	mov	r0, r3
 800ec34:	f7f5 fec0 	bl	80049b8 <HAL_PCD_EP_SetStall>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec3c:	7bfb      	ldrb	r3, [r7, #15]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f000 f8de 	bl	800ee00 <USBD_Get_USB_Status>
 800ec44:	4603      	mov	r3, r0
 800ec46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec52:	b580      	push	{r7, lr}
 800ec54:	b084      	sub	sp, #16
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec62:	2300      	movs	r3, #0
 800ec64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec6c:	78fa      	ldrb	r2, [r7, #3]
 800ec6e:	4611      	mov	r1, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f5 ff05 	bl	8004a80 <HAL_PCD_EP_ClrStall>
 800ec76:	4603      	mov	r3, r0
 800ec78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec7a:	7bfb      	ldrb	r3, [r7, #15]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	f000 f8bf 	bl	800ee00 <USBD_Get_USB_Status>
 800ec82:	4603      	mov	r3, r0
 800ec84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec86:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	460b      	mov	r3, r1
 800ec9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eca2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	da0b      	bge.n	800ecc4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ecac:	78fb      	ldrb	r3, [r7, #3]
 800ecae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecb2:	68f9      	ldr	r1, [r7, #12]
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	4413      	add	r3, r2
 800ecba:	009b      	lsls	r3, r3, #2
 800ecbc:	440b      	add	r3, r1
 800ecbe:	333e      	adds	r3, #62	; 0x3e
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	e00b      	b.n	800ecdc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ecc4:	78fb      	ldrb	r3, [r7, #3]
 800ecc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ecca:	68f9      	ldr	r1, [r7, #12]
 800eccc:	4613      	mov	r3, r2
 800ecce:	00db      	lsls	r3, r3, #3
 800ecd0:	4413      	add	r3, r2
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	440b      	add	r3, r1
 800ecd6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ecda:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3714      	adds	r7, #20
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed02:	78fa      	ldrb	r2, [r7, #3]
 800ed04:	4611      	mov	r1, r2
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f5 fcf0 	bl	80046ec <HAL_PCD_SetAddress>
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 f874 	bl	800ee00 <USBD_Get_USB_Status>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed1e:	4618      	mov	r0, r3
 800ed20:	3710      	adds	r7, #16
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b086      	sub	sp, #24
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	60f8      	str	r0, [r7, #12]
 800ed2e:	607a      	str	r2, [r7, #4]
 800ed30:	603b      	str	r3, [r7, #0]
 800ed32:	460b      	mov	r3, r1
 800ed34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed44:	7af9      	ldrb	r1, [r7, #11]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	f7f5 fdfa 	bl	8004942 <HAL_PCD_EP_Transmit>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	4618      	mov	r0, r3
 800ed56:	f000 f853 	bl	800ee00 <USBD_Get_USB_Status>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ed5e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3718      	adds	r7, #24
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	607a      	str	r2, [r7, #4]
 800ed72:	603b      	str	r3, [r7, #0]
 800ed74:	460b      	mov	r3, r1
 800ed76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ed86:	7af9      	ldrb	r1, [r7, #11]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	f7f5 fd85 	bl	800489a <HAL_PCD_EP_Receive>
 800ed90:	4603      	mov	r3, r0
 800ed92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
 800ed96:	4618      	mov	r0, r3
 800ed98:	f000 f832 	bl	800ee00 <USBD_Get_USB_Status>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eda0:	7dbb      	ldrb	r3, [r7, #22]
}
 800eda2:	4618      	mov	r0, r3
 800eda4:	3718      	adds	r7, #24
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}

0800edaa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edaa:	b580      	push	{r7, lr}
 800edac:	b082      	sub	sp, #8
 800edae:	af00      	add	r7, sp, #0
 800edb0:	6078      	str	r0, [r7, #4]
 800edb2:	460b      	mov	r3, r1
 800edb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800edbc:	78fa      	ldrb	r2, [r7, #3]
 800edbe:	4611      	mov	r1, r2
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7f5 fda6 	bl	8004912 <HAL_PCD_EP_GetRxCount>
 800edc6:	4603      	mov	r3, r0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3708      	adds	r7, #8
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800edd8:	4b03      	ldr	r3, [pc, #12]	; (800ede8 <USBD_static_malloc+0x18>)
}
 800edda:	4618      	mov	r0, r3
 800eddc:	370c      	adds	r7, #12
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	24003474 	.word	0x24003474

0800edec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b085      	sub	sp, #20
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	4603      	mov	r3, r0
 800ee08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee0e:	79fb      	ldrb	r3, [r7, #7]
 800ee10:	2b03      	cmp	r3, #3
 800ee12:	d817      	bhi.n	800ee44 <USBD_Get_USB_Status+0x44>
 800ee14:	a201      	add	r2, pc, #4	; (adr r2, 800ee1c <USBD_Get_USB_Status+0x1c>)
 800ee16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee1a:	bf00      	nop
 800ee1c:	0800ee2d 	.word	0x0800ee2d
 800ee20:	0800ee33 	.word	0x0800ee33
 800ee24:	0800ee39 	.word	0x0800ee39
 800ee28:	0800ee3f 	.word	0x0800ee3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee30:	e00b      	b.n	800ee4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ee32:	2303      	movs	r3, #3
 800ee34:	73fb      	strb	r3, [r7, #15]
    break;
 800ee36:	e008      	b.n	800ee4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee3c:	e005      	b.n	800ee4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ee3e:	2303      	movs	r3, #3
 800ee40:	73fb      	strb	r3, [r7, #15]
    break;
 800ee42:	e002      	b.n	800ee4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ee44:	2303      	movs	r3, #3
 800ee46:	73fb      	strb	r3, [r7, #15]
    break;
 800ee48:	bf00      	nop
  }
  return usb_status;
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3714      	adds	r7, #20
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <atoi>:
 800ee58:	220a      	movs	r2, #10
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	f000 b882 	b.w	800ef64 <strtol>

0800ee60 <_strtol_l.constprop.0>:
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee66:	d001      	beq.n	800ee6c <_strtol_l.constprop.0+0xc>
 800ee68:	2b24      	cmp	r3, #36	; 0x24
 800ee6a:	d906      	bls.n	800ee7a <_strtol_l.constprop.0+0x1a>
 800ee6c:	f000 fe46 	bl	800fafc <__errno>
 800ee70:	2316      	movs	r3, #22
 800ee72:	6003      	str	r3, [r0, #0]
 800ee74:	2000      	movs	r0, #0
 800ee76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ef60 <_strtol_l.constprop.0+0x100>
 800ee7e:	460d      	mov	r5, r1
 800ee80:	462e      	mov	r6, r5
 800ee82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee86:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ee8a:	f017 0708 	ands.w	r7, r7, #8
 800ee8e:	d1f7      	bne.n	800ee80 <_strtol_l.constprop.0+0x20>
 800ee90:	2c2d      	cmp	r4, #45	; 0x2d
 800ee92:	d132      	bne.n	800eefa <_strtol_l.constprop.0+0x9a>
 800ee94:	782c      	ldrb	r4, [r5, #0]
 800ee96:	2701      	movs	r7, #1
 800ee98:	1cb5      	adds	r5, r6, #2
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d05b      	beq.n	800ef56 <_strtol_l.constprop.0+0xf6>
 800ee9e:	2b10      	cmp	r3, #16
 800eea0:	d109      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800eea2:	2c30      	cmp	r4, #48	; 0x30
 800eea4:	d107      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800eea6:	782c      	ldrb	r4, [r5, #0]
 800eea8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eeac:	2c58      	cmp	r4, #88	; 0x58
 800eeae:	d14d      	bne.n	800ef4c <_strtol_l.constprop.0+0xec>
 800eeb0:	786c      	ldrb	r4, [r5, #1]
 800eeb2:	2310      	movs	r3, #16
 800eeb4:	3502      	adds	r5, #2
 800eeb6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eeba:	f108 38ff 	add.w	r8, r8, #4294967295
 800eebe:	f04f 0e00 	mov.w	lr, #0
 800eec2:	fbb8 f9f3 	udiv	r9, r8, r3
 800eec6:	4676      	mov	r6, lr
 800eec8:	fb03 8a19 	mls	sl, r3, r9, r8
 800eecc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800eed0:	f1bc 0f09 	cmp.w	ip, #9
 800eed4:	d816      	bhi.n	800ef04 <_strtol_l.constprop.0+0xa4>
 800eed6:	4664      	mov	r4, ip
 800eed8:	42a3      	cmp	r3, r4
 800eeda:	dd24      	ble.n	800ef26 <_strtol_l.constprop.0+0xc6>
 800eedc:	f1be 3fff 	cmp.w	lr, #4294967295
 800eee0:	d008      	beq.n	800eef4 <_strtol_l.constprop.0+0x94>
 800eee2:	45b1      	cmp	r9, r6
 800eee4:	d31c      	bcc.n	800ef20 <_strtol_l.constprop.0+0xc0>
 800eee6:	d101      	bne.n	800eeec <_strtol_l.constprop.0+0x8c>
 800eee8:	45a2      	cmp	sl, r4
 800eeea:	db19      	blt.n	800ef20 <_strtol_l.constprop.0+0xc0>
 800eeec:	fb06 4603 	mla	r6, r6, r3, r4
 800eef0:	f04f 0e01 	mov.w	lr, #1
 800eef4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eef8:	e7e8      	b.n	800eecc <_strtol_l.constprop.0+0x6c>
 800eefa:	2c2b      	cmp	r4, #43	; 0x2b
 800eefc:	bf04      	itt	eq
 800eefe:	782c      	ldrbeq	r4, [r5, #0]
 800ef00:	1cb5      	addeq	r5, r6, #2
 800ef02:	e7ca      	b.n	800ee9a <_strtol_l.constprop.0+0x3a>
 800ef04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ef08:	f1bc 0f19 	cmp.w	ip, #25
 800ef0c:	d801      	bhi.n	800ef12 <_strtol_l.constprop.0+0xb2>
 800ef0e:	3c37      	subs	r4, #55	; 0x37
 800ef10:	e7e2      	b.n	800eed8 <_strtol_l.constprop.0+0x78>
 800ef12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ef16:	f1bc 0f19 	cmp.w	ip, #25
 800ef1a:	d804      	bhi.n	800ef26 <_strtol_l.constprop.0+0xc6>
 800ef1c:	3c57      	subs	r4, #87	; 0x57
 800ef1e:	e7db      	b.n	800eed8 <_strtol_l.constprop.0+0x78>
 800ef20:	f04f 3eff 	mov.w	lr, #4294967295
 800ef24:	e7e6      	b.n	800eef4 <_strtol_l.constprop.0+0x94>
 800ef26:	f1be 3fff 	cmp.w	lr, #4294967295
 800ef2a:	d105      	bne.n	800ef38 <_strtol_l.constprop.0+0xd8>
 800ef2c:	2322      	movs	r3, #34	; 0x22
 800ef2e:	6003      	str	r3, [r0, #0]
 800ef30:	4646      	mov	r6, r8
 800ef32:	b942      	cbnz	r2, 800ef46 <_strtol_l.constprop.0+0xe6>
 800ef34:	4630      	mov	r0, r6
 800ef36:	e79e      	b.n	800ee76 <_strtol_l.constprop.0+0x16>
 800ef38:	b107      	cbz	r7, 800ef3c <_strtol_l.constprop.0+0xdc>
 800ef3a:	4276      	negs	r6, r6
 800ef3c:	2a00      	cmp	r2, #0
 800ef3e:	d0f9      	beq.n	800ef34 <_strtol_l.constprop.0+0xd4>
 800ef40:	f1be 0f00 	cmp.w	lr, #0
 800ef44:	d000      	beq.n	800ef48 <_strtol_l.constprop.0+0xe8>
 800ef46:	1e69      	subs	r1, r5, #1
 800ef48:	6011      	str	r1, [r2, #0]
 800ef4a:	e7f3      	b.n	800ef34 <_strtol_l.constprop.0+0xd4>
 800ef4c:	2430      	movs	r4, #48	; 0x30
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1b1      	bne.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef52:	2308      	movs	r3, #8
 800ef54:	e7af      	b.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef56:	2c30      	cmp	r4, #48	; 0x30
 800ef58:	d0a5      	beq.n	800eea6 <_strtol_l.constprop.0+0x46>
 800ef5a:	230a      	movs	r3, #10
 800ef5c:	e7ab      	b.n	800eeb6 <_strtol_l.constprop.0+0x56>
 800ef5e:	bf00      	nop
 800ef60:	08011c21 	.word	0x08011c21

0800ef64 <strtol>:
 800ef64:	4613      	mov	r3, r2
 800ef66:	460a      	mov	r2, r1
 800ef68:	4601      	mov	r1, r0
 800ef6a:	4802      	ldr	r0, [pc, #8]	; (800ef74 <strtol+0x10>)
 800ef6c:	6800      	ldr	r0, [r0, #0]
 800ef6e:	f7ff bf77 	b.w	800ee60 <_strtol_l.constprop.0>
 800ef72:	bf00      	nop
 800ef74:	24000168 	.word	0x24000168

0800ef78 <__cvt>:
 800ef78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef7a:	ed2d 8b02 	vpush	{d8}
 800ef7e:	eeb0 8b40 	vmov.f64	d8, d0
 800ef82:	b085      	sub	sp, #20
 800ef84:	4617      	mov	r7, r2
 800ef86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ef88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ef8a:	ee18 2a90 	vmov	r2, s17
 800ef8e:	f025 0520 	bic.w	r5, r5, #32
 800ef92:	2a00      	cmp	r2, #0
 800ef94:	bfb6      	itet	lt
 800ef96:	222d      	movlt	r2, #45	; 0x2d
 800ef98:	2200      	movge	r2, #0
 800ef9a:	eeb1 8b40 	vneglt.f64	d8, d0
 800ef9e:	2d46      	cmp	r5, #70	; 0x46
 800efa0:	460c      	mov	r4, r1
 800efa2:	701a      	strb	r2, [r3, #0]
 800efa4:	d004      	beq.n	800efb0 <__cvt+0x38>
 800efa6:	2d45      	cmp	r5, #69	; 0x45
 800efa8:	d100      	bne.n	800efac <__cvt+0x34>
 800efaa:	3401      	adds	r4, #1
 800efac:	2102      	movs	r1, #2
 800efae:	e000      	b.n	800efb2 <__cvt+0x3a>
 800efb0:	2103      	movs	r1, #3
 800efb2:	ab03      	add	r3, sp, #12
 800efb4:	9301      	str	r3, [sp, #4]
 800efb6:	ab02      	add	r3, sp, #8
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	4622      	mov	r2, r4
 800efbc:	4633      	mov	r3, r6
 800efbe:	eeb0 0b48 	vmov.f64	d0, d8
 800efc2:	f000 fe5d 	bl	800fc80 <_dtoa_r>
 800efc6:	2d47      	cmp	r5, #71	; 0x47
 800efc8:	d101      	bne.n	800efce <__cvt+0x56>
 800efca:	07fb      	lsls	r3, r7, #31
 800efcc:	d51a      	bpl.n	800f004 <__cvt+0x8c>
 800efce:	2d46      	cmp	r5, #70	; 0x46
 800efd0:	eb00 0204 	add.w	r2, r0, r4
 800efd4:	d10c      	bne.n	800eff0 <__cvt+0x78>
 800efd6:	7803      	ldrb	r3, [r0, #0]
 800efd8:	2b30      	cmp	r3, #48	; 0x30
 800efda:	d107      	bne.n	800efec <__cvt+0x74>
 800efdc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	bf1c      	itt	ne
 800efe6:	f1c4 0401 	rsbne	r4, r4, #1
 800efea:	6034      	strne	r4, [r6, #0]
 800efec:	6833      	ldr	r3, [r6, #0]
 800efee:	441a      	add	r2, r3
 800eff0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800eff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eff8:	bf08      	it	eq
 800effa:	9203      	streq	r2, [sp, #12]
 800effc:	2130      	movs	r1, #48	; 0x30
 800effe:	9b03      	ldr	r3, [sp, #12]
 800f000:	4293      	cmp	r3, r2
 800f002:	d307      	bcc.n	800f014 <__cvt+0x9c>
 800f004:	9b03      	ldr	r3, [sp, #12]
 800f006:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f008:	1a1b      	subs	r3, r3, r0
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	b005      	add	sp, #20
 800f00e:	ecbd 8b02 	vpop	{d8}
 800f012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f014:	1c5c      	adds	r4, r3, #1
 800f016:	9403      	str	r4, [sp, #12]
 800f018:	7019      	strb	r1, [r3, #0]
 800f01a:	e7f0      	b.n	800effe <__cvt+0x86>

0800f01c <__exponent>:
 800f01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f01e:	4603      	mov	r3, r0
 800f020:	2900      	cmp	r1, #0
 800f022:	bfb8      	it	lt
 800f024:	4249      	neglt	r1, r1
 800f026:	f803 2b02 	strb.w	r2, [r3], #2
 800f02a:	bfb4      	ite	lt
 800f02c:	222d      	movlt	r2, #45	; 0x2d
 800f02e:	222b      	movge	r2, #43	; 0x2b
 800f030:	2909      	cmp	r1, #9
 800f032:	7042      	strb	r2, [r0, #1]
 800f034:	dd2a      	ble.n	800f08c <__exponent+0x70>
 800f036:	f10d 0207 	add.w	r2, sp, #7
 800f03a:	4617      	mov	r7, r2
 800f03c:	260a      	movs	r6, #10
 800f03e:	4694      	mov	ip, r2
 800f040:	fb91 f5f6 	sdiv	r5, r1, r6
 800f044:	fb06 1415 	mls	r4, r6, r5, r1
 800f048:	3430      	adds	r4, #48	; 0x30
 800f04a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800f04e:	460c      	mov	r4, r1
 800f050:	2c63      	cmp	r4, #99	; 0x63
 800f052:	f102 32ff 	add.w	r2, r2, #4294967295
 800f056:	4629      	mov	r1, r5
 800f058:	dcf1      	bgt.n	800f03e <__exponent+0x22>
 800f05a:	3130      	adds	r1, #48	; 0x30
 800f05c:	f1ac 0402 	sub.w	r4, ip, #2
 800f060:	f802 1c01 	strb.w	r1, [r2, #-1]
 800f064:	1c41      	adds	r1, r0, #1
 800f066:	4622      	mov	r2, r4
 800f068:	42ba      	cmp	r2, r7
 800f06a:	d30a      	bcc.n	800f082 <__exponent+0x66>
 800f06c:	f10d 0209 	add.w	r2, sp, #9
 800f070:	eba2 020c 	sub.w	r2, r2, ip
 800f074:	42bc      	cmp	r4, r7
 800f076:	bf88      	it	hi
 800f078:	2200      	movhi	r2, #0
 800f07a:	4413      	add	r3, r2
 800f07c:	1a18      	subs	r0, r3, r0
 800f07e:	b003      	add	sp, #12
 800f080:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f082:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f086:	f801 5f01 	strb.w	r5, [r1, #1]!
 800f08a:	e7ed      	b.n	800f068 <__exponent+0x4c>
 800f08c:	2330      	movs	r3, #48	; 0x30
 800f08e:	3130      	adds	r1, #48	; 0x30
 800f090:	7083      	strb	r3, [r0, #2]
 800f092:	70c1      	strb	r1, [r0, #3]
 800f094:	1d03      	adds	r3, r0, #4
 800f096:	e7f1      	b.n	800f07c <__exponent+0x60>

0800f098 <_printf_float>:
 800f098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f09c:	b08b      	sub	sp, #44	; 0x2c
 800f09e:	460c      	mov	r4, r1
 800f0a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800f0a4:	4616      	mov	r6, r2
 800f0a6:	461f      	mov	r7, r3
 800f0a8:	4605      	mov	r5, r0
 800f0aa:	f000 fcdd 	bl	800fa68 <_localeconv_r>
 800f0ae:	f8d0 b000 	ldr.w	fp, [r0]
 800f0b2:	4658      	mov	r0, fp
 800f0b4:	f7f1 f964 	bl	8000380 <strlen>
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	9308      	str	r3, [sp, #32]
 800f0bc:	f8d8 3000 	ldr.w	r3, [r8]
 800f0c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f0c4:	6822      	ldr	r2, [r4, #0]
 800f0c6:	3307      	adds	r3, #7
 800f0c8:	f023 0307 	bic.w	r3, r3, #7
 800f0cc:	f103 0108 	add.w	r1, r3, #8
 800f0d0:	f8c8 1000 	str.w	r1, [r8]
 800f0d4:	ed93 0b00 	vldr	d0, [r3]
 800f0d8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800f338 <_printf_float+0x2a0>
 800f0dc:	eeb0 7bc0 	vabs.f64	d7, d0
 800f0e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0e8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800f0ec:	4682      	mov	sl, r0
 800f0ee:	dd24      	ble.n	800f13a <_printf_float+0xa2>
 800f0f0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f8:	d502      	bpl.n	800f100 <_printf_float+0x68>
 800f0fa:	232d      	movs	r3, #45	; 0x2d
 800f0fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f100:	498f      	ldr	r1, [pc, #572]	; (800f340 <_printf_float+0x2a8>)
 800f102:	4b90      	ldr	r3, [pc, #576]	; (800f344 <_printf_float+0x2ac>)
 800f104:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800f108:	bf94      	ite	ls
 800f10a:	4688      	movls	r8, r1
 800f10c:	4698      	movhi	r8, r3
 800f10e:	2303      	movs	r3, #3
 800f110:	6123      	str	r3, [r4, #16]
 800f112:	f022 0204 	bic.w	r2, r2, #4
 800f116:	2300      	movs	r3, #0
 800f118:	6022      	str	r2, [r4, #0]
 800f11a:	9304      	str	r3, [sp, #16]
 800f11c:	9700      	str	r7, [sp, #0]
 800f11e:	4633      	mov	r3, r6
 800f120:	aa09      	add	r2, sp, #36	; 0x24
 800f122:	4621      	mov	r1, r4
 800f124:	4628      	mov	r0, r5
 800f126:	f000 f9d1 	bl	800f4cc <_printf_common>
 800f12a:	3001      	adds	r0, #1
 800f12c:	f040 808a 	bne.w	800f244 <_printf_float+0x1ac>
 800f130:	f04f 30ff 	mov.w	r0, #4294967295
 800f134:	b00b      	add	sp, #44	; 0x2c
 800f136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f13a:	eeb4 0b40 	vcmp.f64	d0, d0
 800f13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f142:	d709      	bvc.n	800f158 <_printf_float+0xc0>
 800f144:	ee10 3a90 	vmov	r3, s1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	bfbc      	itt	lt
 800f14c:	232d      	movlt	r3, #45	; 0x2d
 800f14e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f152:	497d      	ldr	r1, [pc, #500]	; (800f348 <_printf_float+0x2b0>)
 800f154:	4b7d      	ldr	r3, [pc, #500]	; (800f34c <_printf_float+0x2b4>)
 800f156:	e7d5      	b.n	800f104 <_printf_float+0x6c>
 800f158:	6863      	ldr	r3, [r4, #4]
 800f15a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800f15e:	9104      	str	r1, [sp, #16]
 800f160:	1c59      	adds	r1, r3, #1
 800f162:	d13c      	bne.n	800f1de <_printf_float+0x146>
 800f164:	2306      	movs	r3, #6
 800f166:	6063      	str	r3, [r4, #4]
 800f168:	2300      	movs	r3, #0
 800f16a:	9303      	str	r3, [sp, #12]
 800f16c:	ab08      	add	r3, sp, #32
 800f16e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f172:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f176:	ab07      	add	r3, sp, #28
 800f178:	6861      	ldr	r1, [r4, #4]
 800f17a:	9300      	str	r3, [sp, #0]
 800f17c:	6022      	str	r2, [r4, #0]
 800f17e:	f10d 031b 	add.w	r3, sp, #27
 800f182:	4628      	mov	r0, r5
 800f184:	f7ff fef8 	bl	800ef78 <__cvt>
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	9907      	ldr	r1, [sp, #28]
 800f18c:	2b47      	cmp	r3, #71	; 0x47
 800f18e:	4680      	mov	r8, r0
 800f190:	d108      	bne.n	800f1a4 <_printf_float+0x10c>
 800f192:	1cc8      	adds	r0, r1, #3
 800f194:	db02      	blt.n	800f19c <_printf_float+0x104>
 800f196:	6863      	ldr	r3, [r4, #4]
 800f198:	4299      	cmp	r1, r3
 800f19a:	dd41      	ble.n	800f220 <_printf_float+0x188>
 800f19c:	f1a9 0902 	sub.w	r9, r9, #2
 800f1a0:	fa5f f989 	uxtb.w	r9, r9
 800f1a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f1a8:	d820      	bhi.n	800f1ec <_printf_float+0x154>
 800f1aa:	3901      	subs	r1, #1
 800f1ac:	464a      	mov	r2, r9
 800f1ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f1b2:	9107      	str	r1, [sp, #28]
 800f1b4:	f7ff ff32 	bl	800f01c <__exponent>
 800f1b8:	9a08      	ldr	r2, [sp, #32]
 800f1ba:	9004      	str	r0, [sp, #16]
 800f1bc:	1813      	adds	r3, r2, r0
 800f1be:	2a01      	cmp	r2, #1
 800f1c0:	6123      	str	r3, [r4, #16]
 800f1c2:	dc02      	bgt.n	800f1ca <_printf_float+0x132>
 800f1c4:	6822      	ldr	r2, [r4, #0]
 800f1c6:	07d2      	lsls	r2, r2, #31
 800f1c8:	d501      	bpl.n	800f1ce <_printf_float+0x136>
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	6123      	str	r3, [r4, #16]
 800f1ce:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d0a2      	beq.n	800f11c <_printf_float+0x84>
 800f1d6:	232d      	movs	r3, #45	; 0x2d
 800f1d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1dc:	e79e      	b.n	800f11c <_printf_float+0x84>
 800f1de:	9904      	ldr	r1, [sp, #16]
 800f1e0:	2947      	cmp	r1, #71	; 0x47
 800f1e2:	d1c1      	bne.n	800f168 <_printf_float+0xd0>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1bf      	bne.n	800f168 <_printf_float+0xd0>
 800f1e8:	2301      	movs	r3, #1
 800f1ea:	e7bc      	b.n	800f166 <_printf_float+0xce>
 800f1ec:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800f1f0:	d118      	bne.n	800f224 <_printf_float+0x18c>
 800f1f2:	2900      	cmp	r1, #0
 800f1f4:	6863      	ldr	r3, [r4, #4]
 800f1f6:	dd0b      	ble.n	800f210 <_printf_float+0x178>
 800f1f8:	6121      	str	r1, [r4, #16]
 800f1fa:	b913      	cbnz	r3, 800f202 <_printf_float+0x16a>
 800f1fc:	6822      	ldr	r2, [r4, #0]
 800f1fe:	07d0      	lsls	r0, r2, #31
 800f200:	d502      	bpl.n	800f208 <_printf_float+0x170>
 800f202:	3301      	adds	r3, #1
 800f204:	440b      	add	r3, r1
 800f206:	6123      	str	r3, [r4, #16]
 800f208:	2300      	movs	r3, #0
 800f20a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f20c:	9304      	str	r3, [sp, #16]
 800f20e:	e7de      	b.n	800f1ce <_printf_float+0x136>
 800f210:	b913      	cbnz	r3, 800f218 <_printf_float+0x180>
 800f212:	6822      	ldr	r2, [r4, #0]
 800f214:	07d2      	lsls	r2, r2, #31
 800f216:	d501      	bpl.n	800f21c <_printf_float+0x184>
 800f218:	3302      	adds	r3, #2
 800f21a:	e7f4      	b.n	800f206 <_printf_float+0x16e>
 800f21c:	2301      	movs	r3, #1
 800f21e:	e7f2      	b.n	800f206 <_printf_float+0x16e>
 800f220:	f04f 0967 	mov.w	r9, #103	; 0x67
 800f224:	9b08      	ldr	r3, [sp, #32]
 800f226:	4299      	cmp	r1, r3
 800f228:	db05      	blt.n	800f236 <_printf_float+0x19e>
 800f22a:	6823      	ldr	r3, [r4, #0]
 800f22c:	6121      	str	r1, [r4, #16]
 800f22e:	07d8      	lsls	r0, r3, #31
 800f230:	d5ea      	bpl.n	800f208 <_printf_float+0x170>
 800f232:	1c4b      	adds	r3, r1, #1
 800f234:	e7e7      	b.n	800f206 <_printf_float+0x16e>
 800f236:	2900      	cmp	r1, #0
 800f238:	bfd4      	ite	le
 800f23a:	f1c1 0202 	rsble	r2, r1, #2
 800f23e:	2201      	movgt	r2, #1
 800f240:	4413      	add	r3, r2
 800f242:	e7e0      	b.n	800f206 <_printf_float+0x16e>
 800f244:	6823      	ldr	r3, [r4, #0]
 800f246:	055a      	lsls	r2, r3, #21
 800f248:	d407      	bmi.n	800f25a <_printf_float+0x1c2>
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	4642      	mov	r2, r8
 800f24e:	4631      	mov	r1, r6
 800f250:	4628      	mov	r0, r5
 800f252:	47b8      	blx	r7
 800f254:	3001      	adds	r0, #1
 800f256:	d12a      	bne.n	800f2ae <_printf_float+0x216>
 800f258:	e76a      	b.n	800f130 <_printf_float+0x98>
 800f25a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800f25e:	f240 80e0 	bls.w	800f422 <_printf_float+0x38a>
 800f262:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f266:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f26e:	d133      	bne.n	800f2d8 <_printf_float+0x240>
 800f270:	4a37      	ldr	r2, [pc, #220]	; (800f350 <_printf_float+0x2b8>)
 800f272:	2301      	movs	r3, #1
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	47b8      	blx	r7
 800f27a:	3001      	adds	r0, #1
 800f27c:	f43f af58 	beq.w	800f130 <_printf_float+0x98>
 800f280:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f284:	429a      	cmp	r2, r3
 800f286:	db02      	blt.n	800f28e <_printf_float+0x1f6>
 800f288:	6823      	ldr	r3, [r4, #0]
 800f28a:	07d8      	lsls	r0, r3, #31
 800f28c:	d50f      	bpl.n	800f2ae <_printf_float+0x216>
 800f28e:	4653      	mov	r3, sl
 800f290:	465a      	mov	r2, fp
 800f292:	4631      	mov	r1, r6
 800f294:	4628      	mov	r0, r5
 800f296:	47b8      	blx	r7
 800f298:	3001      	adds	r0, #1
 800f29a:	f43f af49 	beq.w	800f130 <_printf_float+0x98>
 800f29e:	f04f 0800 	mov.w	r8, #0
 800f2a2:	f104 091a 	add.w	r9, r4, #26
 800f2a6:	9b08      	ldr	r3, [sp, #32]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	4543      	cmp	r3, r8
 800f2ac:	dc09      	bgt.n	800f2c2 <_printf_float+0x22a>
 800f2ae:	6823      	ldr	r3, [r4, #0]
 800f2b0:	079b      	lsls	r3, r3, #30
 800f2b2:	f100 8106 	bmi.w	800f4c2 <_printf_float+0x42a>
 800f2b6:	68e0      	ldr	r0, [r4, #12]
 800f2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ba:	4298      	cmp	r0, r3
 800f2bc:	bfb8      	it	lt
 800f2be:	4618      	movlt	r0, r3
 800f2c0:	e738      	b.n	800f134 <_printf_float+0x9c>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	464a      	mov	r2, r9
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	f43f af2f 	beq.w	800f130 <_printf_float+0x98>
 800f2d2:	f108 0801 	add.w	r8, r8, #1
 800f2d6:	e7e6      	b.n	800f2a6 <_printf_float+0x20e>
 800f2d8:	9b07      	ldr	r3, [sp, #28]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	dc3a      	bgt.n	800f354 <_printf_float+0x2bc>
 800f2de:	4a1c      	ldr	r2, [pc, #112]	; (800f350 <_printf_float+0x2b8>)
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	4631      	mov	r1, r6
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	47b8      	blx	r7
 800f2e8:	3001      	adds	r0, #1
 800f2ea:	f43f af21 	beq.w	800f130 <_printf_float+0x98>
 800f2ee:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	d102      	bne.n	800f2fc <_printf_float+0x264>
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	07d9      	lsls	r1, r3, #31
 800f2fa:	d5d8      	bpl.n	800f2ae <_printf_float+0x216>
 800f2fc:	4653      	mov	r3, sl
 800f2fe:	465a      	mov	r2, fp
 800f300:	4631      	mov	r1, r6
 800f302:	4628      	mov	r0, r5
 800f304:	47b8      	blx	r7
 800f306:	3001      	adds	r0, #1
 800f308:	f43f af12 	beq.w	800f130 <_printf_float+0x98>
 800f30c:	f04f 0900 	mov.w	r9, #0
 800f310:	f104 0a1a 	add.w	sl, r4, #26
 800f314:	9b07      	ldr	r3, [sp, #28]
 800f316:	425b      	negs	r3, r3
 800f318:	454b      	cmp	r3, r9
 800f31a:	dc01      	bgt.n	800f320 <_printf_float+0x288>
 800f31c:	9b08      	ldr	r3, [sp, #32]
 800f31e:	e795      	b.n	800f24c <_printf_float+0x1b4>
 800f320:	2301      	movs	r3, #1
 800f322:	4652      	mov	r2, sl
 800f324:	4631      	mov	r1, r6
 800f326:	4628      	mov	r0, r5
 800f328:	47b8      	blx	r7
 800f32a:	3001      	adds	r0, #1
 800f32c:	f43f af00 	beq.w	800f130 <_printf_float+0x98>
 800f330:	f109 0901 	add.w	r9, r9, #1
 800f334:	e7ee      	b.n	800f314 <_printf_float+0x27c>
 800f336:	bf00      	nop
 800f338:	ffffffff 	.word	0xffffffff
 800f33c:	7fefffff 	.word	0x7fefffff
 800f340:	08011d21 	.word	0x08011d21
 800f344:	08011d25 	.word	0x08011d25
 800f348:	08011d29 	.word	0x08011d29
 800f34c:	08011d2d 	.word	0x08011d2d
 800f350:	08011d31 	.word	0x08011d31
 800f354:	9a08      	ldr	r2, [sp, #32]
 800f356:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f358:	429a      	cmp	r2, r3
 800f35a:	bfa8      	it	ge
 800f35c:	461a      	movge	r2, r3
 800f35e:	2a00      	cmp	r2, #0
 800f360:	4691      	mov	r9, r2
 800f362:	dc38      	bgt.n	800f3d6 <_printf_float+0x33e>
 800f364:	2300      	movs	r3, #0
 800f366:	9305      	str	r3, [sp, #20]
 800f368:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f36c:	f104 021a 	add.w	r2, r4, #26
 800f370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f372:	9905      	ldr	r1, [sp, #20]
 800f374:	9304      	str	r3, [sp, #16]
 800f376:	eba3 0309 	sub.w	r3, r3, r9
 800f37a:	428b      	cmp	r3, r1
 800f37c:	dc33      	bgt.n	800f3e6 <_printf_float+0x34e>
 800f37e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f382:	429a      	cmp	r2, r3
 800f384:	db3c      	blt.n	800f400 <_printf_float+0x368>
 800f386:	6823      	ldr	r3, [r4, #0]
 800f388:	07da      	lsls	r2, r3, #31
 800f38a:	d439      	bmi.n	800f400 <_printf_float+0x368>
 800f38c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800f390:	eba2 0903 	sub.w	r9, r2, r3
 800f394:	9b04      	ldr	r3, [sp, #16]
 800f396:	1ad2      	subs	r2, r2, r3
 800f398:	4591      	cmp	r9, r2
 800f39a:	bfa8      	it	ge
 800f39c:	4691      	movge	r9, r2
 800f39e:	f1b9 0f00 	cmp.w	r9, #0
 800f3a2:	dc35      	bgt.n	800f410 <_printf_float+0x378>
 800f3a4:	f04f 0800 	mov.w	r8, #0
 800f3a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f3ac:	f104 0a1a 	add.w	sl, r4, #26
 800f3b0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800f3b4:	1a9b      	subs	r3, r3, r2
 800f3b6:	eba3 0309 	sub.w	r3, r3, r9
 800f3ba:	4543      	cmp	r3, r8
 800f3bc:	f77f af77 	ble.w	800f2ae <_printf_float+0x216>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	4652      	mov	r2, sl
 800f3c4:	4631      	mov	r1, r6
 800f3c6:	4628      	mov	r0, r5
 800f3c8:	47b8      	blx	r7
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	f43f aeb0 	beq.w	800f130 <_printf_float+0x98>
 800f3d0:	f108 0801 	add.w	r8, r8, #1
 800f3d4:	e7ec      	b.n	800f3b0 <_printf_float+0x318>
 800f3d6:	4613      	mov	r3, r2
 800f3d8:	4631      	mov	r1, r6
 800f3da:	4642      	mov	r2, r8
 800f3dc:	4628      	mov	r0, r5
 800f3de:	47b8      	blx	r7
 800f3e0:	3001      	adds	r0, #1
 800f3e2:	d1bf      	bne.n	800f364 <_printf_float+0x2cc>
 800f3e4:	e6a4      	b.n	800f130 <_printf_float+0x98>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	4631      	mov	r1, r6
 800f3ea:	4628      	mov	r0, r5
 800f3ec:	9204      	str	r2, [sp, #16]
 800f3ee:	47b8      	blx	r7
 800f3f0:	3001      	adds	r0, #1
 800f3f2:	f43f ae9d 	beq.w	800f130 <_printf_float+0x98>
 800f3f6:	9b05      	ldr	r3, [sp, #20]
 800f3f8:	9a04      	ldr	r2, [sp, #16]
 800f3fa:	3301      	adds	r3, #1
 800f3fc:	9305      	str	r3, [sp, #20]
 800f3fe:	e7b7      	b.n	800f370 <_printf_float+0x2d8>
 800f400:	4653      	mov	r3, sl
 800f402:	465a      	mov	r2, fp
 800f404:	4631      	mov	r1, r6
 800f406:	4628      	mov	r0, r5
 800f408:	47b8      	blx	r7
 800f40a:	3001      	adds	r0, #1
 800f40c:	d1be      	bne.n	800f38c <_printf_float+0x2f4>
 800f40e:	e68f      	b.n	800f130 <_printf_float+0x98>
 800f410:	9a04      	ldr	r2, [sp, #16]
 800f412:	464b      	mov	r3, r9
 800f414:	4442      	add	r2, r8
 800f416:	4631      	mov	r1, r6
 800f418:	4628      	mov	r0, r5
 800f41a:	47b8      	blx	r7
 800f41c:	3001      	adds	r0, #1
 800f41e:	d1c1      	bne.n	800f3a4 <_printf_float+0x30c>
 800f420:	e686      	b.n	800f130 <_printf_float+0x98>
 800f422:	9a08      	ldr	r2, [sp, #32]
 800f424:	2a01      	cmp	r2, #1
 800f426:	dc01      	bgt.n	800f42c <_printf_float+0x394>
 800f428:	07db      	lsls	r3, r3, #31
 800f42a:	d537      	bpl.n	800f49c <_printf_float+0x404>
 800f42c:	2301      	movs	r3, #1
 800f42e:	4642      	mov	r2, r8
 800f430:	4631      	mov	r1, r6
 800f432:	4628      	mov	r0, r5
 800f434:	47b8      	blx	r7
 800f436:	3001      	adds	r0, #1
 800f438:	f43f ae7a 	beq.w	800f130 <_printf_float+0x98>
 800f43c:	4653      	mov	r3, sl
 800f43e:	465a      	mov	r2, fp
 800f440:	4631      	mov	r1, r6
 800f442:	4628      	mov	r0, r5
 800f444:	47b8      	blx	r7
 800f446:	3001      	adds	r0, #1
 800f448:	f43f ae72 	beq.w	800f130 <_printf_float+0x98>
 800f44c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f450:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f458:	9b08      	ldr	r3, [sp, #32]
 800f45a:	d01a      	beq.n	800f492 <_printf_float+0x3fa>
 800f45c:	3b01      	subs	r3, #1
 800f45e:	f108 0201 	add.w	r2, r8, #1
 800f462:	4631      	mov	r1, r6
 800f464:	4628      	mov	r0, r5
 800f466:	47b8      	blx	r7
 800f468:	3001      	adds	r0, #1
 800f46a:	d10e      	bne.n	800f48a <_printf_float+0x3f2>
 800f46c:	e660      	b.n	800f130 <_printf_float+0x98>
 800f46e:	2301      	movs	r3, #1
 800f470:	464a      	mov	r2, r9
 800f472:	4631      	mov	r1, r6
 800f474:	4628      	mov	r0, r5
 800f476:	47b8      	blx	r7
 800f478:	3001      	adds	r0, #1
 800f47a:	f43f ae59 	beq.w	800f130 <_printf_float+0x98>
 800f47e:	f108 0801 	add.w	r8, r8, #1
 800f482:	9b08      	ldr	r3, [sp, #32]
 800f484:	3b01      	subs	r3, #1
 800f486:	4543      	cmp	r3, r8
 800f488:	dcf1      	bgt.n	800f46e <_printf_float+0x3d6>
 800f48a:	9b04      	ldr	r3, [sp, #16]
 800f48c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f490:	e6dd      	b.n	800f24e <_printf_float+0x1b6>
 800f492:	f04f 0800 	mov.w	r8, #0
 800f496:	f104 091a 	add.w	r9, r4, #26
 800f49a:	e7f2      	b.n	800f482 <_printf_float+0x3ea>
 800f49c:	2301      	movs	r3, #1
 800f49e:	4642      	mov	r2, r8
 800f4a0:	e7df      	b.n	800f462 <_printf_float+0x3ca>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	464a      	mov	r2, r9
 800f4a6:	4631      	mov	r1, r6
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	47b8      	blx	r7
 800f4ac:	3001      	adds	r0, #1
 800f4ae:	f43f ae3f 	beq.w	800f130 <_printf_float+0x98>
 800f4b2:	f108 0801 	add.w	r8, r8, #1
 800f4b6:	68e3      	ldr	r3, [r4, #12]
 800f4b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f4ba:	1a5b      	subs	r3, r3, r1
 800f4bc:	4543      	cmp	r3, r8
 800f4be:	dcf0      	bgt.n	800f4a2 <_printf_float+0x40a>
 800f4c0:	e6f9      	b.n	800f2b6 <_printf_float+0x21e>
 800f4c2:	f04f 0800 	mov.w	r8, #0
 800f4c6:	f104 0919 	add.w	r9, r4, #25
 800f4ca:	e7f4      	b.n	800f4b6 <_printf_float+0x41e>

0800f4cc <_printf_common>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	4616      	mov	r6, r2
 800f4d2:	4699      	mov	r9, r3
 800f4d4:	688a      	ldr	r2, [r1, #8]
 800f4d6:	690b      	ldr	r3, [r1, #16]
 800f4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f4dc:	4293      	cmp	r3, r2
 800f4de:	bfb8      	it	lt
 800f4e0:	4613      	movlt	r3, r2
 800f4e2:	6033      	str	r3, [r6, #0]
 800f4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f4e8:	4607      	mov	r7, r0
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	b10a      	cbz	r2, 800f4f2 <_printf_common+0x26>
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	6033      	str	r3, [r6, #0]
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	0699      	lsls	r1, r3, #26
 800f4f6:	bf42      	ittt	mi
 800f4f8:	6833      	ldrmi	r3, [r6, #0]
 800f4fa:	3302      	addmi	r3, #2
 800f4fc:	6033      	strmi	r3, [r6, #0]
 800f4fe:	6825      	ldr	r5, [r4, #0]
 800f500:	f015 0506 	ands.w	r5, r5, #6
 800f504:	d106      	bne.n	800f514 <_printf_common+0x48>
 800f506:	f104 0a19 	add.w	sl, r4, #25
 800f50a:	68e3      	ldr	r3, [r4, #12]
 800f50c:	6832      	ldr	r2, [r6, #0]
 800f50e:	1a9b      	subs	r3, r3, r2
 800f510:	42ab      	cmp	r3, r5
 800f512:	dc26      	bgt.n	800f562 <_printf_common+0x96>
 800f514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f518:	1e13      	subs	r3, r2, #0
 800f51a:	6822      	ldr	r2, [r4, #0]
 800f51c:	bf18      	it	ne
 800f51e:	2301      	movne	r3, #1
 800f520:	0692      	lsls	r2, r2, #26
 800f522:	d42b      	bmi.n	800f57c <_printf_common+0xb0>
 800f524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f528:	4649      	mov	r1, r9
 800f52a:	4638      	mov	r0, r7
 800f52c:	47c0      	blx	r8
 800f52e:	3001      	adds	r0, #1
 800f530:	d01e      	beq.n	800f570 <_printf_common+0xa4>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	6922      	ldr	r2, [r4, #16]
 800f536:	f003 0306 	and.w	r3, r3, #6
 800f53a:	2b04      	cmp	r3, #4
 800f53c:	bf02      	ittt	eq
 800f53e:	68e5      	ldreq	r5, [r4, #12]
 800f540:	6833      	ldreq	r3, [r6, #0]
 800f542:	1aed      	subeq	r5, r5, r3
 800f544:	68a3      	ldr	r3, [r4, #8]
 800f546:	bf0c      	ite	eq
 800f548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f54c:	2500      	movne	r5, #0
 800f54e:	4293      	cmp	r3, r2
 800f550:	bfc4      	itt	gt
 800f552:	1a9b      	subgt	r3, r3, r2
 800f554:	18ed      	addgt	r5, r5, r3
 800f556:	2600      	movs	r6, #0
 800f558:	341a      	adds	r4, #26
 800f55a:	42b5      	cmp	r5, r6
 800f55c:	d11a      	bne.n	800f594 <_printf_common+0xc8>
 800f55e:	2000      	movs	r0, #0
 800f560:	e008      	b.n	800f574 <_printf_common+0xa8>
 800f562:	2301      	movs	r3, #1
 800f564:	4652      	mov	r2, sl
 800f566:	4649      	mov	r1, r9
 800f568:	4638      	mov	r0, r7
 800f56a:	47c0      	blx	r8
 800f56c:	3001      	adds	r0, #1
 800f56e:	d103      	bne.n	800f578 <_printf_common+0xac>
 800f570:	f04f 30ff 	mov.w	r0, #4294967295
 800f574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f578:	3501      	adds	r5, #1
 800f57a:	e7c6      	b.n	800f50a <_printf_common+0x3e>
 800f57c:	18e1      	adds	r1, r4, r3
 800f57e:	1c5a      	adds	r2, r3, #1
 800f580:	2030      	movs	r0, #48	; 0x30
 800f582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f586:	4422      	add	r2, r4
 800f588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f590:	3302      	adds	r3, #2
 800f592:	e7c7      	b.n	800f524 <_printf_common+0x58>
 800f594:	2301      	movs	r3, #1
 800f596:	4622      	mov	r2, r4
 800f598:	4649      	mov	r1, r9
 800f59a:	4638      	mov	r0, r7
 800f59c:	47c0      	blx	r8
 800f59e:	3001      	adds	r0, #1
 800f5a0:	d0e6      	beq.n	800f570 <_printf_common+0xa4>
 800f5a2:	3601      	adds	r6, #1
 800f5a4:	e7d9      	b.n	800f55a <_printf_common+0x8e>
	...

0800f5a8 <_printf_i>:
 800f5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5ac:	7e0f      	ldrb	r7, [r1, #24]
 800f5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f5b0:	2f78      	cmp	r7, #120	; 0x78
 800f5b2:	4691      	mov	r9, r2
 800f5b4:	4680      	mov	r8, r0
 800f5b6:	460c      	mov	r4, r1
 800f5b8:	469a      	mov	sl, r3
 800f5ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f5be:	d807      	bhi.n	800f5d0 <_printf_i+0x28>
 800f5c0:	2f62      	cmp	r7, #98	; 0x62
 800f5c2:	d80a      	bhi.n	800f5da <_printf_i+0x32>
 800f5c4:	2f00      	cmp	r7, #0
 800f5c6:	f000 80d4 	beq.w	800f772 <_printf_i+0x1ca>
 800f5ca:	2f58      	cmp	r7, #88	; 0x58
 800f5cc:	f000 80c0 	beq.w	800f750 <_printf_i+0x1a8>
 800f5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f5d8:	e03a      	b.n	800f650 <_printf_i+0xa8>
 800f5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f5de:	2b15      	cmp	r3, #21
 800f5e0:	d8f6      	bhi.n	800f5d0 <_printf_i+0x28>
 800f5e2:	a101      	add	r1, pc, #4	; (adr r1, 800f5e8 <_printf_i+0x40>)
 800f5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f5e8:	0800f641 	.word	0x0800f641
 800f5ec:	0800f655 	.word	0x0800f655
 800f5f0:	0800f5d1 	.word	0x0800f5d1
 800f5f4:	0800f5d1 	.word	0x0800f5d1
 800f5f8:	0800f5d1 	.word	0x0800f5d1
 800f5fc:	0800f5d1 	.word	0x0800f5d1
 800f600:	0800f655 	.word	0x0800f655
 800f604:	0800f5d1 	.word	0x0800f5d1
 800f608:	0800f5d1 	.word	0x0800f5d1
 800f60c:	0800f5d1 	.word	0x0800f5d1
 800f610:	0800f5d1 	.word	0x0800f5d1
 800f614:	0800f759 	.word	0x0800f759
 800f618:	0800f681 	.word	0x0800f681
 800f61c:	0800f713 	.word	0x0800f713
 800f620:	0800f5d1 	.word	0x0800f5d1
 800f624:	0800f5d1 	.word	0x0800f5d1
 800f628:	0800f77b 	.word	0x0800f77b
 800f62c:	0800f5d1 	.word	0x0800f5d1
 800f630:	0800f681 	.word	0x0800f681
 800f634:	0800f5d1 	.word	0x0800f5d1
 800f638:	0800f5d1 	.word	0x0800f5d1
 800f63c:	0800f71b 	.word	0x0800f71b
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	1d1a      	adds	r2, r3, #4
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	602a      	str	r2, [r5, #0]
 800f648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f650:	2301      	movs	r3, #1
 800f652:	e09f      	b.n	800f794 <_printf_i+0x1ec>
 800f654:	6820      	ldr	r0, [r4, #0]
 800f656:	682b      	ldr	r3, [r5, #0]
 800f658:	0607      	lsls	r7, r0, #24
 800f65a:	f103 0104 	add.w	r1, r3, #4
 800f65e:	6029      	str	r1, [r5, #0]
 800f660:	d501      	bpl.n	800f666 <_printf_i+0xbe>
 800f662:	681e      	ldr	r6, [r3, #0]
 800f664:	e003      	b.n	800f66e <_printf_i+0xc6>
 800f666:	0646      	lsls	r6, r0, #25
 800f668:	d5fb      	bpl.n	800f662 <_printf_i+0xba>
 800f66a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f66e:	2e00      	cmp	r6, #0
 800f670:	da03      	bge.n	800f67a <_printf_i+0xd2>
 800f672:	232d      	movs	r3, #45	; 0x2d
 800f674:	4276      	negs	r6, r6
 800f676:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f67a:	485a      	ldr	r0, [pc, #360]	; (800f7e4 <_printf_i+0x23c>)
 800f67c:	230a      	movs	r3, #10
 800f67e:	e012      	b.n	800f6a6 <_printf_i+0xfe>
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	6820      	ldr	r0, [r4, #0]
 800f684:	1d19      	adds	r1, r3, #4
 800f686:	6029      	str	r1, [r5, #0]
 800f688:	0605      	lsls	r5, r0, #24
 800f68a:	d501      	bpl.n	800f690 <_printf_i+0xe8>
 800f68c:	681e      	ldr	r6, [r3, #0]
 800f68e:	e002      	b.n	800f696 <_printf_i+0xee>
 800f690:	0641      	lsls	r1, r0, #25
 800f692:	d5fb      	bpl.n	800f68c <_printf_i+0xe4>
 800f694:	881e      	ldrh	r6, [r3, #0]
 800f696:	4853      	ldr	r0, [pc, #332]	; (800f7e4 <_printf_i+0x23c>)
 800f698:	2f6f      	cmp	r7, #111	; 0x6f
 800f69a:	bf0c      	ite	eq
 800f69c:	2308      	moveq	r3, #8
 800f69e:	230a      	movne	r3, #10
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f6a6:	6865      	ldr	r5, [r4, #4]
 800f6a8:	60a5      	str	r5, [r4, #8]
 800f6aa:	2d00      	cmp	r5, #0
 800f6ac:	bfa2      	ittt	ge
 800f6ae:	6821      	ldrge	r1, [r4, #0]
 800f6b0:	f021 0104 	bicge.w	r1, r1, #4
 800f6b4:	6021      	strge	r1, [r4, #0]
 800f6b6:	b90e      	cbnz	r6, 800f6bc <_printf_i+0x114>
 800f6b8:	2d00      	cmp	r5, #0
 800f6ba:	d04b      	beq.n	800f754 <_printf_i+0x1ac>
 800f6bc:	4615      	mov	r5, r2
 800f6be:	fbb6 f1f3 	udiv	r1, r6, r3
 800f6c2:	fb03 6711 	mls	r7, r3, r1, r6
 800f6c6:	5dc7      	ldrb	r7, [r0, r7]
 800f6c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f6cc:	4637      	mov	r7, r6
 800f6ce:	42bb      	cmp	r3, r7
 800f6d0:	460e      	mov	r6, r1
 800f6d2:	d9f4      	bls.n	800f6be <_printf_i+0x116>
 800f6d4:	2b08      	cmp	r3, #8
 800f6d6:	d10b      	bne.n	800f6f0 <_printf_i+0x148>
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	07de      	lsls	r6, r3, #31
 800f6dc:	d508      	bpl.n	800f6f0 <_printf_i+0x148>
 800f6de:	6923      	ldr	r3, [r4, #16]
 800f6e0:	6861      	ldr	r1, [r4, #4]
 800f6e2:	4299      	cmp	r1, r3
 800f6e4:	bfde      	ittt	le
 800f6e6:	2330      	movle	r3, #48	; 0x30
 800f6e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f6ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f6f0:	1b52      	subs	r2, r2, r5
 800f6f2:	6122      	str	r2, [r4, #16]
 800f6f4:	f8cd a000 	str.w	sl, [sp]
 800f6f8:	464b      	mov	r3, r9
 800f6fa:	aa03      	add	r2, sp, #12
 800f6fc:	4621      	mov	r1, r4
 800f6fe:	4640      	mov	r0, r8
 800f700:	f7ff fee4 	bl	800f4cc <_printf_common>
 800f704:	3001      	adds	r0, #1
 800f706:	d14a      	bne.n	800f79e <_printf_i+0x1f6>
 800f708:	f04f 30ff 	mov.w	r0, #4294967295
 800f70c:	b004      	add	sp, #16
 800f70e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f712:	6823      	ldr	r3, [r4, #0]
 800f714:	f043 0320 	orr.w	r3, r3, #32
 800f718:	6023      	str	r3, [r4, #0]
 800f71a:	4833      	ldr	r0, [pc, #204]	; (800f7e8 <_printf_i+0x240>)
 800f71c:	2778      	movs	r7, #120	; 0x78
 800f71e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f722:	6823      	ldr	r3, [r4, #0]
 800f724:	6829      	ldr	r1, [r5, #0]
 800f726:	061f      	lsls	r7, r3, #24
 800f728:	f851 6b04 	ldr.w	r6, [r1], #4
 800f72c:	d402      	bmi.n	800f734 <_printf_i+0x18c>
 800f72e:	065f      	lsls	r7, r3, #25
 800f730:	bf48      	it	mi
 800f732:	b2b6      	uxthmi	r6, r6
 800f734:	07df      	lsls	r7, r3, #31
 800f736:	bf48      	it	mi
 800f738:	f043 0320 	orrmi.w	r3, r3, #32
 800f73c:	6029      	str	r1, [r5, #0]
 800f73e:	bf48      	it	mi
 800f740:	6023      	strmi	r3, [r4, #0]
 800f742:	b91e      	cbnz	r6, 800f74c <_printf_i+0x1a4>
 800f744:	6823      	ldr	r3, [r4, #0]
 800f746:	f023 0320 	bic.w	r3, r3, #32
 800f74a:	6023      	str	r3, [r4, #0]
 800f74c:	2310      	movs	r3, #16
 800f74e:	e7a7      	b.n	800f6a0 <_printf_i+0xf8>
 800f750:	4824      	ldr	r0, [pc, #144]	; (800f7e4 <_printf_i+0x23c>)
 800f752:	e7e4      	b.n	800f71e <_printf_i+0x176>
 800f754:	4615      	mov	r5, r2
 800f756:	e7bd      	b.n	800f6d4 <_printf_i+0x12c>
 800f758:	682b      	ldr	r3, [r5, #0]
 800f75a:	6826      	ldr	r6, [r4, #0]
 800f75c:	6961      	ldr	r1, [r4, #20]
 800f75e:	1d18      	adds	r0, r3, #4
 800f760:	6028      	str	r0, [r5, #0]
 800f762:	0635      	lsls	r5, r6, #24
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	d501      	bpl.n	800f76c <_printf_i+0x1c4>
 800f768:	6019      	str	r1, [r3, #0]
 800f76a:	e002      	b.n	800f772 <_printf_i+0x1ca>
 800f76c:	0670      	lsls	r0, r6, #25
 800f76e:	d5fb      	bpl.n	800f768 <_printf_i+0x1c0>
 800f770:	8019      	strh	r1, [r3, #0]
 800f772:	2300      	movs	r3, #0
 800f774:	6123      	str	r3, [r4, #16]
 800f776:	4615      	mov	r5, r2
 800f778:	e7bc      	b.n	800f6f4 <_printf_i+0x14c>
 800f77a:	682b      	ldr	r3, [r5, #0]
 800f77c:	1d1a      	adds	r2, r3, #4
 800f77e:	602a      	str	r2, [r5, #0]
 800f780:	681d      	ldr	r5, [r3, #0]
 800f782:	6862      	ldr	r2, [r4, #4]
 800f784:	2100      	movs	r1, #0
 800f786:	4628      	mov	r0, r5
 800f788:	f7f0 fdaa 	bl	80002e0 <memchr>
 800f78c:	b108      	cbz	r0, 800f792 <_printf_i+0x1ea>
 800f78e:	1b40      	subs	r0, r0, r5
 800f790:	6060      	str	r0, [r4, #4]
 800f792:	6863      	ldr	r3, [r4, #4]
 800f794:	6123      	str	r3, [r4, #16]
 800f796:	2300      	movs	r3, #0
 800f798:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f79c:	e7aa      	b.n	800f6f4 <_printf_i+0x14c>
 800f79e:	6923      	ldr	r3, [r4, #16]
 800f7a0:	462a      	mov	r2, r5
 800f7a2:	4649      	mov	r1, r9
 800f7a4:	4640      	mov	r0, r8
 800f7a6:	47d0      	blx	sl
 800f7a8:	3001      	adds	r0, #1
 800f7aa:	d0ad      	beq.n	800f708 <_printf_i+0x160>
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	079b      	lsls	r3, r3, #30
 800f7b0:	d413      	bmi.n	800f7da <_printf_i+0x232>
 800f7b2:	68e0      	ldr	r0, [r4, #12]
 800f7b4:	9b03      	ldr	r3, [sp, #12]
 800f7b6:	4298      	cmp	r0, r3
 800f7b8:	bfb8      	it	lt
 800f7ba:	4618      	movlt	r0, r3
 800f7bc:	e7a6      	b.n	800f70c <_printf_i+0x164>
 800f7be:	2301      	movs	r3, #1
 800f7c0:	4632      	mov	r2, r6
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	4640      	mov	r0, r8
 800f7c6:	47d0      	blx	sl
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d09d      	beq.n	800f708 <_printf_i+0x160>
 800f7cc:	3501      	adds	r5, #1
 800f7ce:	68e3      	ldr	r3, [r4, #12]
 800f7d0:	9903      	ldr	r1, [sp, #12]
 800f7d2:	1a5b      	subs	r3, r3, r1
 800f7d4:	42ab      	cmp	r3, r5
 800f7d6:	dcf2      	bgt.n	800f7be <_printf_i+0x216>
 800f7d8:	e7eb      	b.n	800f7b2 <_printf_i+0x20a>
 800f7da:	2500      	movs	r5, #0
 800f7dc:	f104 0619 	add.w	r6, r4, #25
 800f7e0:	e7f5      	b.n	800f7ce <_printf_i+0x226>
 800f7e2:	bf00      	nop
 800f7e4:	08011d33 	.word	0x08011d33
 800f7e8:	08011d44 	.word	0x08011d44

0800f7ec <std>:
 800f7ec:	2300      	movs	r3, #0
 800f7ee:	b510      	push	{r4, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	e9c0 3300 	strd	r3, r3, [r0]
 800f7f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f7fa:	6083      	str	r3, [r0, #8]
 800f7fc:	8181      	strh	r1, [r0, #12]
 800f7fe:	6643      	str	r3, [r0, #100]	; 0x64
 800f800:	81c2      	strh	r2, [r0, #14]
 800f802:	6183      	str	r3, [r0, #24]
 800f804:	4619      	mov	r1, r3
 800f806:	2208      	movs	r2, #8
 800f808:	305c      	adds	r0, #92	; 0x5c
 800f80a:	f000 f902 	bl	800fa12 <memset>
 800f80e:	4b05      	ldr	r3, [pc, #20]	; (800f824 <std+0x38>)
 800f810:	6263      	str	r3, [r4, #36]	; 0x24
 800f812:	4b05      	ldr	r3, [pc, #20]	; (800f828 <std+0x3c>)
 800f814:	62a3      	str	r3, [r4, #40]	; 0x28
 800f816:	4b05      	ldr	r3, [pc, #20]	; (800f82c <std+0x40>)
 800f818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f81a:	4b05      	ldr	r3, [pc, #20]	; (800f830 <std+0x44>)
 800f81c:	6224      	str	r4, [r4, #32]
 800f81e:	6323      	str	r3, [r4, #48]	; 0x30
 800f820:	bd10      	pop	{r4, pc}
 800f822:	bf00      	nop
 800f824:	0800f98d 	.word	0x0800f98d
 800f828:	0800f9af 	.word	0x0800f9af
 800f82c:	0800f9e7 	.word	0x0800f9e7
 800f830:	0800fa0b 	.word	0x0800fa0b

0800f834 <stdio_exit_handler>:
 800f834:	4a02      	ldr	r2, [pc, #8]	; (800f840 <stdio_exit_handler+0xc>)
 800f836:	4903      	ldr	r1, [pc, #12]	; (800f844 <stdio_exit_handler+0x10>)
 800f838:	4803      	ldr	r0, [pc, #12]	; (800f848 <stdio_exit_handler+0x14>)
 800f83a:	f000 b869 	b.w	800f910 <_fwalk_sglue>
 800f83e:	bf00      	nop
 800f840:	24000110 	.word	0x24000110
 800f844:	0801140d 	.word	0x0801140d
 800f848:	2400011c 	.word	0x2400011c

0800f84c <cleanup_stdio>:
 800f84c:	6841      	ldr	r1, [r0, #4]
 800f84e:	4b0c      	ldr	r3, [pc, #48]	; (800f880 <cleanup_stdio+0x34>)
 800f850:	4299      	cmp	r1, r3
 800f852:	b510      	push	{r4, lr}
 800f854:	4604      	mov	r4, r0
 800f856:	d001      	beq.n	800f85c <cleanup_stdio+0x10>
 800f858:	f001 fdd8 	bl	801140c <_fflush_r>
 800f85c:	68a1      	ldr	r1, [r4, #8]
 800f85e:	4b09      	ldr	r3, [pc, #36]	; (800f884 <cleanup_stdio+0x38>)
 800f860:	4299      	cmp	r1, r3
 800f862:	d002      	beq.n	800f86a <cleanup_stdio+0x1e>
 800f864:	4620      	mov	r0, r4
 800f866:	f001 fdd1 	bl	801140c <_fflush_r>
 800f86a:	68e1      	ldr	r1, [r4, #12]
 800f86c:	4b06      	ldr	r3, [pc, #24]	; (800f888 <cleanup_stdio+0x3c>)
 800f86e:	4299      	cmp	r1, r3
 800f870:	d004      	beq.n	800f87c <cleanup_stdio+0x30>
 800f872:	4620      	mov	r0, r4
 800f874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f878:	f001 bdc8 	b.w	801140c <_fflush_r>
 800f87c:	bd10      	pop	{r4, pc}
 800f87e:	bf00      	nop
 800f880:	24003694 	.word	0x24003694
 800f884:	240036fc 	.word	0x240036fc
 800f888:	24003764 	.word	0x24003764

0800f88c <global_stdio_init.part.0>:
 800f88c:	b510      	push	{r4, lr}
 800f88e:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <global_stdio_init.part.0+0x30>)
 800f890:	4c0b      	ldr	r4, [pc, #44]	; (800f8c0 <global_stdio_init.part.0+0x34>)
 800f892:	4a0c      	ldr	r2, [pc, #48]	; (800f8c4 <global_stdio_init.part.0+0x38>)
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	4620      	mov	r0, r4
 800f898:	2200      	movs	r2, #0
 800f89a:	2104      	movs	r1, #4
 800f89c:	f7ff ffa6 	bl	800f7ec <std>
 800f8a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f8a4:	2201      	movs	r2, #1
 800f8a6:	2109      	movs	r1, #9
 800f8a8:	f7ff ffa0 	bl	800f7ec <std>
 800f8ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f8b0:	2202      	movs	r2, #2
 800f8b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8b6:	2112      	movs	r1, #18
 800f8b8:	f7ff bf98 	b.w	800f7ec <std>
 800f8bc:	240037cc 	.word	0x240037cc
 800f8c0:	24003694 	.word	0x24003694
 800f8c4:	0800f835 	.word	0x0800f835

0800f8c8 <__sfp_lock_acquire>:
 800f8c8:	4801      	ldr	r0, [pc, #4]	; (800f8d0 <__sfp_lock_acquire+0x8>)
 800f8ca:	f000 b941 	b.w	800fb50 <__retarget_lock_acquire_recursive>
 800f8ce:	bf00      	nop
 800f8d0:	240037d5 	.word	0x240037d5

0800f8d4 <__sfp_lock_release>:
 800f8d4:	4801      	ldr	r0, [pc, #4]	; (800f8dc <__sfp_lock_release+0x8>)
 800f8d6:	f000 b93c 	b.w	800fb52 <__retarget_lock_release_recursive>
 800f8da:	bf00      	nop
 800f8dc:	240037d5 	.word	0x240037d5

0800f8e0 <__sinit>:
 800f8e0:	b510      	push	{r4, lr}
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	f7ff fff0 	bl	800f8c8 <__sfp_lock_acquire>
 800f8e8:	6a23      	ldr	r3, [r4, #32]
 800f8ea:	b11b      	cbz	r3, 800f8f4 <__sinit+0x14>
 800f8ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8f0:	f7ff bff0 	b.w	800f8d4 <__sfp_lock_release>
 800f8f4:	4b04      	ldr	r3, [pc, #16]	; (800f908 <__sinit+0x28>)
 800f8f6:	6223      	str	r3, [r4, #32]
 800f8f8:	4b04      	ldr	r3, [pc, #16]	; (800f90c <__sinit+0x2c>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1f5      	bne.n	800f8ec <__sinit+0xc>
 800f900:	f7ff ffc4 	bl	800f88c <global_stdio_init.part.0>
 800f904:	e7f2      	b.n	800f8ec <__sinit+0xc>
 800f906:	bf00      	nop
 800f908:	0800f84d 	.word	0x0800f84d
 800f90c:	240037cc 	.word	0x240037cc

0800f910 <_fwalk_sglue>:
 800f910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f914:	4607      	mov	r7, r0
 800f916:	4688      	mov	r8, r1
 800f918:	4614      	mov	r4, r2
 800f91a:	2600      	movs	r6, #0
 800f91c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f920:	f1b9 0901 	subs.w	r9, r9, #1
 800f924:	d505      	bpl.n	800f932 <_fwalk_sglue+0x22>
 800f926:	6824      	ldr	r4, [r4, #0]
 800f928:	2c00      	cmp	r4, #0
 800f92a:	d1f7      	bne.n	800f91c <_fwalk_sglue+0xc>
 800f92c:	4630      	mov	r0, r6
 800f92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f932:	89ab      	ldrh	r3, [r5, #12]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d907      	bls.n	800f948 <_fwalk_sglue+0x38>
 800f938:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f93c:	3301      	adds	r3, #1
 800f93e:	d003      	beq.n	800f948 <_fwalk_sglue+0x38>
 800f940:	4629      	mov	r1, r5
 800f942:	4638      	mov	r0, r7
 800f944:	47c0      	blx	r8
 800f946:	4306      	orrs	r6, r0
 800f948:	3568      	adds	r5, #104	; 0x68
 800f94a:	e7e9      	b.n	800f920 <_fwalk_sglue+0x10>

0800f94c <siprintf>:
 800f94c:	b40e      	push	{r1, r2, r3}
 800f94e:	b500      	push	{lr}
 800f950:	b09c      	sub	sp, #112	; 0x70
 800f952:	ab1d      	add	r3, sp, #116	; 0x74
 800f954:	9002      	str	r0, [sp, #8]
 800f956:	9006      	str	r0, [sp, #24]
 800f958:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f95c:	4809      	ldr	r0, [pc, #36]	; (800f984 <siprintf+0x38>)
 800f95e:	9107      	str	r1, [sp, #28]
 800f960:	9104      	str	r1, [sp, #16]
 800f962:	4909      	ldr	r1, [pc, #36]	; (800f988 <siprintf+0x3c>)
 800f964:	f853 2b04 	ldr.w	r2, [r3], #4
 800f968:	9105      	str	r1, [sp, #20]
 800f96a:	6800      	ldr	r0, [r0, #0]
 800f96c:	9301      	str	r3, [sp, #4]
 800f96e:	a902      	add	r1, sp, #8
 800f970:	f001 fbc8 	bl	8011104 <_svfiprintf_r>
 800f974:	9b02      	ldr	r3, [sp, #8]
 800f976:	2200      	movs	r2, #0
 800f978:	701a      	strb	r2, [r3, #0]
 800f97a:	b01c      	add	sp, #112	; 0x70
 800f97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f980:	b003      	add	sp, #12
 800f982:	4770      	bx	lr
 800f984:	24000168 	.word	0x24000168
 800f988:	ffff0208 	.word	0xffff0208

0800f98c <__sread>:
 800f98c:	b510      	push	{r4, lr}
 800f98e:	460c      	mov	r4, r1
 800f990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f994:	f000 f88e 	bl	800fab4 <_read_r>
 800f998:	2800      	cmp	r0, #0
 800f99a:	bfab      	itete	ge
 800f99c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f99e:	89a3      	ldrhlt	r3, [r4, #12]
 800f9a0:	181b      	addge	r3, r3, r0
 800f9a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f9a6:	bfac      	ite	ge
 800f9a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800f9aa:	81a3      	strhlt	r3, [r4, #12]
 800f9ac:	bd10      	pop	{r4, pc}

0800f9ae <__swrite>:
 800f9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9b2:	461f      	mov	r7, r3
 800f9b4:	898b      	ldrh	r3, [r1, #12]
 800f9b6:	05db      	lsls	r3, r3, #23
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	460c      	mov	r4, r1
 800f9bc:	4616      	mov	r6, r2
 800f9be:	d505      	bpl.n	800f9cc <__swrite+0x1e>
 800f9c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9c4:	2302      	movs	r3, #2
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f000 f862 	bl	800fa90 <_lseek_r>
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	4632      	mov	r2, r6
 800f9da:	463b      	mov	r3, r7
 800f9dc:	4628      	mov	r0, r5
 800f9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f9e2:	f000 b879 	b.w	800fad8 <_write_r>

0800f9e6 <__sseek>:
 800f9e6:	b510      	push	{r4, lr}
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9ee:	f000 f84f 	bl	800fa90 <_lseek_r>
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	bf15      	itete	ne
 800f9f8:	6560      	strne	r0, [r4, #84]	; 0x54
 800f9fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f9fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fa02:	81a3      	strheq	r3, [r4, #12]
 800fa04:	bf18      	it	ne
 800fa06:	81a3      	strhne	r3, [r4, #12]
 800fa08:	bd10      	pop	{r4, pc}

0800fa0a <__sclose>:
 800fa0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa0e:	f000 b82f 	b.w	800fa70 <_close_r>

0800fa12 <memset>:
 800fa12:	4402      	add	r2, r0
 800fa14:	4603      	mov	r3, r0
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d100      	bne.n	800fa1c <memset+0xa>
 800fa1a:	4770      	bx	lr
 800fa1c:	f803 1b01 	strb.w	r1, [r3], #1
 800fa20:	e7f9      	b.n	800fa16 <memset+0x4>

0800fa22 <strcat>:
 800fa22:	b510      	push	{r4, lr}
 800fa24:	4602      	mov	r2, r0
 800fa26:	7814      	ldrb	r4, [r2, #0]
 800fa28:	4613      	mov	r3, r2
 800fa2a:	3201      	adds	r2, #1
 800fa2c:	2c00      	cmp	r4, #0
 800fa2e:	d1fa      	bne.n	800fa26 <strcat+0x4>
 800fa30:	3b01      	subs	r3, #1
 800fa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa3a:	2a00      	cmp	r2, #0
 800fa3c:	d1f9      	bne.n	800fa32 <strcat+0x10>
 800fa3e:	bd10      	pop	{r4, pc}

0800fa40 <strncpy>:
 800fa40:	b510      	push	{r4, lr}
 800fa42:	3901      	subs	r1, #1
 800fa44:	4603      	mov	r3, r0
 800fa46:	b132      	cbz	r2, 800fa56 <strncpy+0x16>
 800fa48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa4c:	f803 4b01 	strb.w	r4, [r3], #1
 800fa50:	3a01      	subs	r2, #1
 800fa52:	2c00      	cmp	r4, #0
 800fa54:	d1f7      	bne.n	800fa46 <strncpy+0x6>
 800fa56:	441a      	add	r2, r3
 800fa58:	2100      	movs	r1, #0
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d100      	bne.n	800fa60 <strncpy+0x20>
 800fa5e:	bd10      	pop	{r4, pc}
 800fa60:	f803 1b01 	strb.w	r1, [r3], #1
 800fa64:	e7f9      	b.n	800fa5a <strncpy+0x1a>
	...

0800fa68 <_localeconv_r>:
 800fa68:	4800      	ldr	r0, [pc, #0]	; (800fa6c <_localeconv_r+0x4>)
 800fa6a:	4770      	bx	lr
 800fa6c:	2400025c 	.word	0x2400025c

0800fa70 <_close_r>:
 800fa70:	b538      	push	{r3, r4, r5, lr}
 800fa72:	4d06      	ldr	r5, [pc, #24]	; (800fa8c <_close_r+0x1c>)
 800fa74:	2300      	movs	r3, #0
 800fa76:	4604      	mov	r4, r0
 800fa78:	4608      	mov	r0, r1
 800fa7a:	602b      	str	r3, [r5, #0]
 800fa7c:	f7f2 fe65 	bl	800274a <_close>
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	d102      	bne.n	800fa8a <_close_r+0x1a>
 800fa84:	682b      	ldr	r3, [r5, #0]
 800fa86:	b103      	cbz	r3, 800fa8a <_close_r+0x1a>
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	bd38      	pop	{r3, r4, r5, pc}
 800fa8c:	240037d0 	.word	0x240037d0

0800fa90 <_lseek_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	4d07      	ldr	r5, [pc, #28]	; (800fab0 <_lseek_r+0x20>)
 800fa94:	4604      	mov	r4, r0
 800fa96:	4608      	mov	r0, r1
 800fa98:	4611      	mov	r1, r2
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	602a      	str	r2, [r5, #0]
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f7f2 fe7a 	bl	8002798 <_lseek>
 800faa4:	1c43      	adds	r3, r0, #1
 800faa6:	d102      	bne.n	800faae <_lseek_r+0x1e>
 800faa8:	682b      	ldr	r3, [r5, #0]
 800faaa:	b103      	cbz	r3, 800faae <_lseek_r+0x1e>
 800faac:	6023      	str	r3, [r4, #0]
 800faae:	bd38      	pop	{r3, r4, r5, pc}
 800fab0:	240037d0 	.word	0x240037d0

0800fab4 <_read_r>:
 800fab4:	b538      	push	{r3, r4, r5, lr}
 800fab6:	4d07      	ldr	r5, [pc, #28]	; (800fad4 <_read_r+0x20>)
 800fab8:	4604      	mov	r4, r0
 800faba:	4608      	mov	r0, r1
 800fabc:	4611      	mov	r1, r2
 800fabe:	2200      	movs	r2, #0
 800fac0:	602a      	str	r2, [r5, #0]
 800fac2:	461a      	mov	r2, r3
 800fac4:	f7f2 fe08 	bl	80026d8 <_read>
 800fac8:	1c43      	adds	r3, r0, #1
 800faca:	d102      	bne.n	800fad2 <_read_r+0x1e>
 800facc:	682b      	ldr	r3, [r5, #0]
 800face:	b103      	cbz	r3, 800fad2 <_read_r+0x1e>
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	bd38      	pop	{r3, r4, r5, pc}
 800fad4:	240037d0 	.word	0x240037d0

0800fad8 <_write_r>:
 800fad8:	b538      	push	{r3, r4, r5, lr}
 800fada:	4d07      	ldr	r5, [pc, #28]	; (800faf8 <_write_r+0x20>)
 800fadc:	4604      	mov	r4, r0
 800fade:	4608      	mov	r0, r1
 800fae0:	4611      	mov	r1, r2
 800fae2:	2200      	movs	r2, #0
 800fae4:	602a      	str	r2, [r5, #0]
 800fae6:	461a      	mov	r2, r3
 800fae8:	f7f2 fe13 	bl	8002712 <_write>
 800faec:	1c43      	adds	r3, r0, #1
 800faee:	d102      	bne.n	800faf6 <_write_r+0x1e>
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	b103      	cbz	r3, 800faf6 <_write_r+0x1e>
 800faf4:	6023      	str	r3, [r4, #0]
 800faf6:	bd38      	pop	{r3, r4, r5, pc}
 800faf8:	240037d0 	.word	0x240037d0

0800fafc <__errno>:
 800fafc:	4b01      	ldr	r3, [pc, #4]	; (800fb04 <__errno+0x8>)
 800fafe:	6818      	ldr	r0, [r3, #0]
 800fb00:	4770      	bx	lr
 800fb02:	bf00      	nop
 800fb04:	24000168 	.word	0x24000168

0800fb08 <__libc_init_array>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	4d0d      	ldr	r5, [pc, #52]	; (800fb40 <__libc_init_array+0x38>)
 800fb0c:	4c0d      	ldr	r4, [pc, #52]	; (800fb44 <__libc_init_array+0x3c>)
 800fb0e:	1b64      	subs	r4, r4, r5
 800fb10:	10a4      	asrs	r4, r4, #2
 800fb12:	2600      	movs	r6, #0
 800fb14:	42a6      	cmp	r6, r4
 800fb16:	d109      	bne.n	800fb2c <__libc_init_array+0x24>
 800fb18:	4d0b      	ldr	r5, [pc, #44]	; (800fb48 <__libc_init_array+0x40>)
 800fb1a:	4c0c      	ldr	r4, [pc, #48]	; (800fb4c <__libc_init_array+0x44>)
 800fb1c:	f002 f80c 	bl	8011b38 <_init>
 800fb20:	1b64      	subs	r4, r4, r5
 800fb22:	10a4      	asrs	r4, r4, #2
 800fb24:	2600      	movs	r6, #0
 800fb26:	42a6      	cmp	r6, r4
 800fb28:	d105      	bne.n	800fb36 <__libc_init_array+0x2e>
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb30:	4798      	blx	r3
 800fb32:	3601      	adds	r6, #1
 800fb34:	e7ee      	b.n	800fb14 <__libc_init_array+0xc>
 800fb36:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb3a:	4798      	blx	r3
 800fb3c:	3601      	adds	r6, #1
 800fb3e:	e7f2      	b.n	800fb26 <__libc_init_array+0x1e>
 800fb40:	08011f9c 	.word	0x08011f9c
 800fb44:	08011f9c 	.word	0x08011f9c
 800fb48:	08011f9c 	.word	0x08011f9c
 800fb4c:	08011fa0 	.word	0x08011fa0

0800fb50 <__retarget_lock_acquire_recursive>:
 800fb50:	4770      	bx	lr

0800fb52 <__retarget_lock_release_recursive>:
 800fb52:	4770      	bx	lr

0800fb54 <memcpy>:
 800fb54:	440a      	add	r2, r1
 800fb56:	4291      	cmp	r1, r2
 800fb58:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb5c:	d100      	bne.n	800fb60 <memcpy+0xc>
 800fb5e:	4770      	bx	lr
 800fb60:	b510      	push	{r4, lr}
 800fb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb6a:	4291      	cmp	r1, r2
 800fb6c:	d1f9      	bne.n	800fb62 <memcpy+0xe>
 800fb6e:	bd10      	pop	{r4, pc}

0800fb70 <quorem>:
 800fb70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb74:	6903      	ldr	r3, [r0, #16]
 800fb76:	690c      	ldr	r4, [r1, #16]
 800fb78:	42a3      	cmp	r3, r4
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	db7e      	blt.n	800fc7c <quorem+0x10c>
 800fb7e:	3c01      	subs	r4, #1
 800fb80:	f101 0814 	add.w	r8, r1, #20
 800fb84:	f100 0514 	add.w	r5, r0, #20
 800fb88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb8c:	9301      	str	r3, [sp, #4]
 800fb8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb96:	3301      	adds	r3, #1
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fba2:	fbb2 f6f3 	udiv	r6, r2, r3
 800fba6:	d331      	bcc.n	800fc0c <quorem+0x9c>
 800fba8:	f04f 0e00 	mov.w	lr, #0
 800fbac:	4640      	mov	r0, r8
 800fbae:	46ac      	mov	ip, r5
 800fbb0:	46f2      	mov	sl, lr
 800fbb2:	f850 2b04 	ldr.w	r2, [r0], #4
 800fbb6:	b293      	uxth	r3, r2
 800fbb8:	fb06 e303 	mla	r3, r6, r3, lr
 800fbbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbc0:	0c1a      	lsrs	r2, r3, #16
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	ebaa 0303 	sub.w	r3, sl, r3
 800fbc8:	f8dc a000 	ldr.w	sl, [ip]
 800fbcc:	fa13 f38a 	uxtah	r3, r3, sl
 800fbd0:	fb06 220e 	mla	r2, r6, lr, r2
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	9b00      	ldr	r3, [sp, #0]
 800fbd8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbdc:	b292      	uxth	r2, r2
 800fbde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fbe2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbe6:	f8bd 3000 	ldrh.w	r3, [sp]
 800fbea:	4581      	cmp	r9, r0
 800fbec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbf0:	f84c 3b04 	str.w	r3, [ip], #4
 800fbf4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fbf8:	d2db      	bcs.n	800fbb2 <quorem+0x42>
 800fbfa:	f855 300b 	ldr.w	r3, [r5, fp]
 800fbfe:	b92b      	cbnz	r3, 800fc0c <quorem+0x9c>
 800fc00:	9b01      	ldr	r3, [sp, #4]
 800fc02:	3b04      	subs	r3, #4
 800fc04:	429d      	cmp	r5, r3
 800fc06:	461a      	mov	r2, r3
 800fc08:	d32c      	bcc.n	800fc64 <quorem+0xf4>
 800fc0a:	613c      	str	r4, [r7, #16]
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	f001 f91f 	bl	8010e50 <__mcmp>
 800fc12:	2800      	cmp	r0, #0
 800fc14:	db22      	blt.n	800fc5c <quorem+0xec>
 800fc16:	3601      	adds	r6, #1
 800fc18:	4629      	mov	r1, r5
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800fc20:	f8d1 c000 	ldr.w	ip, [r1]
 800fc24:	b293      	uxth	r3, r2
 800fc26:	1ac3      	subs	r3, r0, r3
 800fc28:	0c12      	lsrs	r2, r2, #16
 800fc2a:	fa13 f38c 	uxtah	r3, r3, ip
 800fc2e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fc32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc3c:	45c1      	cmp	r9, r8
 800fc3e:	f841 3b04 	str.w	r3, [r1], #4
 800fc42:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc46:	d2e9      	bcs.n	800fc1c <quorem+0xac>
 800fc48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc50:	b922      	cbnz	r2, 800fc5c <quorem+0xec>
 800fc52:	3b04      	subs	r3, #4
 800fc54:	429d      	cmp	r5, r3
 800fc56:	461a      	mov	r2, r3
 800fc58:	d30a      	bcc.n	800fc70 <quorem+0x100>
 800fc5a:	613c      	str	r4, [r7, #16]
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	b003      	add	sp, #12
 800fc60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc64:	6812      	ldr	r2, [r2, #0]
 800fc66:	3b04      	subs	r3, #4
 800fc68:	2a00      	cmp	r2, #0
 800fc6a:	d1ce      	bne.n	800fc0a <quorem+0x9a>
 800fc6c:	3c01      	subs	r4, #1
 800fc6e:	e7c9      	b.n	800fc04 <quorem+0x94>
 800fc70:	6812      	ldr	r2, [r2, #0]
 800fc72:	3b04      	subs	r3, #4
 800fc74:	2a00      	cmp	r2, #0
 800fc76:	d1f0      	bne.n	800fc5a <quorem+0xea>
 800fc78:	3c01      	subs	r4, #1
 800fc7a:	e7eb      	b.n	800fc54 <quorem+0xe4>
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	e7ee      	b.n	800fc5e <quorem+0xee>

0800fc80 <_dtoa_r>:
 800fc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	ed2d 8b02 	vpush	{d8}
 800fc88:	69c5      	ldr	r5, [r0, #28]
 800fc8a:	b091      	sub	sp, #68	; 0x44
 800fc8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc90:	ec59 8b10 	vmov	r8, r9, d0
 800fc94:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800fc96:	9106      	str	r1, [sp, #24]
 800fc98:	4606      	mov	r6, r0
 800fc9a:	9208      	str	r2, [sp, #32]
 800fc9c:	930c      	str	r3, [sp, #48]	; 0x30
 800fc9e:	b975      	cbnz	r5, 800fcbe <_dtoa_r+0x3e>
 800fca0:	2010      	movs	r0, #16
 800fca2:	f000 fda5 	bl	80107f0 <malloc>
 800fca6:	4602      	mov	r2, r0
 800fca8:	61f0      	str	r0, [r6, #28]
 800fcaa:	b920      	cbnz	r0, 800fcb6 <_dtoa_r+0x36>
 800fcac:	4ba6      	ldr	r3, [pc, #664]	; (800ff48 <_dtoa_r+0x2c8>)
 800fcae:	21ef      	movs	r1, #239	; 0xef
 800fcb0:	48a6      	ldr	r0, [pc, #664]	; (800ff4c <_dtoa_r+0x2cc>)
 800fcb2:	f001 fbfd 	bl	80114b0 <__assert_func>
 800fcb6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fcba:	6005      	str	r5, [r0, #0]
 800fcbc:	60c5      	str	r5, [r0, #12]
 800fcbe:	69f3      	ldr	r3, [r6, #28]
 800fcc0:	6819      	ldr	r1, [r3, #0]
 800fcc2:	b151      	cbz	r1, 800fcda <_dtoa_r+0x5a>
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	604a      	str	r2, [r1, #4]
 800fcc8:	2301      	movs	r3, #1
 800fcca:	4093      	lsls	r3, r2
 800fccc:	608b      	str	r3, [r1, #8]
 800fcce:	4630      	mov	r0, r6
 800fcd0:	f000 fe82 	bl	80109d8 <_Bfree>
 800fcd4:	69f3      	ldr	r3, [r6, #28]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	601a      	str	r2, [r3, #0]
 800fcda:	f1b9 0300 	subs.w	r3, r9, #0
 800fcde:	bfbb      	ittet	lt
 800fce0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fce4:	9303      	strlt	r3, [sp, #12]
 800fce6:	2300      	movge	r3, #0
 800fce8:	2201      	movlt	r2, #1
 800fcea:	bfac      	ite	ge
 800fcec:	6023      	strge	r3, [r4, #0]
 800fcee:	6022      	strlt	r2, [r4, #0]
 800fcf0:	4b97      	ldr	r3, [pc, #604]	; (800ff50 <_dtoa_r+0x2d0>)
 800fcf2:	9c03      	ldr	r4, [sp, #12]
 800fcf4:	43a3      	bics	r3, r4
 800fcf6:	d11c      	bne.n	800fd32 <_dtoa_r+0xb2>
 800fcf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fcfa:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcfe:	6013      	str	r3, [r2, #0]
 800fd00:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800fd04:	ea53 0308 	orrs.w	r3, r3, r8
 800fd08:	f000 84fb 	beq.w	8010702 <_dtoa_r+0xa82>
 800fd0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd0e:	b963      	cbnz	r3, 800fd2a <_dtoa_r+0xaa>
 800fd10:	4b90      	ldr	r3, [pc, #576]	; (800ff54 <_dtoa_r+0x2d4>)
 800fd12:	e020      	b.n	800fd56 <_dtoa_r+0xd6>
 800fd14:	4b90      	ldr	r3, [pc, #576]	; (800ff58 <_dtoa_r+0x2d8>)
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	3308      	adds	r3, #8
 800fd1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fd1c:	6013      	str	r3, [r2, #0]
 800fd1e:	9801      	ldr	r0, [sp, #4]
 800fd20:	b011      	add	sp, #68	; 0x44
 800fd22:	ecbd 8b02 	vpop	{d8}
 800fd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2a:	4b8a      	ldr	r3, [pc, #552]	; (800ff54 <_dtoa_r+0x2d4>)
 800fd2c:	9301      	str	r3, [sp, #4]
 800fd2e:	3303      	adds	r3, #3
 800fd30:	e7f3      	b.n	800fd1a <_dtoa_r+0x9a>
 800fd32:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fd36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd3e:	d10c      	bne.n	800fd5a <_dtoa_r+0xda>
 800fd40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fd42:	2301      	movs	r3, #1
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f000 84d7 	beq.w	80106fc <_dtoa_r+0xa7c>
 800fd4e:	4b83      	ldr	r3, [pc, #524]	; (800ff5c <_dtoa_r+0x2dc>)
 800fd50:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fd52:	6013      	str	r3, [r2, #0]
 800fd54:	3b01      	subs	r3, #1
 800fd56:	9301      	str	r3, [sp, #4]
 800fd58:	e7e1      	b.n	800fd1e <_dtoa_r+0x9e>
 800fd5a:	aa0e      	add	r2, sp, #56	; 0x38
 800fd5c:	a90f      	add	r1, sp, #60	; 0x3c
 800fd5e:	4630      	mov	r0, r6
 800fd60:	eeb0 0b48 	vmov.f64	d0, d8
 800fd64:	f001 f91a 	bl	8010f9c <__d2b>
 800fd68:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fd6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fd6e:	4605      	mov	r5, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d046      	beq.n	800fe02 <_dtoa_r+0x182>
 800fd74:	eeb0 7b48 	vmov.f64	d7, d8
 800fd78:	ee18 1a90 	vmov	r1, s17
 800fd7c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fd80:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fd84:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fd88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	ee07 1a90 	vmov	s15, r1
 800fd92:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800fd96:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ff30 <_dtoa_r+0x2b0>
 800fd9a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fd9e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ff38 <_dtoa_r+0x2b8>
 800fda2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fda6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800ff40 <_dtoa_r+0x2c0>
 800fdaa:	ee07 3a90 	vmov	s15, r3
 800fdae:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fdb2:	eeb0 7b46 	vmov.f64	d7, d6
 800fdb6:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fdba:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fdbe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc6:	ee16 ba90 	vmov	fp, s13
 800fdca:	9009      	str	r0, [sp, #36]	; 0x24
 800fdcc:	d508      	bpl.n	800fde0 <_dtoa_r+0x160>
 800fdce:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fdd2:	eeb4 6b47 	vcmp.f64	d6, d7
 800fdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdda:	bf18      	it	ne
 800fddc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800fde0:	f1bb 0f16 	cmp.w	fp, #22
 800fde4:	d82b      	bhi.n	800fe3e <_dtoa_r+0x1be>
 800fde6:	495e      	ldr	r1, [pc, #376]	; (800ff60 <_dtoa_r+0x2e0>)
 800fde8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800fdec:	ed91 7b00 	vldr	d7, [r1]
 800fdf0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fdf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf8:	d501      	bpl.n	800fdfe <_dtoa_r+0x17e>
 800fdfa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fdfe:	2100      	movs	r1, #0
 800fe00:	e01e      	b.n	800fe40 <_dtoa_r+0x1c0>
 800fe02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe04:	4413      	add	r3, r2
 800fe06:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800fe0a:	2920      	cmp	r1, #32
 800fe0c:	bfc1      	itttt	gt
 800fe0e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800fe12:	408c      	lslgt	r4, r1
 800fe14:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800fe18:	fa28 f101 	lsrgt.w	r1, r8, r1
 800fe1c:	bfd6      	itet	le
 800fe1e:	f1c1 0120 	rsble	r1, r1, #32
 800fe22:	4321      	orrgt	r1, r4
 800fe24:	fa08 f101 	lslle.w	r1, r8, r1
 800fe28:	ee07 1a90 	vmov	s15, r1
 800fe2c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fe30:	3b01      	subs	r3, #1
 800fe32:	ee17 1a90 	vmov	r1, s15
 800fe36:	2001      	movs	r0, #1
 800fe38:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800fe3c:	e7a7      	b.n	800fd8e <_dtoa_r+0x10e>
 800fe3e:	2101      	movs	r1, #1
 800fe40:	1ad2      	subs	r2, r2, r3
 800fe42:	1e53      	subs	r3, r2, #1
 800fe44:	9305      	str	r3, [sp, #20]
 800fe46:	bf45      	ittet	mi
 800fe48:	f1c2 0301 	rsbmi	r3, r2, #1
 800fe4c:	9304      	strmi	r3, [sp, #16]
 800fe4e:	2300      	movpl	r3, #0
 800fe50:	2300      	movmi	r3, #0
 800fe52:	bf4c      	ite	mi
 800fe54:	9305      	strmi	r3, [sp, #20]
 800fe56:	9304      	strpl	r3, [sp, #16]
 800fe58:	f1bb 0f00 	cmp.w	fp, #0
 800fe5c:	910b      	str	r1, [sp, #44]	; 0x2c
 800fe5e:	db18      	blt.n	800fe92 <_dtoa_r+0x212>
 800fe60:	9b05      	ldr	r3, [sp, #20]
 800fe62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800fe66:	445b      	add	r3, fp
 800fe68:	9305      	str	r3, [sp, #20]
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	9a06      	ldr	r2, [sp, #24]
 800fe6e:	2a09      	cmp	r2, #9
 800fe70:	d848      	bhi.n	800ff04 <_dtoa_r+0x284>
 800fe72:	2a05      	cmp	r2, #5
 800fe74:	bfc4      	itt	gt
 800fe76:	3a04      	subgt	r2, #4
 800fe78:	9206      	strgt	r2, [sp, #24]
 800fe7a:	9a06      	ldr	r2, [sp, #24]
 800fe7c:	f1a2 0202 	sub.w	r2, r2, #2
 800fe80:	bfcc      	ite	gt
 800fe82:	2400      	movgt	r4, #0
 800fe84:	2401      	movle	r4, #1
 800fe86:	2a03      	cmp	r2, #3
 800fe88:	d847      	bhi.n	800ff1a <_dtoa_r+0x29a>
 800fe8a:	e8df f002 	tbb	[pc, r2]
 800fe8e:	2d0b      	.short	0x2d0b
 800fe90:	392b      	.short	0x392b
 800fe92:	9b04      	ldr	r3, [sp, #16]
 800fe94:	2200      	movs	r2, #0
 800fe96:	eba3 030b 	sub.w	r3, r3, fp
 800fe9a:	9304      	str	r3, [sp, #16]
 800fe9c:	920a      	str	r2, [sp, #40]	; 0x28
 800fe9e:	f1cb 0300 	rsb	r3, fp, #0
 800fea2:	e7e3      	b.n	800fe6c <_dtoa_r+0x1ec>
 800fea4:	2200      	movs	r2, #0
 800fea6:	9207      	str	r2, [sp, #28]
 800fea8:	9a08      	ldr	r2, [sp, #32]
 800feaa:	2a00      	cmp	r2, #0
 800feac:	dc38      	bgt.n	800ff20 <_dtoa_r+0x2a0>
 800feae:	f04f 0a01 	mov.w	sl, #1
 800feb2:	46d1      	mov	r9, sl
 800feb4:	4652      	mov	r2, sl
 800feb6:	f8cd a020 	str.w	sl, [sp, #32]
 800feba:	69f7      	ldr	r7, [r6, #28]
 800febc:	2100      	movs	r1, #0
 800febe:	2004      	movs	r0, #4
 800fec0:	f100 0c14 	add.w	ip, r0, #20
 800fec4:	4594      	cmp	ip, r2
 800fec6:	d930      	bls.n	800ff2a <_dtoa_r+0x2aa>
 800fec8:	6079      	str	r1, [r7, #4]
 800feca:	4630      	mov	r0, r6
 800fecc:	930d      	str	r3, [sp, #52]	; 0x34
 800fece:	f000 fd43 	bl	8010958 <_Balloc>
 800fed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fed4:	9001      	str	r0, [sp, #4]
 800fed6:	4602      	mov	r2, r0
 800fed8:	2800      	cmp	r0, #0
 800feda:	d145      	bne.n	800ff68 <_dtoa_r+0x2e8>
 800fedc:	4b21      	ldr	r3, [pc, #132]	; (800ff64 <_dtoa_r+0x2e4>)
 800fede:	f240 11af 	movw	r1, #431	; 0x1af
 800fee2:	e6e5      	b.n	800fcb0 <_dtoa_r+0x30>
 800fee4:	2201      	movs	r2, #1
 800fee6:	e7de      	b.n	800fea6 <_dtoa_r+0x226>
 800fee8:	2200      	movs	r2, #0
 800feea:	9207      	str	r2, [sp, #28]
 800feec:	9a08      	ldr	r2, [sp, #32]
 800feee:	eb0b 0a02 	add.w	sl, fp, r2
 800fef2:	f10a 0901 	add.w	r9, sl, #1
 800fef6:	464a      	mov	r2, r9
 800fef8:	2a01      	cmp	r2, #1
 800fefa:	bfb8      	it	lt
 800fefc:	2201      	movlt	r2, #1
 800fefe:	e7dc      	b.n	800feba <_dtoa_r+0x23a>
 800ff00:	2201      	movs	r2, #1
 800ff02:	e7f2      	b.n	800feea <_dtoa_r+0x26a>
 800ff04:	2401      	movs	r4, #1
 800ff06:	2200      	movs	r2, #0
 800ff08:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800ff0c:	f04f 3aff 	mov.w	sl, #4294967295
 800ff10:	2100      	movs	r1, #0
 800ff12:	46d1      	mov	r9, sl
 800ff14:	2212      	movs	r2, #18
 800ff16:	9108      	str	r1, [sp, #32]
 800ff18:	e7cf      	b.n	800feba <_dtoa_r+0x23a>
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	9207      	str	r2, [sp, #28]
 800ff1e:	e7f5      	b.n	800ff0c <_dtoa_r+0x28c>
 800ff20:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ff24:	46d1      	mov	r9, sl
 800ff26:	4652      	mov	r2, sl
 800ff28:	e7c7      	b.n	800feba <_dtoa_r+0x23a>
 800ff2a:	3101      	adds	r1, #1
 800ff2c:	0040      	lsls	r0, r0, #1
 800ff2e:	e7c7      	b.n	800fec0 <_dtoa_r+0x240>
 800ff30:	636f4361 	.word	0x636f4361
 800ff34:	3fd287a7 	.word	0x3fd287a7
 800ff38:	8b60c8b3 	.word	0x8b60c8b3
 800ff3c:	3fc68a28 	.word	0x3fc68a28
 800ff40:	509f79fb 	.word	0x509f79fb
 800ff44:	3fd34413 	.word	0x3fd34413
 800ff48:	08011d62 	.word	0x08011d62
 800ff4c:	08011d79 	.word	0x08011d79
 800ff50:	7ff00000 	.word	0x7ff00000
 800ff54:	08011d5e 	.word	0x08011d5e
 800ff58:	08011d55 	.word	0x08011d55
 800ff5c:	08011d32 	.word	0x08011d32
 800ff60:	08011e68 	.word	0x08011e68
 800ff64:	08011dd1 	.word	0x08011dd1
 800ff68:	69f2      	ldr	r2, [r6, #28]
 800ff6a:	9901      	ldr	r1, [sp, #4]
 800ff6c:	6011      	str	r1, [r2, #0]
 800ff6e:	f1b9 0f0e 	cmp.w	r9, #14
 800ff72:	d86c      	bhi.n	801004e <_dtoa_r+0x3ce>
 800ff74:	2c00      	cmp	r4, #0
 800ff76:	d06a      	beq.n	801004e <_dtoa_r+0x3ce>
 800ff78:	f1bb 0f00 	cmp.w	fp, #0
 800ff7c:	f340 80a0 	ble.w	80100c0 <_dtoa_r+0x440>
 800ff80:	4ac1      	ldr	r2, [pc, #772]	; (8010288 <_dtoa_r+0x608>)
 800ff82:	f00b 010f 	and.w	r1, fp, #15
 800ff86:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ff8a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ff8e:	ed92 7b00 	vldr	d7, [r2]
 800ff92:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ff96:	f000 8087 	beq.w	80100a8 <_dtoa_r+0x428>
 800ff9a:	49bc      	ldr	r1, [pc, #752]	; (801028c <_dtoa_r+0x60c>)
 800ff9c:	ed91 6b08 	vldr	d6, [r1, #32]
 800ffa0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ffa4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ffa8:	f002 020f 	and.w	r2, r2, #15
 800ffac:	2103      	movs	r1, #3
 800ffae:	48b7      	ldr	r0, [pc, #732]	; (801028c <_dtoa_r+0x60c>)
 800ffb0:	2a00      	cmp	r2, #0
 800ffb2:	d17b      	bne.n	80100ac <_dtoa_r+0x42c>
 800ffb4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ffb8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ffbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ffc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ffc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffc6:	2a00      	cmp	r2, #0
 800ffc8:	f000 80a0 	beq.w	801010c <_dtoa_r+0x48c>
 800ffcc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ffd0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ffd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffd8:	f140 8098 	bpl.w	801010c <_dtoa_r+0x48c>
 800ffdc:	f1b9 0f00 	cmp.w	r9, #0
 800ffe0:	f000 8094 	beq.w	801010c <_dtoa_r+0x48c>
 800ffe4:	f1ba 0f00 	cmp.w	sl, #0
 800ffe8:	dd2f      	ble.n	801004a <_dtoa_r+0x3ca>
 800ffea:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ffee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800fff2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fff6:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fffa:	3101      	adds	r1, #1
 800fffc:	4654      	mov	r4, sl
 800fffe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010002:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010006:	ee07 1a90 	vmov	s15, r1
 801000a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801000e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010012:	ee15 7a90 	vmov	r7, s11
 8010016:	ec51 0b15 	vmov	r0, r1, d5
 801001a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801001e:	2c00      	cmp	r4, #0
 8010020:	d177      	bne.n	8010112 <_dtoa_r+0x492>
 8010022:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010026:	ee36 6b47 	vsub.f64	d6, d6, d7
 801002a:	ec41 0b17 	vmov	d7, r0, r1
 801002e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010036:	f300 826a 	bgt.w	801050e <_dtoa_r+0x88e>
 801003a:	eeb1 7b47 	vneg.f64	d7, d7
 801003e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010046:	f100 8260 	bmi.w	801050a <_dtoa_r+0x88a>
 801004a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801004e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010050:	2a00      	cmp	r2, #0
 8010052:	f2c0 811d 	blt.w	8010290 <_dtoa_r+0x610>
 8010056:	f1bb 0f0e 	cmp.w	fp, #14
 801005a:	f300 8119 	bgt.w	8010290 <_dtoa_r+0x610>
 801005e:	4b8a      	ldr	r3, [pc, #552]	; (8010288 <_dtoa_r+0x608>)
 8010060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010064:	ed93 6b00 	vldr	d6, [r3]
 8010068:	9b08      	ldr	r3, [sp, #32]
 801006a:	2b00      	cmp	r3, #0
 801006c:	f280 80b7 	bge.w	80101de <_dtoa_r+0x55e>
 8010070:	f1b9 0f00 	cmp.w	r9, #0
 8010074:	f300 80b3 	bgt.w	80101de <_dtoa_r+0x55e>
 8010078:	f040 8246 	bne.w	8010508 <_dtoa_r+0x888>
 801007c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010080:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010084:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801008c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010090:	464c      	mov	r4, r9
 8010092:	464f      	mov	r7, r9
 8010094:	f280 821c 	bge.w	80104d0 <_dtoa_r+0x850>
 8010098:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801009c:	2331      	movs	r3, #49	; 0x31
 801009e:	f808 3b01 	strb.w	r3, [r8], #1
 80100a2:	f10b 0b01 	add.w	fp, fp, #1
 80100a6:	e218      	b.n	80104da <_dtoa_r+0x85a>
 80100a8:	2102      	movs	r1, #2
 80100aa:	e780      	b.n	800ffae <_dtoa_r+0x32e>
 80100ac:	07d4      	lsls	r4, r2, #31
 80100ae:	d504      	bpl.n	80100ba <_dtoa_r+0x43a>
 80100b0:	ed90 6b00 	vldr	d6, [r0]
 80100b4:	3101      	adds	r1, #1
 80100b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80100ba:	1052      	asrs	r2, r2, #1
 80100bc:	3008      	adds	r0, #8
 80100be:	e777      	b.n	800ffb0 <_dtoa_r+0x330>
 80100c0:	d022      	beq.n	8010108 <_dtoa_r+0x488>
 80100c2:	f1cb 0200 	rsb	r2, fp, #0
 80100c6:	4970      	ldr	r1, [pc, #448]	; (8010288 <_dtoa_r+0x608>)
 80100c8:	f002 000f 	and.w	r0, r2, #15
 80100cc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80100d0:	ed91 7b00 	vldr	d7, [r1]
 80100d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80100d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100dc:	486b      	ldr	r0, [pc, #428]	; (801028c <_dtoa_r+0x60c>)
 80100de:	1112      	asrs	r2, r2, #4
 80100e0:	2400      	movs	r4, #0
 80100e2:	2102      	movs	r1, #2
 80100e4:	b92a      	cbnz	r2, 80100f2 <_dtoa_r+0x472>
 80100e6:	2c00      	cmp	r4, #0
 80100e8:	f43f af6a 	beq.w	800ffc0 <_dtoa_r+0x340>
 80100ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80100f0:	e766      	b.n	800ffc0 <_dtoa_r+0x340>
 80100f2:	07d7      	lsls	r7, r2, #31
 80100f4:	d505      	bpl.n	8010102 <_dtoa_r+0x482>
 80100f6:	ed90 6b00 	vldr	d6, [r0]
 80100fa:	3101      	adds	r1, #1
 80100fc:	2401      	movs	r4, #1
 80100fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010102:	1052      	asrs	r2, r2, #1
 8010104:	3008      	adds	r0, #8
 8010106:	e7ed      	b.n	80100e4 <_dtoa_r+0x464>
 8010108:	2102      	movs	r1, #2
 801010a:	e759      	b.n	800ffc0 <_dtoa_r+0x340>
 801010c:	465a      	mov	r2, fp
 801010e:	464c      	mov	r4, r9
 8010110:	e775      	b.n	800fffe <_dtoa_r+0x37e>
 8010112:	ec41 0b17 	vmov	d7, r0, r1
 8010116:	495c      	ldr	r1, [pc, #368]	; (8010288 <_dtoa_r+0x608>)
 8010118:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801011c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8010120:	9901      	ldr	r1, [sp, #4]
 8010122:	440c      	add	r4, r1
 8010124:	9907      	ldr	r1, [sp, #28]
 8010126:	b351      	cbz	r1, 801017e <_dtoa_r+0x4fe>
 8010128:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801012c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010130:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010134:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010138:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801013c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010140:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010144:	ee14 1a90 	vmov	r1, s9
 8010148:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801014c:	3130      	adds	r1, #48	; 0x30
 801014e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010152:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015a:	f808 1b01 	strb.w	r1, [r8], #1
 801015e:	d439      	bmi.n	80101d4 <_dtoa_r+0x554>
 8010160:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010164:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801016c:	d472      	bmi.n	8010254 <_dtoa_r+0x5d4>
 801016e:	45a0      	cmp	r8, r4
 8010170:	f43f af6b 	beq.w	801004a <_dtoa_r+0x3ca>
 8010174:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010178:	ee26 6b03 	vmul.f64	d6, d6, d3
 801017c:	e7e0      	b.n	8010140 <_dtoa_r+0x4c0>
 801017e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010182:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010186:	4620      	mov	r0, r4
 8010188:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801018c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010190:	ee14 1a90 	vmov	r1, s9
 8010194:	3130      	adds	r1, #48	; 0x30
 8010196:	f808 1b01 	strb.w	r1, [r8], #1
 801019a:	45a0      	cmp	r8, r4
 801019c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80101a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80101a4:	d118      	bne.n	80101d8 <_dtoa_r+0x558>
 80101a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80101aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 80101ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80101b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b6:	dc4d      	bgt.n	8010254 <_dtoa_r+0x5d4>
 80101b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80101bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80101c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c4:	f57f af41 	bpl.w	801004a <_dtoa_r+0x3ca>
 80101c8:	4680      	mov	r8, r0
 80101ca:	3801      	subs	r0, #1
 80101cc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80101d0:	2b30      	cmp	r3, #48	; 0x30
 80101d2:	d0f9      	beq.n	80101c8 <_dtoa_r+0x548>
 80101d4:	4693      	mov	fp, r2
 80101d6:	e02a      	b.n	801022e <_dtoa_r+0x5ae>
 80101d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80101dc:	e7d6      	b.n	801018c <_dtoa_r+0x50c>
 80101de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80101e2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80101e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80101ea:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80101ee:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80101f2:	ee15 3a10 	vmov	r3, s10
 80101f6:	3330      	adds	r3, #48	; 0x30
 80101f8:	f808 3b01 	strb.w	r3, [r8], #1
 80101fc:	9b01      	ldr	r3, [sp, #4]
 80101fe:	eba8 0303 	sub.w	r3, r8, r3
 8010202:	4599      	cmp	r9, r3
 8010204:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010208:	eea3 7b46 	vfms.f64	d7, d3, d6
 801020c:	d133      	bne.n	8010276 <_dtoa_r+0x5f6>
 801020e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010212:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021a:	dc1a      	bgt.n	8010252 <_dtoa_r+0x5d2>
 801021c:	eeb4 7b46 	vcmp.f64	d7, d6
 8010220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010224:	d103      	bne.n	801022e <_dtoa_r+0x5ae>
 8010226:	ee15 3a10 	vmov	r3, s10
 801022a:	07d9      	lsls	r1, r3, #31
 801022c:	d411      	bmi.n	8010252 <_dtoa_r+0x5d2>
 801022e:	4629      	mov	r1, r5
 8010230:	4630      	mov	r0, r6
 8010232:	f000 fbd1 	bl	80109d8 <_Bfree>
 8010236:	2300      	movs	r3, #0
 8010238:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801023a:	f888 3000 	strb.w	r3, [r8]
 801023e:	f10b 0301 	add.w	r3, fp, #1
 8010242:	6013      	str	r3, [r2, #0]
 8010244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010246:	2b00      	cmp	r3, #0
 8010248:	f43f ad69 	beq.w	800fd1e <_dtoa_r+0x9e>
 801024c:	f8c3 8000 	str.w	r8, [r3]
 8010250:	e565      	b.n	800fd1e <_dtoa_r+0x9e>
 8010252:	465a      	mov	r2, fp
 8010254:	4643      	mov	r3, r8
 8010256:	4698      	mov	r8, r3
 8010258:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801025c:	2939      	cmp	r1, #57	; 0x39
 801025e:	d106      	bne.n	801026e <_dtoa_r+0x5ee>
 8010260:	9901      	ldr	r1, [sp, #4]
 8010262:	4299      	cmp	r1, r3
 8010264:	d1f7      	bne.n	8010256 <_dtoa_r+0x5d6>
 8010266:	9801      	ldr	r0, [sp, #4]
 8010268:	2130      	movs	r1, #48	; 0x30
 801026a:	3201      	adds	r2, #1
 801026c:	7001      	strb	r1, [r0, #0]
 801026e:	7819      	ldrb	r1, [r3, #0]
 8010270:	3101      	adds	r1, #1
 8010272:	7019      	strb	r1, [r3, #0]
 8010274:	e7ae      	b.n	80101d4 <_dtoa_r+0x554>
 8010276:	ee27 7b04 	vmul.f64	d7, d7, d4
 801027a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801027e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010282:	d1b2      	bne.n	80101ea <_dtoa_r+0x56a>
 8010284:	e7d3      	b.n	801022e <_dtoa_r+0x5ae>
 8010286:	bf00      	nop
 8010288:	08011e68 	.word	0x08011e68
 801028c:	08011e40 	.word	0x08011e40
 8010290:	9907      	ldr	r1, [sp, #28]
 8010292:	2900      	cmp	r1, #0
 8010294:	f000 80d0 	beq.w	8010438 <_dtoa_r+0x7b8>
 8010298:	9906      	ldr	r1, [sp, #24]
 801029a:	2901      	cmp	r1, #1
 801029c:	f300 80b4 	bgt.w	8010408 <_dtoa_r+0x788>
 80102a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102a2:	2900      	cmp	r1, #0
 80102a4:	f000 80ac 	beq.w	8010400 <_dtoa_r+0x780>
 80102a8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102ac:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80102b0:	461c      	mov	r4, r3
 80102b2:	9309      	str	r3, [sp, #36]	; 0x24
 80102b4:	9b04      	ldr	r3, [sp, #16]
 80102b6:	4413      	add	r3, r2
 80102b8:	9304      	str	r3, [sp, #16]
 80102ba:	9b05      	ldr	r3, [sp, #20]
 80102bc:	2101      	movs	r1, #1
 80102be:	4413      	add	r3, r2
 80102c0:	4630      	mov	r0, r6
 80102c2:	9305      	str	r3, [sp, #20]
 80102c4:	f000 fc3e 	bl	8010b44 <__i2b>
 80102c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ca:	4607      	mov	r7, r0
 80102cc:	f1b8 0f00 	cmp.w	r8, #0
 80102d0:	d00d      	beq.n	80102ee <_dtoa_r+0x66e>
 80102d2:	9a05      	ldr	r2, [sp, #20]
 80102d4:	2a00      	cmp	r2, #0
 80102d6:	dd0a      	ble.n	80102ee <_dtoa_r+0x66e>
 80102d8:	4542      	cmp	r2, r8
 80102da:	9904      	ldr	r1, [sp, #16]
 80102dc:	bfa8      	it	ge
 80102de:	4642      	movge	r2, r8
 80102e0:	1a89      	subs	r1, r1, r2
 80102e2:	9104      	str	r1, [sp, #16]
 80102e4:	9905      	ldr	r1, [sp, #20]
 80102e6:	eba8 0802 	sub.w	r8, r8, r2
 80102ea:	1a8a      	subs	r2, r1, r2
 80102ec:	9205      	str	r2, [sp, #20]
 80102ee:	b303      	cbz	r3, 8010332 <_dtoa_r+0x6b2>
 80102f0:	9a07      	ldr	r2, [sp, #28]
 80102f2:	2a00      	cmp	r2, #0
 80102f4:	f000 80a5 	beq.w	8010442 <_dtoa_r+0x7c2>
 80102f8:	2c00      	cmp	r4, #0
 80102fa:	dd13      	ble.n	8010324 <_dtoa_r+0x6a4>
 80102fc:	4639      	mov	r1, r7
 80102fe:	4622      	mov	r2, r4
 8010300:	4630      	mov	r0, r6
 8010302:	930d      	str	r3, [sp, #52]	; 0x34
 8010304:	f000 fcde 	bl	8010cc4 <__pow5mult>
 8010308:	462a      	mov	r2, r5
 801030a:	4601      	mov	r1, r0
 801030c:	4607      	mov	r7, r0
 801030e:	4630      	mov	r0, r6
 8010310:	f000 fc2e 	bl	8010b70 <__multiply>
 8010314:	4629      	mov	r1, r5
 8010316:	9009      	str	r0, [sp, #36]	; 0x24
 8010318:	4630      	mov	r0, r6
 801031a:	f000 fb5d 	bl	80109d8 <_Bfree>
 801031e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010320:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010322:	4615      	mov	r5, r2
 8010324:	1b1a      	subs	r2, r3, r4
 8010326:	d004      	beq.n	8010332 <_dtoa_r+0x6b2>
 8010328:	4629      	mov	r1, r5
 801032a:	4630      	mov	r0, r6
 801032c:	f000 fcca 	bl	8010cc4 <__pow5mult>
 8010330:	4605      	mov	r5, r0
 8010332:	2101      	movs	r1, #1
 8010334:	4630      	mov	r0, r6
 8010336:	f000 fc05 	bl	8010b44 <__i2b>
 801033a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801033c:	2b00      	cmp	r3, #0
 801033e:	4604      	mov	r4, r0
 8010340:	f340 8081 	ble.w	8010446 <_dtoa_r+0x7c6>
 8010344:	461a      	mov	r2, r3
 8010346:	4601      	mov	r1, r0
 8010348:	4630      	mov	r0, r6
 801034a:	f000 fcbb 	bl	8010cc4 <__pow5mult>
 801034e:	9b06      	ldr	r3, [sp, #24]
 8010350:	2b01      	cmp	r3, #1
 8010352:	4604      	mov	r4, r0
 8010354:	dd7a      	ble.n	801044c <_dtoa_r+0x7cc>
 8010356:	2300      	movs	r3, #0
 8010358:	9309      	str	r3, [sp, #36]	; 0x24
 801035a:	6922      	ldr	r2, [r4, #16]
 801035c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010360:	6910      	ldr	r0, [r2, #16]
 8010362:	f000 fba1 	bl	8010aa8 <__hi0bits>
 8010366:	f1c0 0020 	rsb	r0, r0, #32
 801036a:	9b05      	ldr	r3, [sp, #20]
 801036c:	4418      	add	r0, r3
 801036e:	f010 001f 	ands.w	r0, r0, #31
 8010372:	f000 8093 	beq.w	801049c <_dtoa_r+0x81c>
 8010376:	f1c0 0220 	rsb	r2, r0, #32
 801037a:	2a04      	cmp	r2, #4
 801037c:	f340 8085 	ble.w	801048a <_dtoa_r+0x80a>
 8010380:	9b04      	ldr	r3, [sp, #16]
 8010382:	f1c0 001c 	rsb	r0, r0, #28
 8010386:	4403      	add	r3, r0
 8010388:	9304      	str	r3, [sp, #16]
 801038a:	9b05      	ldr	r3, [sp, #20]
 801038c:	4480      	add	r8, r0
 801038e:	4403      	add	r3, r0
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	9b04      	ldr	r3, [sp, #16]
 8010394:	2b00      	cmp	r3, #0
 8010396:	dd05      	ble.n	80103a4 <_dtoa_r+0x724>
 8010398:	4629      	mov	r1, r5
 801039a:	461a      	mov	r2, r3
 801039c:	4630      	mov	r0, r6
 801039e:	f000 fceb 	bl	8010d78 <__lshift>
 80103a2:	4605      	mov	r5, r0
 80103a4:	9b05      	ldr	r3, [sp, #20]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd05      	ble.n	80103b6 <_dtoa_r+0x736>
 80103aa:	4621      	mov	r1, r4
 80103ac:	461a      	mov	r2, r3
 80103ae:	4630      	mov	r0, r6
 80103b0:	f000 fce2 	bl	8010d78 <__lshift>
 80103b4:	4604      	mov	r4, r0
 80103b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d071      	beq.n	80104a0 <_dtoa_r+0x820>
 80103bc:	4621      	mov	r1, r4
 80103be:	4628      	mov	r0, r5
 80103c0:	f000 fd46 	bl	8010e50 <__mcmp>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	da6b      	bge.n	80104a0 <_dtoa_r+0x820>
 80103c8:	2300      	movs	r3, #0
 80103ca:	4629      	mov	r1, r5
 80103cc:	220a      	movs	r2, #10
 80103ce:	4630      	mov	r0, r6
 80103d0:	f000 fb24 	bl	8010a1c <__multadd>
 80103d4:	9b07      	ldr	r3, [sp, #28]
 80103d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80103da:	4605      	mov	r5, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	f000 8197 	beq.w	8010710 <_dtoa_r+0xa90>
 80103e2:	4639      	mov	r1, r7
 80103e4:	2300      	movs	r3, #0
 80103e6:	220a      	movs	r2, #10
 80103e8:	4630      	mov	r0, r6
 80103ea:	f000 fb17 	bl	8010a1c <__multadd>
 80103ee:	f1ba 0f00 	cmp.w	sl, #0
 80103f2:	4607      	mov	r7, r0
 80103f4:	f300 8093 	bgt.w	801051e <_dtoa_r+0x89e>
 80103f8:	9b06      	ldr	r3, [sp, #24]
 80103fa:	2b02      	cmp	r3, #2
 80103fc:	dc57      	bgt.n	80104ae <_dtoa_r+0x82e>
 80103fe:	e08e      	b.n	801051e <_dtoa_r+0x89e>
 8010400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010402:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010406:	e751      	b.n	80102ac <_dtoa_r+0x62c>
 8010408:	f109 34ff 	add.w	r4, r9, #4294967295
 801040c:	42a3      	cmp	r3, r4
 801040e:	bfbf      	itttt	lt
 8010410:	1ae2      	sublt	r2, r4, r3
 8010412:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010414:	189b      	addlt	r3, r3, r2
 8010416:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010418:	bfae      	itee	ge
 801041a:	1b1c      	subge	r4, r3, r4
 801041c:	4623      	movlt	r3, r4
 801041e:	2400      	movlt	r4, #0
 8010420:	f1b9 0f00 	cmp.w	r9, #0
 8010424:	bfb5      	itete	lt
 8010426:	9a04      	ldrlt	r2, [sp, #16]
 8010428:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801042c:	eba2 0809 	sublt.w	r8, r2, r9
 8010430:	464a      	movge	r2, r9
 8010432:	bfb8      	it	lt
 8010434:	2200      	movlt	r2, #0
 8010436:	e73c      	b.n	80102b2 <_dtoa_r+0x632>
 8010438:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801043c:	9f07      	ldr	r7, [sp, #28]
 801043e:	461c      	mov	r4, r3
 8010440:	e744      	b.n	80102cc <_dtoa_r+0x64c>
 8010442:	461a      	mov	r2, r3
 8010444:	e770      	b.n	8010328 <_dtoa_r+0x6a8>
 8010446:	9b06      	ldr	r3, [sp, #24]
 8010448:	2b01      	cmp	r3, #1
 801044a:	dc18      	bgt.n	801047e <_dtoa_r+0x7fe>
 801044c:	9b02      	ldr	r3, [sp, #8]
 801044e:	b9b3      	cbnz	r3, 801047e <_dtoa_r+0x7fe>
 8010450:	9b03      	ldr	r3, [sp, #12]
 8010452:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010456:	b9a2      	cbnz	r2, 8010482 <_dtoa_r+0x802>
 8010458:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801045c:	0d12      	lsrs	r2, r2, #20
 801045e:	0512      	lsls	r2, r2, #20
 8010460:	b18a      	cbz	r2, 8010486 <_dtoa_r+0x806>
 8010462:	9b04      	ldr	r3, [sp, #16]
 8010464:	3301      	adds	r3, #1
 8010466:	9304      	str	r3, [sp, #16]
 8010468:	9b05      	ldr	r3, [sp, #20]
 801046a:	3301      	adds	r3, #1
 801046c:	9305      	str	r3, [sp, #20]
 801046e:	2301      	movs	r3, #1
 8010470:	9309      	str	r3, [sp, #36]	; 0x24
 8010472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010474:	2b00      	cmp	r3, #0
 8010476:	f47f af70 	bne.w	801035a <_dtoa_r+0x6da>
 801047a:	2001      	movs	r0, #1
 801047c:	e775      	b.n	801036a <_dtoa_r+0x6ea>
 801047e:	2300      	movs	r3, #0
 8010480:	e7f6      	b.n	8010470 <_dtoa_r+0x7f0>
 8010482:	9b02      	ldr	r3, [sp, #8]
 8010484:	e7f4      	b.n	8010470 <_dtoa_r+0x7f0>
 8010486:	9209      	str	r2, [sp, #36]	; 0x24
 8010488:	e7f3      	b.n	8010472 <_dtoa_r+0x7f2>
 801048a:	d082      	beq.n	8010392 <_dtoa_r+0x712>
 801048c:	9b04      	ldr	r3, [sp, #16]
 801048e:	321c      	adds	r2, #28
 8010490:	4413      	add	r3, r2
 8010492:	9304      	str	r3, [sp, #16]
 8010494:	9b05      	ldr	r3, [sp, #20]
 8010496:	4490      	add	r8, r2
 8010498:	4413      	add	r3, r2
 801049a:	e779      	b.n	8010390 <_dtoa_r+0x710>
 801049c:	4602      	mov	r2, r0
 801049e:	e7f5      	b.n	801048c <_dtoa_r+0x80c>
 80104a0:	f1b9 0f00 	cmp.w	r9, #0
 80104a4:	dc36      	bgt.n	8010514 <_dtoa_r+0x894>
 80104a6:	9b06      	ldr	r3, [sp, #24]
 80104a8:	2b02      	cmp	r3, #2
 80104aa:	dd33      	ble.n	8010514 <_dtoa_r+0x894>
 80104ac:	46ca      	mov	sl, r9
 80104ae:	f1ba 0f00 	cmp.w	sl, #0
 80104b2:	d10d      	bne.n	80104d0 <_dtoa_r+0x850>
 80104b4:	4621      	mov	r1, r4
 80104b6:	4653      	mov	r3, sl
 80104b8:	2205      	movs	r2, #5
 80104ba:	4630      	mov	r0, r6
 80104bc:	f000 faae 	bl	8010a1c <__multadd>
 80104c0:	4601      	mov	r1, r0
 80104c2:	4604      	mov	r4, r0
 80104c4:	4628      	mov	r0, r5
 80104c6:	f000 fcc3 	bl	8010e50 <__mcmp>
 80104ca:	2800      	cmp	r0, #0
 80104cc:	f73f ade4 	bgt.w	8010098 <_dtoa_r+0x418>
 80104d0:	9b08      	ldr	r3, [sp, #32]
 80104d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80104d6:	ea6f 0b03 	mvn.w	fp, r3
 80104da:	f04f 0900 	mov.w	r9, #0
 80104de:	4621      	mov	r1, r4
 80104e0:	4630      	mov	r0, r6
 80104e2:	f000 fa79 	bl	80109d8 <_Bfree>
 80104e6:	2f00      	cmp	r7, #0
 80104e8:	f43f aea1 	beq.w	801022e <_dtoa_r+0x5ae>
 80104ec:	f1b9 0f00 	cmp.w	r9, #0
 80104f0:	d005      	beq.n	80104fe <_dtoa_r+0x87e>
 80104f2:	45b9      	cmp	r9, r7
 80104f4:	d003      	beq.n	80104fe <_dtoa_r+0x87e>
 80104f6:	4649      	mov	r1, r9
 80104f8:	4630      	mov	r0, r6
 80104fa:	f000 fa6d 	bl	80109d8 <_Bfree>
 80104fe:	4639      	mov	r1, r7
 8010500:	4630      	mov	r0, r6
 8010502:	f000 fa69 	bl	80109d8 <_Bfree>
 8010506:	e692      	b.n	801022e <_dtoa_r+0x5ae>
 8010508:	2400      	movs	r4, #0
 801050a:	4627      	mov	r7, r4
 801050c:	e7e0      	b.n	80104d0 <_dtoa_r+0x850>
 801050e:	4693      	mov	fp, r2
 8010510:	4627      	mov	r7, r4
 8010512:	e5c1      	b.n	8010098 <_dtoa_r+0x418>
 8010514:	9b07      	ldr	r3, [sp, #28]
 8010516:	46ca      	mov	sl, r9
 8010518:	2b00      	cmp	r3, #0
 801051a:	f000 8100 	beq.w	801071e <_dtoa_r+0xa9e>
 801051e:	f1b8 0f00 	cmp.w	r8, #0
 8010522:	dd05      	ble.n	8010530 <_dtoa_r+0x8b0>
 8010524:	4639      	mov	r1, r7
 8010526:	4642      	mov	r2, r8
 8010528:	4630      	mov	r0, r6
 801052a:	f000 fc25 	bl	8010d78 <__lshift>
 801052e:	4607      	mov	r7, r0
 8010530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010532:	2b00      	cmp	r3, #0
 8010534:	d05d      	beq.n	80105f2 <_dtoa_r+0x972>
 8010536:	6879      	ldr	r1, [r7, #4]
 8010538:	4630      	mov	r0, r6
 801053a:	f000 fa0d 	bl	8010958 <_Balloc>
 801053e:	4680      	mov	r8, r0
 8010540:	b928      	cbnz	r0, 801054e <_dtoa_r+0x8ce>
 8010542:	4b82      	ldr	r3, [pc, #520]	; (801074c <_dtoa_r+0xacc>)
 8010544:	4602      	mov	r2, r0
 8010546:	f240 21ef 	movw	r1, #751	; 0x2ef
 801054a:	f7ff bbb1 	b.w	800fcb0 <_dtoa_r+0x30>
 801054e:	693a      	ldr	r2, [r7, #16]
 8010550:	3202      	adds	r2, #2
 8010552:	0092      	lsls	r2, r2, #2
 8010554:	f107 010c 	add.w	r1, r7, #12
 8010558:	300c      	adds	r0, #12
 801055a:	f7ff fafb 	bl	800fb54 <memcpy>
 801055e:	2201      	movs	r2, #1
 8010560:	4641      	mov	r1, r8
 8010562:	4630      	mov	r0, r6
 8010564:	f000 fc08 	bl	8010d78 <__lshift>
 8010568:	9b01      	ldr	r3, [sp, #4]
 801056a:	3301      	adds	r3, #1
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	9b01      	ldr	r3, [sp, #4]
 8010570:	4453      	add	r3, sl
 8010572:	9308      	str	r3, [sp, #32]
 8010574:	9b02      	ldr	r3, [sp, #8]
 8010576:	f003 0301 	and.w	r3, r3, #1
 801057a:	46b9      	mov	r9, r7
 801057c:	9307      	str	r3, [sp, #28]
 801057e:	4607      	mov	r7, r0
 8010580:	9b04      	ldr	r3, [sp, #16]
 8010582:	4621      	mov	r1, r4
 8010584:	3b01      	subs	r3, #1
 8010586:	4628      	mov	r0, r5
 8010588:	9302      	str	r3, [sp, #8]
 801058a:	f7ff faf1 	bl	800fb70 <quorem>
 801058e:	4603      	mov	r3, r0
 8010590:	3330      	adds	r3, #48	; 0x30
 8010592:	9005      	str	r0, [sp, #20]
 8010594:	4649      	mov	r1, r9
 8010596:	4628      	mov	r0, r5
 8010598:	9309      	str	r3, [sp, #36]	; 0x24
 801059a:	f000 fc59 	bl	8010e50 <__mcmp>
 801059e:	463a      	mov	r2, r7
 80105a0:	4682      	mov	sl, r0
 80105a2:	4621      	mov	r1, r4
 80105a4:	4630      	mov	r0, r6
 80105a6:	f000 fc6f 	bl	8010e88 <__mdiff>
 80105aa:	68c2      	ldr	r2, [r0, #12]
 80105ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ae:	4680      	mov	r8, r0
 80105b0:	bb0a      	cbnz	r2, 80105f6 <_dtoa_r+0x976>
 80105b2:	4601      	mov	r1, r0
 80105b4:	4628      	mov	r0, r5
 80105b6:	f000 fc4b 	bl	8010e50 <__mcmp>
 80105ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105bc:	4602      	mov	r2, r0
 80105be:	4641      	mov	r1, r8
 80105c0:	4630      	mov	r0, r6
 80105c2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 80105c6:	f000 fa07 	bl	80109d8 <_Bfree>
 80105ca:	9b06      	ldr	r3, [sp, #24]
 80105cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80105ce:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80105d2:	ea43 0102 	orr.w	r1, r3, r2
 80105d6:	9b07      	ldr	r3, [sp, #28]
 80105d8:	4319      	orrs	r1, r3
 80105da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105dc:	d10d      	bne.n	80105fa <_dtoa_r+0x97a>
 80105de:	2b39      	cmp	r3, #57	; 0x39
 80105e0:	d029      	beq.n	8010636 <_dtoa_r+0x9b6>
 80105e2:	f1ba 0f00 	cmp.w	sl, #0
 80105e6:	dd01      	ble.n	80105ec <_dtoa_r+0x96c>
 80105e8:	9b05      	ldr	r3, [sp, #20]
 80105ea:	3331      	adds	r3, #49	; 0x31
 80105ec:	9a02      	ldr	r2, [sp, #8]
 80105ee:	7013      	strb	r3, [r2, #0]
 80105f0:	e775      	b.n	80104de <_dtoa_r+0x85e>
 80105f2:	4638      	mov	r0, r7
 80105f4:	e7b8      	b.n	8010568 <_dtoa_r+0x8e8>
 80105f6:	2201      	movs	r2, #1
 80105f8:	e7e1      	b.n	80105be <_dtoa_r+0x93e>
 80105fa:	f1ba 0f00 	cmp.w	sl, #0
 80105fe:	db06      	blt.n	801060e <_dtoa_r+0x98e>
 8010600:	9906      	ldr	r1, [sp, #24]
 8010602:	ea41 0a0a 	orr.w	sl, r1, sl
 8010606:	9907      	ldr	r1, [sp, #28]
 8010608:	ea5a 0a01 	orrs.w	sl, sl, r1
 801060c:	d120      	bne.n	8010650 <_dtoa_r+0x9d0>
 801060e:	2a00      	cmp	r2, #0
 8010610:	ddec      	ble.n	80105ec <_dtoa_r+0x96c>
 8010612:	4629      	mov	r1, r5
 8010614:	2201      	movs	r2, #1
 8010616:	4630      	mov	r0, r6
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	f000 fbad 	bl	8010d78 <__lshift>
 801061e:	4621      	mov	r1, r4
 8010620:	4605      	mov	r5, r0
 8010622:	f000 fc15 	bl	8010e50 <__mcmp>
 8010626:	2800      	cmp	r0, #0
 8010628:	9b04      	ldr	r3, [sp, #16]
 801062a:	dc02      	bgt.n	8010632 <_dtoa_r+0x9b2>
 801062c:	d1de      	bne.n	80105ec <_dtoa_r+0x96c>
 801062e:	07da      	lsls	r2, r3, #31
 8010630:	d5dc      	bpl.n	80105ec <_dtoa_r+0x96c>
 8010632:	2b39      	cmp	r3, #57	; 0x39
 8010634:	d1d8      	bne.n	80105e8 <_dtoa_r+0x968>
 8010636:	9a02      	ldr	r2, [sp, #8]
 8010638:	2339      	movs	r3, #57	; 0x39
 801063a:	7013      	strb	r3, [r2, #0]
 801063c:	4643      	mov	r3, r8
 801063e:	4698      	mov	r8, r3
 8010640:	3b01      	subs	r3, #1
 8010642:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8010646:	2a39      	cmp	r2, #57	; 0x39
 8010648:	d051      	beq.n	80106ee <_dtoa_r+0xa6e>
 801064a:	3201      	adds	r2, #1
 801064c:	701a      	strb	r2, [r3, #0]
 801064e:	e746      	b.n	80104de <_dtoa_r+0x85e>
 8010650:	2a00      	cmp	r2, #0
 8010652:	dd03      	ble.n	801065c <_dtoa_r+0x9dc>
 8010654:	2b39      	cmp	r3, #57	; 0x39
 8010656:	d0ee      	beq.n	8010636 <_dtoa_r+0x9b6>
 8010658:	3301      	adds	r3, #1
 801065a:	e7c7      	b.n	80105ec <_dtoa_r+0x96c>
 801065c:	9a04      	ldr	r2, [sp, #16]
 801065e:	9908      	ldr	r1, [sp, #32]
 8010660:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010664:	428a      	cmp	r2, r1
 8010666:	d02b      	beq.n	80106c0 <_dtoa_r+0xa40>
 8010668:	4629      	mov	r1, r5
 801066a:	2300      	movs	r3, #0
 801066c:	220a      	movs	r2, #10
 801066e:	4630      	mov	r0, r6
 8010670:	f000 f9d4 	bl	8010a1c <__multadd>
 8010674:	45b9      	cmp	r9, r7
 8010676:	4605      	mov	r5, r0
 8010678:	f04f 0300 	mov.w	r3, #0
 801067c:	f04f 020a 	mov.w	r2, #10
 8010680:	4649      	mov	r1, r9
 8010682:	4630      	mov	r0, r6
 8010684:	d107      	bne.n	8010696 <_dtoa_r+0xa16>
 8010686:	f000 f9c9 	bl	8010a1c <__multadd>
 801068a:	4681      	mov	r9, r0
 801068c:	4607      	mov	r7, r0
 801068e:	9b04      	ldr	r3, [sp, #16]
 8010690:	3301      	adds	r3, #1
 8010692:	9304      	str	r3, [sp, #16]
 8010694:	e774      	b.n	8010580 <_dtoa_r+0x900>
 8010696:	f000 f9c1 	bl	8010a1c <__multadd>
 801069a:	4639      	mov	r1, r7
 801069c:	4681      	mov	r9, r0
 801069e:	2300      	movs	r3, #0
 80106a0:	220a      	movs	r2, #10
 80106a2:	4630      	mov	r0, r6
 80106a4:	f000 f9ba 	bl	8010a1c <__multadd>
 80106a8:	4607      	mov	r7, r0
 80106aa:	e7f0      	b.n	801068e <_dtoa_r+0xa0e>
 80106ac:	f1ba 0f00 	cmp.w	sl, #0
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	bfcc      	ite	gt
 80106b4:	46d0      	movgt	r8, sl
 80106b6:	f04f 0801 	movle.w	r8, #1
 80106ba:	4490      	add	r8, r2
 80106bc:	f04f 0900 	mov.w	r9, #0
 80106c0:	4629      	mov	r1, r5
 80106c2:	2201      	movs	r2, #1
 80106c4:	4630      	mov	r0, r6
 80106c6:	9302      	str	r3, [sp, #8]
 80106c8:	f000 fb56 	bl	8010d78 <__lshift>
 80106cc:	4621      	mov	r1, r4
 80106ce:	4605      	mov	r5, r0
 80106d0:	f000 fbbe 	bl	8010e50 <__mcmp>
 80106d4:	2800      	cmp	r0, #0
 80106d6:	dcb1      	bgt.n	801063c <_dtoa_r+0x9bc>
 80106d8:	d102      	bne.n	80106e0 <_dtoa_r+0xa60>
 80106da:	9b02      	ldr	r3, [sp, #8]
 80106dc:	07db      	lsls	r3, r3, #31
 80106de:	d4ad      	bmi.n	801063c <_dtoa_r+0x9bc>
 80106e0:	4643      	mov	r3, r8
 80106e2:	4698      	mov	r8, r3
 80106e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106e8:	2a30      	cmp	r2, #48	; 0x30
 80106ea:	d0fa      	beq.n	80106e2 <_dtoa_r+0xa62>
 80106ec:	e6f7      	b.n	80104de <_dtoa_r+0x85e>
 80106ee:	9a01      	ldr	r2, [sp, #4]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d1a4      	bne.n	801063e <_dtoa_r+0x9be>
 80106f4:	f10b 0b01 	add.w	fp, fp, #1
 80106f8:	2331      	movs	r3, #49	; 0x31
 80106fa:	e778      	b.n	80105ee <_dtoa_r+0x96e>
 80106fc:	4b14      	ldr	r3, [pc, #80]	; (8010750 <_dtoa_r+0xad0>)
 80106fe:	f7ff bb2a 	b.w	800fd56 <_dtoa_r+0xd6>
 8010702:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010704:	2b00      	cmp	r3, #0
 8010706:	f47f ab05 	bne.w	800fd14 <_dtoa_r+0x94>
 801070a:	4b12      	ldr	r3, [pc, #72]	; (8010754 <_dtoa_r+0xad4>)
 801070c:	f7ff bb23 	b.w	800fd56 <_dtoa_r+0xd6>
 8010710:	f1ba 0f00 	cmp.w	sl, #0
 8010714:	dc03      	bgt.n	801071e <_dtoa_r+0xa9e>
 8010716:	9b06      	ldr	r3, [sp, #24]
 8010718:	2b02      	cmp	r3, #2
 801071a:	f73f aec8 	bgt.w	80104ae <_dtoa_r+0x82e>
 801071e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010722:	4621      	mov	r1, r4
 8010724:	4628      	mov	r0, r5
 8010726:	f7ff fa23 	bl	800fb70 <quorem>
 801072a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801072e:	f808 3b01 	strb.w	r3, [r8], #1
 8010732:	9a01      	ldr	r2, [sp, #4]
 8010734:	eba8 0202 	sub.w	r2, r8, r2
 8010738:	4592      	cmp	sl, r2
 801073a:	ddb7      	ble.n	80106ac <_dtoa_r+0xa2c>
 801073c:	4629      	mov	r1, r5
 801073e:	2300      	movs	r3, #0
 8010740:	220a      	movs	r2, #10
 8010742:	4630      	mov	r0, r6
 8010744:	f000 f96a 	bl	8010a1c <__multadd>
 8010748:	4605      	mov	r5, r0
 801074a:	e7ea      	b.n	8010722 <_dtoa_r+0xaa2>
 801074c:	08011dd1 	.word	0x08011dd1
 8010750:	08011d31 	.word	0x08011d31
 8010754:	08011d55 	.word	0x08011d55

08010758 <_free_r>:
 8010758:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801075a:	2900      	cmp	r1, #0
 801075c:	d044      	beq.n	80107e8 <_free_r+0x90>
 801075e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010762:	9001      	str	r0, [sp, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	f1a1 0404 	sub.w	r4, r1, #4
 801076a:	bfb8      	it	lt
 801076c:	18e4      	addlt	r4, r4, r3
 801076e:	f000 f8e7 	bl	8010940 <__malloc_lock>
 8010772:	4a1e      	ldr	r2, [pc, #120]	; (80107ec <_free_r+0x94>)
 8010774:	9801      	ldr	r0, [sp, #4]
 8010776:	6813      	ldr	r3, [r2, #0]
 8010778:	b933      	cbnz	r3, 8010788 <_free_r+0x30>
 801077a:	6063      	str	r3, [r4, #4]
 801077c:	6014      	str	r4, [r2, #0]
 801077e:	b003      	add	sp, #12
 8010780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010784:	f000 b8e2 	b.w	801094c <__malloc_unlock>
 8010788:	42a3      	cmp	r3, r4
 801078a:	d908      	bls.n	801079e <_free_r+0x46>
 801078c:	6825      	ldr	r5, [r4, #0]
 801078e:	1961      	adds	r1, r4, r5
 8010790:	428b      	cmp	r3, r1
 8010792:	bf01      	itttt	eq
 8010794:	6819      	ldreq	r1, [r3, #0]
 8010796:	685b      	ldreq	r3, [r3, #4]
 8010798:	1949      	addeq	r1, r1, r5
 801079a:	6021      	streq	r1, [r4, #0]
 801079c:	e7ed      	b.n	801077a <_free_r+0x22>
 801079e:	461a      	mov	r2, r3
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	b10b      	cbz	r3, 80107a8 <_free_r+0x50>
 80107a4:	42a3      	cmp	r3, r4
 80107a6:	d9fa      	bls.n	801079e <_free_r+0x46>
 80107a8:	6811      	ldr	r1, [r2, #0]
 80107aa:	1855      	adds	r5, r2, r1
 80107ac:	42a5      	cmp	r5, r4
 80107ae:	d10b      	bne.n	80107c8 <_free_r+0x70>
 80107b0:	6824      	ldr	r4, [r4, #0]
 80107b2:	4421      	add	r1, r4
 80107b4:	1854      	adds	r4, r2, r1
 80107b6:	42a3      	cmp	r3, r4
 80107b8:	6011      	str	r1, [r2, #0]
 80107ba:	d1e0      	bne.n	801077e <_free_r+0x26>
 80107bc:	681c      	ldr	r4, [r3, #0]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	6053      	str	r3, [r2, #4]
 80107c2:	440c      	add	r4, r1
 80107c4:	6014      	str	r4, [r2, #0]
 80107c6:	e7da      	b.n	801077e <_free_r+0x26>
 80107c8:	d902      	bls.n	80107d0 <_free_r+0x78>
 80107ca:	230c      	movs	r3, #12
 80107cc:	6003      	str	r3, [r0, #0]
 80107ce:	e7d6      	b.n	801077e <_free_r+0x26>
 80107d0:	6825      	ldr	r5, [r4, #0]
 80107d2:	1961      	adds	r1, r4, r5
 80107d4:	428b      	cmp	r3, r1
 80107d6:	bf04      	itt	eq
 80107d8:	6819      	ldreq	r1, [r3, #0]
 80107da:	685b      	ldreq	r3, [r3, #4]
 80107dc:	6063      	str	r3, [r4, #4]
 80107de:	bf04      	itt	eq
 80107e0:	1949      	addeq	r1, r1, r5
 80107e2:	6021      	streq	r1, [r4, #0]
 80107e4:	6054      	str	r4, [r2, #4]
 80107e6:	e7ca      	b.n	801077e <_free_r+0x26>
 80107e8:	b003      	add	sp, #12
 80107ea:	bd30      	pop	{r4, r5, pc}
 80107ec:	240037d8 	.word	0x240037d8

080107f0 <malloc>:
 80107f0:	4b02      	ldr	r3, [pc, #8]	; (80107fc <malloc+0xc>)
 80107f2:	4601      	mov	r1, r0
 80107f4:	6818      	ldr	r0, [r3, #0]
 80107f6:	f000 b823 	b.w	8010840 <_malloc_r>
 80107fa:	bf00      	nop
 80107fc:	24000168 	.word	0x24000168

08010800 <sbrk_aligned>:
 8010800:	b570      	push	{r4, r5, r6, lr}
 8010802:	4e0e      	ldr	r6, [pc, #56]	; (801083c <sbrk_aligned+0x3c>)
 8010804:	460c      	mov	r4, r1
 8010806:	6831      	ldr	r1, [r6, #0]
 8010808:	4605      	mov	r5, r0
 801080a:	b911      	cbnz	r1, 8010812 <sbrk_aligned+0x12>
 801080c:	f000 fe40 	bl	8011490 <_sbrk_r>
 8010810:	6030      	str	r0, [r6, #0]
 8010812:	4621      	mov	r1, r4
 8010814:	4628      	mov	r0, r5
 8010816:	f000 fe3b 	bl	8011490 <_sbrk_r>
 801081a:	1c43      	adds	r3, r0, #1
 801081c:	d00a      	beq.n	8010834 <sbrk_aligned+0x34>
 801081e:	1cc4      	adds	r4, r0, #3
 8010820:	f024 0403 	bic.w	r4, r4, #3
 8010824:	42a0      	cmp	r0, r4
 8010826:	d007      	beq.n	8010838 <sbrk_aligned+0x38>
 8010828:	1a21      	subs	r1, r4, r0
 801082a:	4628      	mov	r0, r5
 801082c:	f000 fe30 	bl	8011490 <_sbrk_r>
 8010830:	3001      	adds	r0, #1
 8010832:	d101      	bne.n	8010838 <sbrk_aligned+0x38>
 8010834:	f04f 34ff 	mov.w	r4, #4294967295
 8010838:	4620      	mov	r0, r4
 801083a:	bd70      	pop	{r4, r5, r6, pc}
 801083c:	240037dc 	.word	0x240037dc

08010840 <_malloc_r>:
 8010840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010844:	1ccd      	adds	r5, r1, #3
 8010846:	f025 0503 	bic.w	r5, r5, #3
 801084a:	3508      	adds	r5, #8
 801084c:	2d0c      	cmp	r5, #12
 801084e:	bf38      	it	cc
 8010850:	250c      	movcc	r5, #12
 8010852:	2d00      	cmp	r5, #0
 8010854:	4607      	mov	r7, r0
 8010856:	db01      	blt.n	801085c <_malloc_r+0x1c>
 8010858:	42a9      	cmp	r1, r5
 801085a:	d905      	bls.n	8010868 <_malloc_r+0x28>
 801085c:	230c      	movs	r3, #12
 801085e:	603b      	str	r3, [r7, #0]
 8010860:	2600      	movs	r6, #0
 8010862:	4630      	mov	r0, r6
 8010864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010868:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801093c <_malloc_r+0xfc>
 801086c:	f000 f868 	bl	8010940 <__malloc_lock>
 8010870:	f8d8 3000 	ldr.w	r3, [r8]
 8010874:	461c      	mov	r4, r3
 8010876:	bb5c      	cbnz	r4, 80108d0 <_malloc_r+0x90>
 8010878:	4629      	mov	r1, r5
 801087a:	4638      	mov	r0, r7
 801087c:	f7ff ffc0 	bl	8010800 <sbrk_aligned>
 8010880:	1c43      	adds	r3, r0, #1
 8010882:	4604      	mov	r4, r0
 8010884:	d155      	bne.n	8010932 <_malloc_r+0xf2>
 8010886:	f8d8 4000 	ldr.w	r4, [r8]
 801088a:	4626      	mov	r6, r4
 801088c:	2e00      	cmp	r6, #0
 801088e:	d145      	bne.n	801091c <_malloc_r+0xdc>
 8010890:	2c00      	cmp	r4, #0
 8010892:	d048      	beq.n	8010926 <_malloc_r+0xe6>
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	4631      	mov	r1, r6
 8010898:	4638      	mov	r0, r7
 801089a:	eb04 0903 	add.w	r9, r4, r3
 801089e:	f000 fdf7 	bl	8011490 <_sbrk_r>
 80108a2:	4581      	cmp	r9, r0
 80108a4:	d13f      	bne.n	8010926 <_malloc_r+0xe6>
 80108a6:	6821      	ldr	r1, [r4, #0]
 80108a8:	1a6d      	subs	r5, r5, r1
 80108aa:	4629      	mov	r1, r5
 80108ac:	4638      	mov	r0, r7
 80108ae:	f7ff ffa7 	bl	8010800 <sbrk_aligned>
 80108b2:	3001      	adds	r0, #1
 80108b4:	d037      	beq.n	8010926 <_malloc_r+0xe6>
 80108b6:	6823      	ldr	r3, [r4, #0]
 80108b8:	442b      	add	r3, r5
 80108ba:	6023      	str	r3, [r4, #0]
 80108bc:	f8d8 3000 	ldr.w	r3, [r8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d038      	beq.n	8010936 <_malloc_r+0xf6>
 80108c4:	685a      	ldr	r2, [r3, #4]
 80108c6:	42a2      	cmp	r2, r4
 80108c8:	d12b      	bne.n	8010922 <_malloc_r+0xe2>
 80108ca:	2200      	movs	r2, #0
 80108cc:	605a      	str	r2, [r3, #4]
 80108ce:	e00f      	b.n	80108f0 <_malloc_r+0xb0>
 80108d0:	6822      	ldr	r2, [r4, #0]
 80108d2:	1b52      	subs	r2, r2, r5
 80108d4:	d41f      	bmi.n	8010916 <_malloc_r+0xd6>
 80108d6:	2a0b      	cmp	r2, #11
 80108d8:	d917      	bls.n	801090a <_malloc_r+0xca>
 80108da:	1961      	adds	r1, r4, r5
 80108dc:	42a3      	cmp	r3, r4
 80108de:	6025      	str	r5, [r4, #0]
 80108e0:	bf18      	it	ne
 80108e2:	6059      	strne	r1, [r3, #4]
 80108e4:	6863      	ldr	r3, [r4, #4]
 80108e6:	bf08      	it	eq
 80108e8:	f8c8 1000 	streq.w	r1, [r8]
 80108ec:	5162      	str	r2, [r4, r5]
 80108ee:	604b      	str	r3, [r1, #4]
 80108f0:	4638      	mov	r0, r7
 80108f2:	f104 060b 	add.w	r6, r4, #11
 80108f6:	f000 f829 	bl	801094c <__malloc_unlock>
 80108fa:	f026 0607 	bic.w	r6, r6, #7
 80108fe:	1d23      	adds	r3, r4, #4
 8010900:	1af2      	subs	r2, r6, r3
 8010902:	d0ae      	beq.n	8010862 <_malloc_r+0x22>
 8010904:	1b9b      	subs	r3, r3, r6
 8010906:	50a3      	str	r3, [r4, r2]
 8010908:	e7ab      	b.n	8010862 <_malloc_r+0x22>
 801090a:	42a3      	cmp	r3, r4
 801090c:	6862      	ldr	r2, [r4, #4]
 801090e:	d1dd      	bne.n	80108cc <_malloc_r+0x8c>
 8010910:	f8c8 2000 	str.w	r2, [r8]
 8010914:	e7ec      	b.n	80108f0 <_malloc_r+0xb0>
 8010916:	4623      	mov	r3, r4
 8010918:	6864      	ldr	r4, [r4, #4]
 801091a:	e7ac      	b.n	8010876 <_malloc_r+0x36>
 801091c:	4634      	mov	r4, r6
 801091e:	6876      	ldr	r6, [r6, #4]
 8010920:	e7b4      	b.n	801088c <_malloc_r+0x4c>
 8010922:	4613      	mov	r3, r2
 8010924:	e7cc      	b.n	80108c0 <_malloc_r+0x80>
 8010926:	230c      	movs	r3, #12
 8010928:	603b      	str	r3, [r7, #0]
 801092a:	4638      	mov	r0, r7
 801092c:	f000 f80e 	bl	801094c <__malloc_unlock>
 8010930:	e797      	b.n	8010862 <_malloc_r+0x22>
 8010932:	6025      	str	r5, [r4, #0]
 8010934:	e7dc      	b.n	80108f0 <_malloc_r+0xb0>
 8010936:	605b      	str	r3, [r3, #4]
 8010938:	deff      	udf	#255	; 0xff
 801093a:	bf00      	nop
 801093c:	240037d8 	.word	0x240037d8

08010940 <__malloc_lock>:
 8010940:	4801      	ldr	r0, [pc, #4]	; (8010948 <__malloc_lock+0x8>)
 8010942:	f7ff b905 	b.w	800fb50 <__retarget_lock_acquire_recursive>
 8010946:	bf00      	nop
 8010948:	240037d4 	.word	0x240037d4

0801094c <__malloc_unlock>:
 801094c:	4801      	ldr	r0, [pc, #4]	; (8010954 <__malloc_unlock+0x8>)
 801094e:	f7ff b900 	b.w	800fb52 <__retarget_lock_release_recursive>
 8010952:	bf00      	nop
 8010954:	240037d4 	.word	0x240037d4

08010958 <_Balloc>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	69c6      	ldr	r6, [r0, #28]
 801095c:	4604      	mov	r4, r0
 801095e:	460d      	mov	r5, r1
 8010960:	b976      	cbnz	r6, 8010980 <_Balloc+0x28>
 8010962:	2010      	movs	r0, #16
 8010964:	f7ff ff44 	bl	80107f0 <malloc>
 8010968:	4602      	mov	r2, r0
 801096a:	61e0      	str	r0, [r4, #28]
 801096c:	b920      	cbnz	r0, 8010978 <_Balloc+0x20>
 801096e:	4b18      	ldr	r3, [pc, #96]	; (80109d0 <_Balloc+0x78>)
 8010970:	4818      	ldr	r0, [pc, #96]	; (80109d4 <_Balloc+0x7c>)
 8010972:	216b      	movs	r1, #107	; 0x6b
 8010974:	f000 fd9c 	bl	80114b0 <__assert_func>
 8010978:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801097c:	6006      	str	r6, [r0, #0]
 801097e:	60c6      	str	r6, [r0, #12]
 8010980:	69e6      	ldr	r6, [r4, #28]
 8010982:	68f3      	ldr	r3, [r6, #12]
 8010984:	b183      	cbz	r3, 80109a8 <_Balloc+0x50>
 8010986:	69e3      	ldr	r3, [r4, #28]
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801098e:	b9b8      	cbnz	r0, 80109c0 <_Balloc+0x68>
 8010990:	2101      	movs	r1, #1
 8010992:	fa01 f605 	lsl.w	r6, r1, r5
 8010996:	1d72      	adds	r2, r6, #5
 8010998:	0092      	lsls	r2, r2, #2
 801099a:	4620      	mov	r0, r4
 801099c:	f000 fda6 	bl	80114ec <_calloc_r>
 80109a0:	b160      	cbz	r0, 80109bc <_Balloc+0x64>
 80109a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80109a6:	e00e      	b.n	80109c6 <_Balloc+0x6e>
 80109a8:	2221      	movs	r2, #33	; 0x21
 80109aa:	2104      	movs	r1, #4
 80109ac:	4620      	mov	r0, r4
 80109ae:	f000 fd9d 	bl	80114ec <_calloc_r>
 80109b2:	69e3      	ldr	r3, [r4, #28]
 80109b4:	60f0      	str	r0, [r6, #12]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d1e4      	bne.n	8010986 <_Balloc+0x2e>
 80109bc:	2000      	movs	r0, #0
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	6802      	ldr	r2, [r0, #0]
 80109c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80109c6:	2300      	movs	r3, #0
 80109c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109cc:	e7f7      	b.n	80109be <_Balloc+0x66>
 80109ce:	bf00      	nop
 80109d0:	08011d62 	.word	0x08011d62
 80109d4:	08011de2 	.word	0x08011de2

080109d8 <_Bfree>:
 80109d8:	b570      	push	{r4, r5, r6, lr}
 80109da:	69c6      	ldr	r6, [r0, #28]
 80109dc:	4605      	mov	r5, r0
 80109de:	460c      	mov	r4, r1
 80109e0:	b976      	cbnz	r6, 8010a00 <_Bfree+0x28>
 80109e2:	2010      	movs	r0, #16
 80109e4:	f7ff ff04 	bl	80107f0 <malloc>
 80109e8:	4602      	mov	r2, r0
 80109ea:	61e8      	str	r0, [r5, #28]
 80109ec:	b920      	cbnz	r0, 80109f8 <_Bfree+0x20>
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <_Bfree+0x3c>)
 80109f0:	4809      	ldr	r0, [pc, #36]	; (8010a18 <_Bfree+0x40>)
 80109f2:	218f      	movs	r1, #143	; 0x8f
 80109f4:	f000 fd5c 	bl	80114b0 <__assert_func>
 80109f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109fc:	6006      	str	r6, [r0, #0]
 80109fe:	60c6      	str	r6, [r0, #12]
 8010a00:	b13c      	cbz	r4, 8010a12 <_Bfree+0x3a>
 8010a02:	69eb      	ldr	r3, [r5, #28]
 8010a04:	6862      	ldr	r2, [r4, #4]
 8010a06:	68db      	ldr	r3, [r3, #12]
 8010a08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010a0c:	6021      	str	r1, [r4, #0]
 8010a0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010a12:	bd70      	pop	{r4, r5, r6, pc}
 8010a14:	08011d62 	.word	0x08011d62
 8010a18:	08011de2 	.word	0x08011de2

08010a1c <__multadd>:
 8010a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a20:	690d      	ldr	r5, [r1, #16]
 8010a22:	4607      	mov	r7, r0
 8010a24:	460c      	mov	r4, r1
 8010a26:	461e      	mov	r6, r3
 8010a28:	f101 0c14 	add.w	ip, r1, #20
 8010a2c:	2000      	movs	r0, #0
 8010a2e:	f8dc 3000 	ldr.w	r3, [ip]
 8010a32:	b299      	uxth	r1, r3
 8010a34:	fb02 6101 	mla	r1, r2, r1, r6
 8010a38:	0c1e      	lsrs	r6, r3, #16
 8010a3a:	0c0b      	lsrs	r3, r1, #16
 8010a3c:	fb02 3306 	mla	r3, r2, r6, r3
 8010a40:	b289      	uxth	r1, r1
 8010a42:	3001      	adds	r0, #1
 8010a44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a48:	4285      	cmp	r5, r0
 8010a4a:	f84c 1b04 	str.w	r1, [ip], #4
 8010a4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a52:	dcec      	bgt.n	8010a2e <__multadd+0x12>
 8010a54:	b30e      	cbz	r6, 8010a9a <__multadd+0x7e>
 8010a56:	68a3      	ldr	r3, [r4, #8]
 8010a58:	42ab      	cmp	r3, r5
 8010a5a:	dc19      	bgt.n	8010a90 <__multadd+0x74>
 8010a5c:	6861      	ldr	r1, [r4, #4]
 8010a5e:	4638      	mov	r0, r7
 8010a60:	3101      	adds	r1, #1
 8010a62:	f7ff ff79 	bl	8010958 <_Balloc>
 8010a66:	4680      	mov	r8, r0
 8010a68:	b928      	cbnz	r0, 8010a76 <__multadd+0x5a>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	4b0c      	ldr	r3, [pc, #48]	; (8010aa0 <__multadd+0x84>)
 8010a6e:	480d      	ldr	r0, [pc, #52]	; (8010aa4 <__multadd+0x88>)
 8010a70:	21ba      	movs	r1, #186	; 0xba
 8010a72:	f000 fd1d 	bl	80114b0 <__assert_func>
 8010a76:	6922      	ldr	r2, [r4, #16]
 8010a78:	3202      	adds	r2, #2
 8010a7a:	f104 010c 	add.w	r1, r4, #12
 8010a7e:	0092      	lsls	r2, r2, #2
 8010a80:	300c      	adds	r0, #12
 8010a82:	f7ff f867 	bl	800fb54 <memcpy>
 8010a86:	4621      	mov	r1, r4
 8010a88:	4638      	mov	r0, r7
 8010a8a:	f7ff ffa5 	bl	80109d8 <_Bfree>
 8010a8e:	4644      	mov	r4, r8
 8010a90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a94:	3501      	adds	r5, #1
 8010a96:	615e      	str	r6, [r3, #20]
 8010a98:	6125      	str	r5, [r4, #16]
 8010a9a:	4620      	mov	r0, r4
 8010a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010aa0:	08011dd1 	.word	0x08011dd1
 8010aa4:	08011de2 	.word	0x08011de2

08010aa8 <__hi0bits>:
 8010aa8:	0c03      	lsrs	r3, r0, #16
 8010aaa:	041b      	lsls	r3, r3, #16
 8010aac:	b9d3      	cbnz	r3, 8010ae4 <__hi0bits+0x3c>
 8010aae:	0400      	lsls	r0, r0, #16
 8010ab0:	2310      	movs	r3, #16
 8010ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010ab6:	bf04      	itt	eq
 8010ab8:	0200      	lsleq	r0, r0, #8
 8010aba:	3308      	addeq	r3, #8
 8010abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010ac0:	bf04      	itt	eq
 8010ac2:	0100      	lsleq	r0, r0, #4
 8010ac4:	3304      	addeq	r3, #4
 8010ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010aca:	bf04      	itt	eq
 8010acc:	0080      	lsleq	r0, r0, #2
 8010ace:	3302      	addeq	r3, #2
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	db05      	blt.n	8010ae0 <__hi0bits+0x38>
 8010ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010ad8:	f103 0301 	add.w	r3, r3, #1
 8010adc:	bf08      	it	eq
 8010ade:	2320      	moveq	r3, #32
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	4770      	bx	lr
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	e7e4      	b.n	8010ab2 <__hi0bits+0xa>

08010ae8 <__lo0bits>:
 8010ae8:	6803      	ldr	r3, [r0, #0]
 8010aea:	f013 0207 	ands.w	r2, r3, #7
 8010aee:	d00c      	beq.n	8010b0a <__lo0bits+0x22>
 8010af0:	07d9      	lsls	r1, r3, #31
 8010af2:	d422      	bmi.n	8010b3a <__lo0bits+0x52>
 8010af4:	079a      	lsls	r2, r3, #30
 8010af6:	bf49      	itett	mi
 8010af8:	085b      	lsrmi	r3, r3, #1
 8010afa:	089b      	lsrpl	r3, r3, #2
 8010afc:	6003      	strmi	r3, [r0, #0]
 8010afe:	2201      	movmi	r2, #1
 8010b00:	bf5c      	itt	pl
 8010b02:	6003      	strpl	r3, [r0, #0]
 8010b04:	2202      	movpl	r2, #2
 8010b06:	4610      	mov	r0, r2
 8010b08:	4770      	bx	lr
 8010b0a:	b299      	uxth	r1, r3
 8010b0c:	b909      	cbnz	r1, 8010b12 <__lo0bits+0x2a>
 8010b0e:	0c1b      	lsrs	r3, r3, #16
 8010b10:	2210      	movs	r2, #16
 8010b12:	b2d9      	uxtb	r1, r3
 8010b14:	b909      	cbnz	r1, 8010b1a <__lo0bits+0x32>
 8010b16:	3208      	adds	r2, #8
 8010b18:	0a1b      	lsrs	r3, r3, #8
 8010b1a:	0719      	lsls	r1, r3, #28
 8010b1c:	bf04      	itt	eq
 8010b1e:	091b      	lsreq	r3, r3, #4
 8010b20:	3204      	addeq	r2, #4
 8010b22:	0799      	lsls	r1, r3, #30
 8010b24:	bf04      	itt	eq
 8010b26:	089b      	lsreq	r3, r3, #2
 8010b28:	3202      	addeq	r2, #2
 8010b2a:	07d9      	lsls	r1, r3, #31
 8010b2c:	d403      	bmi.n	8010b36 <__lo0bits+0x4e>
 8010b2e:	085b      	lsrs	r3, r3, #1
 8010b30:	f102 0201 	add.w	r2, r2, #1
 8010b34:	d003      	beq.n	8010b3e <__lo0bits+0x56>
 8010b36:	6003      	str	r3, [r0, #0]
 8010b38:	e7e5      	b.n	8010b06 <__lo0bits+0x1e>
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	e7e3      	b.n	8010b06 <__lo0bits+0x1e>
 8010b3e:	2220      	movs	r2, #32
 8010b40:	e7e1      	b.n	8010b06 <__lo0bits+0x1e>
	...

08010b44 <__i2b>:
 8010b44:	b510      	push	{r4, lr}
 8010b46:	460c      	mov	r4, r1
 8010b48:	2101      	movs	r1, #1
 8010b4a:	f7ff ff05 	bl	8010958 <_Balloc>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	b928      	cbnz	r0, 8010b5e <__i2b+0x1a>
 8010b52:	4b05      	ldr	r3, [pc, #20]	; (8010b68 <__i2b+0x24>)
 8010b54:	4805      	ldr	r0, [pc, #20]	; (8010b6c <__i2b+0x28>)
 8010b56:	f240 1145 	movw	r1, #325	; 0x145
 8010b5a:	f000 fca9 	bl	80114b0 <__assert_func>
 8010b5e:	2301      	movs	r3, #1
 8010b60:	6144      	str	r4, [r0, #20]
 8010b62:	6103      	str	r3, [r0, #16]
 8010b64:	bd10      	pop	{r4, pc}
 8010b66:	bf00      	nop
 8010b68:	08011dd1 	.word	0x08011dd1
 8010b6c:	08011de2 	.word	0x08011de2

08010b70 <__multiply>:
 8010b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b74:	4691      	mov	r9, r2
 8010b76:	690a      	ldr	r2, [r1, #16]
 8010b78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b7c:	429a      	cmp	r2, r3
 8010b7e:	bfb8      	it	lt
 8010b80:	460b      	movlt	r3, r1
 8010b82:	460c      	mov	r4, r1
 8010b84:	bfbc      	itt	lt
 8010b86:	464c      	movlt	r4, r9
 8010b88:	4699      	movlt	r9, r3
 8010b8a:	6927      	ldr	r7, [r4, #16]
 8010b8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b90:	68a3      	ldr	r3, [r4, #8]
 8010b92:	6861      	ldr	r1, [r4, #4]
 8010b94:	eb07 060a 	add.w	r6, r7, sl
 8010b98:	42b3      	cmp	r3, r6
 8010b9a:	b085      	sub	sp, #20
 8010b9c:	bfb8      	it	lt
 8010b9e:	3101      	addlt	r1, #1
 8010ba0:	f7ff feda 	bl	8010958 <_Balloc>
 8010ba4:	b930      	cbnz	r0, 8010bb4 <__multiply+0x44>
 8010ba6:	4602      	mov	r2, r0
 8010ba8:	4b44      	ldr	r3, [pc, #272]	; (8010cbc <__multiply+0x14c>)
 8010baa:	4845      	ldr	r0, [pc, #276]	; (8010cc0 <__multiply+0x150>)
 8010bac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010bb0:	f000 fc7e 	bl	80114b0 <__assert_func>
 8010bb4:	f100 0514 	add.w	r5, r0, #20
 8010bb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010bbc:	462b      	mov	r3, r5
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	4543      	cmp	r3, r8
 8010bc2:	d321      	bcc.n	8010c08 <__multiply+0x98>
 8010bc4:	f104 0314 	add.w	r3, r4, #20
 8010bc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010bcc:	f109 0314 	add.w	r3, r9, #20
 8010bd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010bd4:	9202      	str	r2, [sp, #8]
 8010bd6:	1b3a      	subs	r2, r7, r4
 8010bd8:	3a15      	subs	r2, #21
 8010bda:	f022 0203 	bic.w	r2, r2, #3
 8010bde:	3204      	adds	r2, #4
 8010be0:	f104 0115 	add.w	r1, r4, #21
 8010be4:	428f      	cmp	r7, r1
 8010be6:	bf38      	it	cc
 8010be8:	2204      	movcc	r2, #4
 8010bea:	9201      	str	r2, [sp, #4]
 8010bec:	9a02      	ldr	r2, [sp, #8]
 8010bee:	9303      	str	r3, [sp, #12]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d80c      	bhi.n	8010c0e <__multiply+0x9e>
 8010bf4:	2e00      	cmp	r6, #0
 8010bf6:	dd03      	ble.n	8010c00 <__multiply+0x90>
 8010bf8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d05b      	beq.n	8010cb8 <__multiply+0x148>
 8010c00:	6106      	str	r6, [r0, #16]
 8010c02:	b005      	add	sp, #20
 8010c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c08:	f843 2b04 	str.w	r2, [r3], #4
 8010c0c:	e7d8      	b.n	8010bc0 <__multiply+0x50>
 8010c0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8010c12:	f1ba 0f00 	cmp.w	sl, #0
 8010c16:	d024      	beq.n	8010c62 <__multiply+0xf2>
 8010c18:	f104 0e14 	add.w	lr, r4, #20
 8010c1c:	46a9      	mov	r9, r5
 8010c1e:	f04f 0c00 	mov.w	ip, #0
 8010c22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010c26:	f8d9 1000 	ldr.w	r1, [r9]
 8010c2a:	fa1f fb82 	uxth.w	fp, r2
 8010c2e:	b289      	uxth	r1, r1
 8010c30:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c38:	f8d9 2000 	ldr.w	r2, [r9]
 8010c3c:	4461      	add	r1, ip
 8010c3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c42:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c4a:	b289      	uxth	r1, r1
 8010c4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c50:	4577      	cmp	r7, lr
 8010c52:	f849 1b04 	str.w	r1, [r9], #4
 8010c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c5a:	d8e2      	bhi.n	8010c22 <__multiply+0xb2>
 8010c5c:	9a01      	ldr	r2, [sp, #4]
 8010c5e:	f845 c002 	str.w	ip, [r5, r2]
 8010c62:	9a03      	ldr	r2, [sp, #12]
 8010c64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c68:	3304      	adds	r3, #4
 8010c6a:	f1b9 0f00 	cmp.w	r9, #0
 8010c6e:	d021      	beq.n	8010cb4 <__multiply+0x144>
 8010c70:	6829      	ldr	r1, [r5, #0]
 8010c72:	f104 0c14 	add.w	ip, r4, #20
 8010c76:	46ae      	mov	lr, r5
 8010c78:	f04f 0a00 	mov.w	sl, #0
 8010c7c:	f8bc b000 	ldrh.w	fp, [ip]
 8010c80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c84:	fb09 220b 	mla	r2, r9, fp, r2
 8010c88:	4452      	add	r2, sl
 8010c8a:	b289      	uxth	r1, r1
 8010c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c90:	f84e 1b04 	str.w	r1, [lr], #4
 8010c94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c98:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c9c:	f8be 1000 	ldrh.w	r1, [lr]
 8010ca0:	fb09 110a 	mla	r1, r9, sl, r1
 8010ca4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010ca8:	4567      	cmp	r7, ip
 8010caa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010cae:	d8e5      	bhi.n	8010c7c <__multiply+0x10c>
 8010cb0:	9a01      	ldr	r2, [sp, #4]
 8010cb2:	50a9      	str	r1, [r5, r2]
 8010cb4:	3504      	adds	r5, #4
 8010cb6:	e799      	b.n	8010bec <__multiply+0x7c>
 8010cb8:	3e01      	subs	r6, #1
 8010cba:	e79b      	b.n	8010bf4 <__multiply+0x84>
 8010cbc:	08011dd1 	.word	0x08011dd1
 8010cc0:	08011de2 	.word	0x08011de2

08010cc4 <__pow5mult>:
 8010cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cc8:	4615      	mov	r5, r2
 8010cca:	f012 0203 	ands.w	r2, r2, #3
 8010cce:	4606      	mov	r6, r0
 8010cd0:	460f      	mov	r7, r1
 8010cd2:	d007      	beq.n	8010ce4 <__pow5mult+0x20>
 8010cd4:	4c25      	ldr	r4, [pc, #148]	; (8010d6c <__pow5mult+0xa8>)
 8010cd6:	3a01      	subs	r2, #1
 8010cd8:	2300      	movs	r3, #0
 8010cda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cde:	f7ff fe9d 	bl	8010a1c <__multadd>
 8010ce2:	4607      	mov	r7, r0
 8010ce4:	10ad      	asrs	r5, r5, #2
 8010ce6:	d03d      	beq.n	8010d64 <__pow5mult+0xa0>
 8010ce8:	69f4      	ldr	r4, [r6, #28]
 8010cea:	b97c      	cbnz	r4, 8010d0c <__pow5mult+0x48>
 8010cec:	2010      	movs	r0, #16
 8010cee:	f7ff fd7f 	bl	80107f0 <malloc>
 8010cf2:	4602      	mov	r2, r0
 8010cf4:	61f0      	str	r0, [r6, #28]
 8010cf6:	b928      	cbnz	r0, 8010d04 <__pow5mult+0x40>
 8010cf8:	4b1d      	ldr	r3, [pc, #116]	; (8010d70 <__pow5mult+0xac>)
 8010cfa:	481e      	ldr	r0, [pc, #120]	; (8010d74 <__pow5mult+0xb0>)
 8010cfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010d00:	f000 fbd6 	bl	80114b0 <__assert_func>
 8010d04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d08:	6004      	str	r4, [r0, #0]
 8010d0a:	60c4      	str	r4, [r0, #12]
 8010d0c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010d10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d14:	b94c      	cbnz	r4, 8010d2a <__pow5mult+0x66>
 8010d16:	f240 2171 	movw	r1, #625	; 0x271
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	f7ff ff12 	bl	8010b44 <__i2b>
 8010d20:	2300      	movs	r3, #0
 8010d22:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d26:	4604      	mov	r4, r0
 8010d28:	6003      	str	r3, [r0, #0]
 8010d2a:	f04f 0900 	mov.w	r9, #0
 8010d2e:	07eb      	lsls	r3, r5, #31
 8010d30:	d50a      	bpl.n	8010d48 <__pow5mult+0x84>
 8010d32:	4639      	mov	r1, r7
 8010d34:	4622      	mov	r2, r4
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7ff ff1a 	bl	8010b70 <__multiply>
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	4680      	mov	r8, r0
 8010d40:	4630      	mov	r0, r6
 8010d42:	f7ff fe49 	bl	80109d8 <_Bfree>
 8010d46:	4647      	mov	r7, r8
 8010d48:	106d      	asrs	r5, r5, #1
 8010d4a:	d00b      	beq.n	8010d64 <__pow5mult+0xa0>
 8010d4c:	6820      	ldr	r0, [r4, #0]
 8010d4e:	b938      	cbnz	r0, 8010d60 <__pow5mult+0x9c>
 8010d50:	4622      	mov	r2, r4
 8010d52:	4621      	mov	r1, r4
 8010d54:	4630      	mov	r0, r6
 8010d56:	f7ff ff0b 	bl	8010b70 <__multiply>
 8010d5a:	6020      	str	r0, [r4, #0]
 8010d5c:	f8c0 9000 	str.w	r9, [r0]
 8010d60:	4604      	mov	r4, r0
 8010d62:	e7e4      	b.n	8010d2e <__pow5mult+0x6a>
 8010d64:	4638      	mov	r0, r7
 8010d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d6a:	bf00      	nop
 8010d6c:	08011f30 	.word	0x08011f30
 8010d70:	08011d62 	.word	0x08011d62
 8010d74:	08011de2 	.word	0x08011de2

08010d78 <__lshift>:
 8010d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d7c:	460c      	mov	r4, r1
 8010d7e:	6849      	ldr	r1, [r1, #4]
 8010d80:	6923      	ldr	r3, [r4, #16]
 8010d82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d86:	68a3      	ldr	r3, [r4, #8]
 8010d88:	4607      	mov	r7, r0
 8010d8a:	4691      	mov	r9, r2
 8010d8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d90:	f108 0601 	add.w	r6, r8, #1
 8010d94:	42b3      	cmp	r3, r6
 8010d96:	db0b      	blt.n	8010db0 <__lshift+0x38>
 8010d98:	4638      	mov	r0, r7
 8010d9a:	f7ff fddd 	bl	8010958 <_Balloc>
 8010d9e:	4605      	mov	r5, r0
 8010da0:	b948      	cbnz	r0, 8010db6 <__lshift+0x3e>
 8010da2:	4602      	mov	r2, r0
 8010da4:	4b28      	ldr	r3, [pc, #160]	; (8010e48 <__lshift+0xd0>)
 8010da6:	4829      	ldr	r0, [pc, #164]	; (8010e4c <__lshift+0xd4>)
 8010da8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010dac:	f000 fb80 	bl	80114b0 <__assert_func>
 8010db0:	3101      	adds	r1, #1
 8010db2:	005b      	lsls	r3, r3, #1
 8010db4:	e7ee      	b.n	8010d94 <__lshift+0x1c>
 8010db6:	2300      	movs	r3, #0
 8010db8:	f100 0114 	add.w	r1, r0, #20
 8010dbc:	f100 0210 	add.w	r2, r0, #16
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	4553      	cmp	r3, sl
 8010dc4:	db33      	blt.n	8010e2e <__lshift+0xb6>
 8010dc6:	6920      	ldr	r0, [r4, #16]
 8010dc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dcc:	f104 0314 	add.w	r3, r4, #20
 8010dd0:	f019 091f 	ands.w	r9, r9, #31
 8010dd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010ddc:	d02b      	beq.n	8010e36 <__lshift+0xbe>
 8010dde:	f1c9 0e20 	rsb	lr, r9, #32
 8010de2:	468a      	mov	sl, r1
 8010de4:	2200      	movs	r2, #0
 8010de6:	6818      	ldr	r0, [r3, #0]
 8010de8:	fa00 f009 	lsl.w	r0, r0, r9
 8010dec:	4310      	orrs	r0, r2
 8010dee:	f84a 0b04 	str.w	r0, [sl], #4
 8010df2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df6:	459c      	cmp	ip, r3
 8010df8:	fa22 f20e 	lsr.w	r2, r2, lr
 8010dfc:	d8f3      	bhi.n	8010de6 <__lshift+0x6e>
 8010dfe:	ebac 0304 	sub.w	r3, ip, r4
 8010e02:	3b15      	subs	r3, #21
 8010e04:	f023 0303 	bic.w	r3, r3, #3
 8010e08:	3304      	adds	r3, #4
 8010e0a:	f104 0015 	add.w	r0, r4, #21
 8010e0e:	4584      	cmp	ip, r0
 8010e10:	bf38      	it	cc
 8010e12:	2304      	movcc	r3, #4
 8010e14:	50ca      	str	r2, [r1, r3]
 8010e16:	b10a      	cbz	r2, 8010e1c <__lshift+0xa4>
 8010e18:	f108 0602 	add.w	r6, r8, #2
 8010e1c:	3e01      	subs	r6, #1
 8010e1e:	4638      	mov	r0, r7
 8010e20:	612e      	str	r6, [r5, #16]
 8010e22:	4621      	mov	r1, r4
 8010e24:	f7ff fdd8 	bl	80109d8 <_Bfree>
 8010e28:	4628      	mov	r0, r5
 8010e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e32:	3301      	adds	r3, #1
 8010e34:	e7c5      	b.n	8010dc2 <__lshift+0x4a>
 8010e36:	3904      	subs	r1, #4
 8010e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e40:	459c      	cmp	ip, r3
 8010e42:	d8f9      	bhi.n	8010e38 <__lshift+0xc0>
 8010e44:	e7ea      	b.n	8010e1c <__lshift+0xa4>
 8010e46:	bf00      	nop
 8010e48:	08011dd1 	.word	0x08011dd1
 8010e4c:	08011de2 	.word	0x08011de2

08010e50 <__mcmp>:
 8010e50:	b530      	push	{r4, r5, lr}
 8010e52:	6902      	ldr	r2, [r0, #16]
 8010e54:	690c      	ldr	r4, [r1, #16]
 8010e56:	1b12      	subs	r2, r2, r4
 8010e58:	d10e      	bne.n	8010e78 <__mcmp+0x28>
 8010e5a:	f100 0314 	add.w	r3, r0, #20
 8010e5e:	3114      	adds	r1, #20
 8010e60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e70:	42a5      	cmp	r5, r4
 8010e72:	d003      	beq.n	8010e7c <__mcmp+0x2c>
 8010e74:	d305      	bcc.n	8010e82 <__mcmp+0x32>
 8010e76:	2201      	movs	r2, #1
 8010e78:	4610      	mov	r0, r2
 8010e7a:	bd30      	pop	{r4, r5, pc}
 8010e7c:	4283      	cmp	r3, r0
 8010e7e:	d3f3      	bcc.n	8010e68 <__mcmp+0x18>
 8010e80:	e7fa      	b.n	8010e78 <__mcmp+0x28>
 8010e82:	f04f 32ff 	mov.w	r2, #4294967295
 8010e86:	e7f7      	b.n	8010e78 <__mcmp+0x28>

08010e88 <__mdiff>:
 8010e88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8c:	460c      	mov	r4, r1
 8010e8e:	4606      	mov	r6, r0
 8010e90:	4611      	mov	r1, r2
 8010e92:	4620      	mov	r0, r4
 8010e94:	4690      	mov	r8, r2
 8010e96:	f7ff ffdb 	bl	8010e50 <__mcmp>
 8010e9a:	1e05      	subs	r5, r0, #0
 8010e9c:	d110      	bne.n	8010ec0 <__mdiff+0x38>
 8010e9e:	4629      	mov	r1, r5
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f7ff fd59 	bl	8010958 <_Balloc>
 8010ea6:	b930      	cbnz	r0, 8010eb6 <__mdiff+0x2e>
 8010ea8:	4b3a      	ldr	r3, [pc, #232]	; (8010f94 <__mdiff+0x10c>)
 8010eaa:	4602      	mov	r2, r0
 8010eac:	f240 2137 	movw	r1, #567	; 0x237
 8010eb0:	4839      	ldr	r0, [pc, #228]	; (8010f98 <__mdiff+0x110>)
 8010eb2:	f000 fafd 	bl	80114b0 <__assert_func>
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010ebc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ec0:	bfa4      	itt	ge
 8010ec2:	4643      	movge	r3, r8
 8010ec4:	46a0      	movge	r8, r4
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ecc:	bfa6      	itte	ge
 8010ece:	461c      	movge	r4, r3
 8010ed0:	2500      	movge	r5, #0
 8010ed2:	2501      	movlt	r5, #1
 8010ed4:	f7ff fd40 	bl	8010958 <_Balloc>
 8010ed8:	b920      	cbnz	r0, 8010ee4 <__mdiff+0x5c>
 8010eda:	4b2e      	ldr	r3, [pc, #184]	; (8010f94 <__mdiff+0x10c>)
 8010edc:	4602      	mov	r2, r0
 8010ede:	f240 2145 	movw	r1, #581	; 0x245
 8010ee2:	e7e5      	b.n	8010eb0 <__mdiff+0x28>
 8010ee4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ee8:	6926      	ldr	r6, [r4, #16]
 8010eea:	60c5      	str	r5, [r0, #12]
 8010eec:	f104 0914 	add.w	r9, r4, #20
 8010ef0:	f108 0514 	add.w	r5, r8, #20
 8010ef4:	f100 0e14 	add.w	lr, r0, #20
 8010ef8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010efc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010f00:	f108 0210 	add.w	r2, r8, #16
 8010f04:	46f2      	mov	sl, lr
 8010f06:	2100      	movs	r1, #0
 8010f08:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010f10:	fa11 f88b 	uxtah	r8, r1, fp
 8010f14:	b299      	uxth	r1, r3
 8010f16:	0c1b      	lsrs	r3, r3, #16
 8010f18:	eba8 0801 	sub.w	r8, r8, r1
 8010f1c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010f20:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010f24:	fa1f f888 	uxth.w	r8, r8
 8010f28:	1419      	asrs	r1, r3, #16
 8010f2a:	454e      	cmp	r6, r9
 8010f2c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f30:	f84a 3b04 	str.w	r3, [sl], #4
 8010f34:	d8e8      	bhi.n	8010f08 <__mdiff+0x80>
 8010f36:	1b33      	subs	r3, r6, r4
 8010f38:	3b15      	subs	r3, #21
 8010f3a:	f023 0303 	bic.w	r3, r3, #3
 8010f3e:	3304      	adds	r3, #4
 8010f40:	3415      	adds	r4, #21
 8010f42:	42a6      	cmp	r6, r4
 8010f44:	bf38      	it	cc
 8010f46:	2304      	movcc	r3, #4
 8010f48:	441d      	add	r5, r3
 8010f4a:	4473      	add	r3, lr
 8010f4c:	469e      	mov	lr, r3
 8010f4e:	462e      	mov	r6, r5
 8010f50:	4566      	cmp	r6, ip
 8010f52:	d30e      	bcc.n	8010f72 <__mdiff+0xea>
 8010f54:	f10c 0203 	add.w	r2, ip, #3
 8010f58:	1b52      	subs	r2, r2, r5
 8010f5a:	f022 0203 	bic.w	r2, r2, #3
 8010f5e:	3d03      	subs	r5, #3
 8010f60:	45ac      	cmp	ip, r5
 8010f62:	bf38      	it	cc
 8010f64:	2200      	movcc	r2, #0
 8010f66:	4413      	add	r3, r2
 8010f68:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010f6c:	b17a      	cbz	r2, 8010f8e <__mdiff+0x106>
 8010f6e:	6107      	str	r7, [r0, #16]
 8010f70:	e7a4      	b.n	8010ebc <__mdiff+0x34>
 8010f72:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f76:	fa11 f288 	uxtah	r2, r1, r8
 8010f7a:	1414      	asrs	r4, r2, #16
 8010f7c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f80:	b292      	uxth	r2, r2
 8010f82:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f86:	f84e 2b04 	str.w	r2, [lr], #4
 8010f8a:	1421      	asrs	r1, r4, #16
 8010f8c:	e7e0      	b.n	8010f50 <__mdiff+0xc8>
 8010f8e:	3f01      	subs	r7, #1
 8010f90:	e7ea      	b.n	8010f68 <__mdiff+0xe0>
 8010f92:	bf00      	nop
 8010f94:	08011dd1 	.word	0x08011dd1
 8010f98:	08011de2 	.word	0x08011de2

08010f9c <__d2b>:
 8010f9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010fa0:	460f      	mov	r7, r1
 8010fa2:	2101      	movs	r1, #1
 8010fa4:	ec59 8b10 	vmov	r8, r9, d0
 8010fa8:	4616      	mov	r6, r2
 8010faa:	f7ff fcd5 	bl	8010958 <_Balloc>
 8010fae:	4604      	mov	r4, r0
 8010fb0:	b930      	cbnz	r0, 8010fc0 <__d2b+0x24>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	4b24      	ldr	r3, [pc, #144]	; (8011048 <__d2b+0xac>)
 8010fb6:	4825      	ldr	r0, [pc, #148]	; (801104c <__d2b+0xb0>)
 8010fb8:	f240 310f 	movw	r1, #783	; 0x30f
 8010fbc:	f000 fa78 	bl	80114b0 <__assert_func>
 8010fc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010fc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010fc8:	bb2d      	cbnz	r5, 8011016 <__d2b+0x7a>
 8010fca:	9301      	str	r3, [sp, #4]
 8010fcc:	f1b8 0300 	subs.w	r3, r8, #0
 8010fd0:	d026      	beq.n	8011020 <__d2b+0x84>
 8010fd2:	4668      	mov	r0, sp
 8010fd4:	9300      	str	r3, [sp, #0]
 8010fd6:	f7ff fd87 	bl	8010ae8 <__lo0bits>
 8010fda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010fde:	b1e8      	cbz	r0, 801101c <__d2b+0x80>
 8010fe0:	f1c0 0320 	rsb	r3, r0, #32
 8010fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe8:	430b      	orrs	r3, r1
 8010fea:	40c2      	lsrs	r2, r0
 8010fec:	6163      	str	r3, [r4, #20]
 8010fee:	9201      	str	r2, [sp, #4]
 8010ff0:	9b01      	ldr	r3, [sp, #4]
 8010ff2:	61a3      	str	r3, [r4, #24]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	bf14      	ite	ne
 8010ff8:	2202      	movne	r2, #2
 8010ffa:	2201      	moveq	r2, #1
 8010ffc:	6122      	str	r2, [r4, #16]
 8010ffe:	b1bd      	cbz	r5, 8011030 <__d2b+0x94>
 8011000:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011004:	4405      	add	r5, r0
 8011006:	603d      	str	r5, [r7, #0]
 8011008:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801100c:	6030      	str	r0, [r6, #0]
 801100e:	4620      	mov	r0, r4
 8011010:	b003      	add	sp, #12
 8011012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011016:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801101a:	e7d6      	b.n	8010fca <__d2b+0x2e>
 801101c:	6161      	str	r1, [r4, #20]
 801101e:	e7e7      	b.n	8010ff0 <__d2b+0x54>
 8011020:	a801      	add	r0, sp, #4
 8011022:	f7ff fd61 	bl	8010ae8 <__lo0bits>
 8011026:	9b01      	ldr	r3, [sp, #4]
 8011028:	6163      	str	r3, [r4, #20]
 801102a:	3020      	adds	r0, #32
 801102c:	2201      	movs	r2, #1
 801102e:	e7e5      	b.n	8010ffc <__d2b+0x60>
 8011030:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011034:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011038:	6038      	str	r0, [r7, #0]
 801103a:	6918      	ldr	r0, [r3, #16]
 801103c:	f7ff fd34 	bl	8010aa8 <__hi0bits>
 8011040:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011044:	e7e2      	b.n	801100c <__d2b+0x70>
 8011046:	bf00      	nop
 8011048:	08011dd1 	.word	0x08011dd1
 801104c:	08011de2 	.word	0x08011de2

08011050 <__ssputs_r>:
 8011050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011054:	688e      	ldr	r6, [r1, #8]
 8011056:	461f      	mov	r7, r3
 8011058:	42be      	cmp	r6, r7
 801105a:	680b      	ldr	r3, [r1, #0]
 801105c:	4682      	mov	sl, r0
 801105e:	460c      	mov	r4, r1
 8011060:	4690      	mov	r8, r2
 8011062:	d82c      	bhi.n	80110be <__ssputs_r+0x6e>
 8011064:	898a      	ldrh	r2, [r1, #12]
 8011066:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801106a:	d026      	beq.n	80110ba <__ssputs_r+0x6a>
 801106c:	6965      	ldr	r5, [r4, #20]
 801106e:	6909      	ldr	r1, [r1, #16]
 8011070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011074:	eba3 0901 	sub.w	r9, r3, r1
 8011078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801107c:	1c7b      	adds	r3, r7, #1
 801107e:	444b      	add	r3, r9
 8011080:	106d      	asrs	r5, r5, #1
 8011082:	429d      	cmp	r5, r3
 8011084:	bf38      	it	cc
 8011086:	461d      	movcc	r5, r3
 8011088:	0553      	lsls	r3, r2, #21
 801108a:	d527      	bpl.n	80110dc <__ssputs_r+0x8c>
 801108c:	4629      	mov	r1, r5
 801108e:	f7ff fbd7 	bl	8010840 <_malloc_r>
 8011092:	4606      	mov	r6, r0
 8011094:	b360      	cbz	r0, 80110f0 <__ssputs_r+0xa0>
 8011096:	6921      	ldr	r1, [r4, #16]
 8011098:	464a      	mov	r2, r9
 801109a:	f7fe fd5b 	bl	800fb54 <memcpy>
 801109e:	89a3      	ldrh	r3, [r4, #12]
 80110a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80110a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	6126      	str	r6, [r4, #16]
 80110ac:	6165      	str	r5, [r4, #20]
 80110ae:	444e      	add	r6, r9
 80110b0:	eba5 0509 	sub.w	r5, r5, r9
 80110b4:	6026      	str	r6, [r4, #0]
 80110b6:	60a5      	str	r5, [r4, #8]
 80110b8:	463e      	mov	r6, r7
 80110ba:	42be      	cmp	r6, r7
 80110bc:	d900      	bls.n	80110c0 <__ssputs_r+0x70>
 80110be:	463e      	mov	r6, r7
 80110c0:	6820      	ldr	r0, [r4, #0]
 80110c2:	4632      	mov	r2, r6
 80110c4:	4641      	mov	r1, r8
 80110c6:	f000 f9c9 	bl	801145c <memmove>
 80110ca:	68a3      	ldr	r3, [r4, #8]
 80110cc:	1b9b      	subs	r3, r3, r6
 80110ce:	60a3      	str	r3, [r4, #8]
 80110d0:	6823      	ldr	r3, [r4, #0]
 80110d2:	4433      	add	r3, r6
 80110d4:	6023      	str	r3, [r4, #0]
 80110d6:	2000      	movs	r0, #0
 80110d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110dc:	462a      	mov	r2, r5
 80110de:	f000 fa2d 	bl	801153c <_realloc_r>
 80110e2:	4606      	mov	r6, r0
 80110e4:	2800      	cmp	r0, #0
 80110e6:	d1e0      	bne.n	80110aa <__ssputs_r+0x5a>
 80110e8:	6921      	ldr	r1, [r4, #16]
 80110ea:	4650      	mov	r0, sl
 80110ec:	f7ff fb34 	bl	8010758 <_free_r>
 80110f0:	230c      	movs	r3, #12
 80110f2:	f8ca 3000 	str.w	r3, [sl]
 80110f6:	89a3      	ldrh	r3, [r4, #12]
 80110f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110fc:	81a3      	strh	r3, [r4, #12]
 80110fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011102:	e7e9      	b.n	80110d8 <__ssputs_r+0x88>

08011104 <_svfiprintf_r>:
 8011104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011108:	4698      	mov	r8, r3
 801110a:	898b      	ldrh	r3, [r1, #12]
 801110c:	061b      	lsls	r3, r3, #24
 801110e:	b09d      	sub	sp, #116	; 0x74
 8011110:	4607      	mov	r7, r0
 8011112:	460d      	mov	r5, r1
 8011114:	4614      	mov	r4, r2
 8011116:	d50e      	bpl.n	8011136 <_svfiprintf_r+0x32>
 8011118:	690b      	ldr	r3, [r1, #16]
 801111a:	b963      	cbnz	r3, 8011136 <_svfiprintf_r+0x32>
 801111c:	2140      	movs	r1, #64	; 0x40
 801111e:	f7ff fb8f 	bl	8010840 <_malloc_r>
 8011122:	6028      	str	r0, [r5, #0]
 8011124:	6128      	str	r0, [r5, #16]
 8011126:	b920      	cbnz	r0, 8011132 <_svfiprintf_r+0x2e>
 8011128:	230c      	movs	r3, #12
 801112a:	603b      	str	r3, [r7, #0]
 801112c:	f04f 30ff 	mov.w	r0, #4294967295
 8011130:	e0d0      	b.n	80112d4 <_svfiprintf_r+0x1d0>
 8011132:	2340      	movs	r3, #64	; 0x40
 8011134:	616b      	str	r3, [r5, #20]
 8011136:	2300      	movs	r3, #0
 8011138:	9309      	str	r3, [sp, #36]	; 0x24
 801113a:	2320      	movs	r3, #32
 801113c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011140:	f8cd 800c 	str.w	r8, [sp, #12]
 8011144:	2330      	movs	r3, #48	; 0x30
 8011146:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80112ec <_svfiprintf_r+0x1e8>
 801114a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801114e:	f04f 0901 	mov.w	r9, #1
 8011152:	4623      	mov	r3, r4
 8011154:	469a      	mov	sl, r3
 8011156:	f813 2b01 	ldrb.w	r2, [r3], #1
 801115a:	b10a      	cbz	r2, 8011160 <_svfiprintf_r+0x5c>
 801115c:	2a25      	cmp	r2, #37	; 0x25
 801115e:	d1f9      	bne.n	8011154 <_svfiprintf_r+0x50>
 8011160:	ebba 0b04 	subs.w	fp, sl, r4
 8011164:	d00b      	beq.n	801117e <_svfiprintf_r+0x7a>
 8011166:	465b      	mov	r3, fp
 8011168:	4622      	mov	r2, r4
 801116a:	4629      	mov	r1, r5
 801116c:	4638      	mov	r0, r7
 801116e:	f7ff ff6f 	bl	8011050 <__ssputs_r>
 8011172:	3001      	adds	r0, #1
 8011174:	f000 80a9 	beq.w	80112ca <_svfiprintf_r+0x1c6>
 8011178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801117a:	445a      	add	r2, fp
 801117c:	9209      	str	r2, [sp, #36]	; 0x24
 801117e:	f89a 3000 	ldrb.w	r3, [sl]
 8011182:	2b00      	cmp	r3, #0
 8011184:	f000 80a1 	beq.w	80112ca <_svfiprintf_r+0x1c6>
 8011188:	2300      	movs	r3, #0
 801118a:	f04f 32ff 	mov.w	r2, #4294967295
 801118e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011192:	f10a 0a01 	add.w	sl, sl, #1
 8011196:	9304      	str	r3, [sp, #16]
 8011198:	9307      	str	r3, [sp, #28]
 801119a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801119e:	931a      	str	r3, [sp, #104]	; 0x68
 80111a0:	4654      	mov	r4, sl
 80111a2:	2205      	movs	r2, #5
 80111a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111a8:	4850      	ldr	r0, [pc, #320]	; (80112ec <_svfiprintf_r+0x1e8>)
 80111aa:	f7ef f899 	bl	80002e0 <memchr>
 80111ae:	9a04      	ldr	r2, [sp, #16]
 80111b0:	b9d8      	cbnz	r0, 80111ea <_svfiprintf_r+0xe6>
 80111b2:	06d0      	lsls	r0, r2, #27
 80111b4:	bf44      	itt	mi
 80111b6:	2320      	movmi	r3, #32
 80111b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111bc:	0711      	lsls	r1, r2, #28
 80111be:	bf44      	itt	mi
 80111c0:	232b      	movmi	r3, #43	; 0x2b
 80111c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80111c6:	f89a 3000 	ldrb.w	r3, [sl]
 80111ca:	2b2a      	cmp	r3, #42	; 0x2a
 80111cc:	d015      	beq.n	80111fa <_svfiprintf_r+0xf6>
 80111ce:	9a07      	ldr	r2, [sp, #28]
 80111d0:	4654      	mov	r4, sl
 80111d2:	2000      	movs	r0, #0
 80111d4:	f04f 0c0a 	mov.w	ip, #10
 80111d8:	4621      	mov	r1, r4
 80111da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111de:	3b30      	subs	r3, #48	; 0x30
 80111e0:	2b09      	cmp	r3, #9
 80111e2:	d94d      	bls.n	8011280 <_svfiprintf_r+0x17c>
 80111e4:	b1b0      	cbz	r0, 8011214 <_svfiprintf_r+0x110>
 80111e6:	9207      	str	r2, [sp, #28]
 80111e8:	e014      	b.n	8011214 <_svfiprintf_r+0x110>
 80111ea:	eba0 0308 	sub.w	r3, r0, r8
 80111ee:	fa09 f303 	lsl.w	r3, r9, r3
 80111f2:	4313      	orrs	r3, r2
 80111f4:	9304      	str	r3, [sp, #16]
 80111f6:	46a2      	mov	sl, r4
 80111f8:	e7d2      	b.n	80111a0 <_svfiprintf_r+0x9c>
 80111fa:	9b03      	ldr	r3, [sp, #12]
 80111fc:	1d19      	adds	r1, r3, #4
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	9103      	str	r1, [sp, #12]
 8011202:	2b00      	cmp	r3, #0
 8011204:	bfbb      	ittet	lt
 8011206:	425b      	neglt	r3, r3
 8011208:	f042 0202 	orrlt.w	r2, r2, #2
 801120c:	9307      	strge	r3, [sp, #28]
 801120e:	9307      	strlt	r3, [sp, #28]
 8011210:	bfb8      	it	lt
 8011212:	9204      	strlt	r2, [sp, #16]
 8011214:	7823      	ldrb	r3, [r4, #0]
 8011216:	2b2e      	cmp	r3, #46	; 0x2e
 8011218:	d10c      	bne.n	8011234 <_svfiprintf_r+0x130>
 801121a:	7863      	ldrb	r3, [r4, #1]
 801121c:	2b2a      	cmp	r3, #42	; 0x2a
 801121e:	d134      	bne.n	801128a <_svfiprintf_r+0x186>
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	1d1a      	adds	r2, r3, #4
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	9203      	str	r2, [sp, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	bfb8      	it	lt
 801122c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011230:	3402      	adds	r4, #2
 8011232:	9305      	str	r3, [sp, #20]
 8011234:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80112fc <_svfiprintf_r+0x1f8>
 8011238:	7821      	ldrb	r1, [r4, #0]
 801123a:	2203      	movs	r2, #3
 801123c:	4650      	mov	r0, sl
 801123e:	f7ef f84f 	bl	80002e0 <memchr>
 8011242:	b138      	cbz	r0, 8011254 <_svfiprintf_r+0x150>
 8011244:	9b04      	ldr	r3, [sp, #16]
 8011246:	eba0 000a 	sub.w	r0, r0, sl
 801124a:	2240      	movs	r2, #64	; 0x40
 801124c:	4082      	lsls	r2, r0
 801124e:	4313      	orrs	r3, r2
 8011250:	3401      	adds	r4, #1
 8011252:	9304      	str	r3, [sp, #16]
 8011254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011258:	4825      	ldr	r0, [pc, #148]	; (80112f0 <_svfiprintf_r+0x1ec>)
 801125a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801125e:	2206      	movs	r2, #6
 8011260:	f7ef f83e 	bl	80002e0 <memchr>
 8011264:	2800      	cmp	r0, #0
 8011266:	d038      	beq.n	80112da <_svfiprintf_r+0x1d6>
 8011268:	4b22      	ldr	r3, [pc, #136]	; (80112f4 <_svfiprintf_r+0x1f0>)
 801126a:	bb1b      	cbnz	r3, 80112b4 <_svfiprintf_r+0x1b0>
 801126c:	9b03      	ldr	r3, [sp, #12]
 801126e:	3307      	adds	r3, #7
 8011270:	f023 0307 	bic.w	r3, r3, #7
 8011274:	3308      	adds	r3, #8
 8011276:	9303      	str	r3, [sp, #12]
 8011278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801127a:	4433      	add	r3, r6
 801127c:	9309      	str	r3, [sp, #36]	; 0x24
 801127e:	e768      	b.n	8011152 <_svfiprintf_r+0x4e>
 8011280:	fb0c 3202 	mla	r2, ip, r2, r3
 8011284:	460c      	mov	r4, r1
 8011286:	2001      	movs	r0, #1
 8011288:	e7a6      	b.n	80111d8 <_svfiprintf_r+0xd4>
 801128a:	2300      	movs	r3, #0
 801128c:	3401      	adds	r4, #1
 801128e:	9305      	str	r3, [sp, #20]
 8011290:	4619      	mov	r1, r3
 8011292:	f04f 0c0a 	mov.w	ip, #10
 8011296:	4620      	mov	r0, r4
 8011298:	f810 2b01 	ldrb.w	r2, [r0], #1
 801129c:	3a30      	subs	r2, #48	; 0x30
 801129e:	2a09      	cmp	r2, #9
 80112a0:	d903      	bls.n	80112aa <_svfiprintf_r+0x1a6>
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d0c6      	beq.n	8011234 <_svfiprintf_r+0x130>
 80112a6:	9105      	str	r1, [sp, #20]
 80112a8:	e7c4      	b.n	8011234 <_svfiprintf_r+0x130>
 80112aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80112ae:	4604      	mov	r4, r0
 80112b0:	2301      	movs	r3, #1
 80112b2:	e7f0      	b.n	8011296 <_svfiprintf_r+0x192>
 80112b4:	ab03      	add	r3, sp, #12
 80112b6:	9300      	str	r3, [sp, #0]
 80112b8:	462a      	mov	r2, r5
 80112ba:	4b0f      	ldr	r3, [pc, #60]	; (80112f8 <_svfiprintf_r+0x1f4>)
 80112bc:	a904      	add	r1, sp, #16
 80112be:	4638      	mov	r0, r7
 80112c0:	f7fd feea 	bl	800f098 <_printf_float>
 80112c4:	1c42      	adds	r2, r0, #1
 80112c6:	4606      	mov	r6, r0
 80112c8:	d1d6      	bne.n	8011278 <_svfiprintf_r+0x174>
 80112ca:	89ab      	ldrh	r3, [r5, #12]
 80112cc:	065b      	lsls	r3, r3, #25
 80112ce:	f53f af2d 	bmi.w	801112c <_svfiprintf_r+0x28>
 80112d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112d4:	b01d      	add	sp, #116	; 0x74
 80112d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112da:	ab03      	add	r3, sp, #12
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	462a      	mov	r2, r5
 80112e0:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <_svfiprintf_r+0x1f4>)
 80112e2:	a904      	add	r1, sp, #16
 80112e4:	4638      	mov	r0, r7
 80112e6:	f7fe f95f 	bl	800f5a8 <_printf_i>
 80112ea:	e7eb      	b.n	80112c4 <_svfiprintf_r+0x1c0>
 80112ec:	08011f3c 	.word	0x08011f3c
 80112f0:	08011f46 	.word	0x08011f46
 80112f4:	0800f099 	.word	0x0800f099
 80112f8:	08011051 	.word	0x08011051
 80112fc:	08011f42 	.word	0x08011f42

08011300 <__sflush_r>:
 8011300:	898a      	ldrh	r2, [r1, #12]
 8011302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011306:	4605      	mov	r5, r0
 8011308:	0710      	lsls	r0, r2, #28
 801130a:	460c      	mov	r4, r1
 801130c:	d458      	bmi.n	80113c0 <__sflush_r+0xc0>
 801130e:	684b      	ldr	r3, [r1, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	dc05      	bgt.n	8011320 <__sflush_r+0x20>
 8011314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011316:	2b00      	cmp	r3, #0
 8011318:	dc02      	bgt.n	8011320 <__sflush_r+0x20>
 801131a:	2000      	movs	r0, #0
 801131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011322:	2e00      	cmp	r6, #0
 8011324:	d0f9      	beq.n	801131a <__sflush_r+0x1a>
 8011326:	2300      	movs	r3, #0
 8011328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801132c:	682f      	ldr	r7, [r5, #0]
 801132e:	6a21      	ldr	r1, [r4, #32]
 8011330:	602b      	str	r3, [r5, #0]
 8011332:	d032      	beq.n	801139a <__sflush_r+0x9a>
 8011334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	075a      	lsls	r2, r3, #29
 801133a:	d505      	bpl.n	8011348 <__sflush_r+0x48>
 801133c:	6863      	ldr	r3, [r4, #4]
 801133e:	1ac0      	subs	r0, r0, r3
 8011340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011342:	b10b      	cbz	r3, 8011348 <__sflush_r+0x48>
 8011344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011346:	1ac0      	subs	r0, r0, r3
 8011348:	2300      	movs	r3, #0
 801134a:	4602      	mov	r2, r0
 801134c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801134e:	6a21      	ldr	r1, [r4, #32]
 8011350:	4628      	mov	r0, r5
 8011352:	47b0      	blx	r6
 8011354:	1c43      	adds	r3, r0, #1
 8011356:	89a3      	ldrh	r3, [r4, #12]
 8011358:	d106      	bne.n	8011368 <__sflush_r+0x68>
 801135a:	6829      	ldr	r1, [r5, #0]
 801135c:	291d      	cmp	r1, #29
 801135e:	d82b      	bhi.n	80113b8 <__sflush_r+0xb8>
 8011360:	4a29      	ldr	r2, [pc, #164]	; (8011408 <__sflush_r+0x108>)
 8011362:	410a      	asrs	r2, r1
 8011364:	07d6      	lsls	r6, r2, #31
 8011366:	d427      	bmi.n	80113b8 <__sflush_r+0xb8>
 8011368:	2200      	movs	r2, #0
 801136a:	6062      	str	r2, [r4, #4]
 801136c:	04d9      	lsls	r1, r3, #19
 801136e:	6922      	ldr	r2, [r4, #16]
 8011370:	6022      	str	r2, [r4, #0]
 8011372:	d504      	bpl.n	801137e <__sflush_r+0x7e>
 8011374:	1c42      	adds	r2, r0, #1
 8011376:	d101      	bne.n	801137c <__sflush_r+0x7c>
 8011378:	682b      	ldr	r3, [r5, #0]
 801137a:	b903      	cbnz	r3, 801137e <__sflush_r+0x7e>
 801137c:	6560      	str	r0, [r4, #84]	; 0x54
 801137e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011380:	602f      	str	r7, [r5, #0]
 8011382:	2900      	cmp	r1, #0
 8011384:	d0c9      	beq.n	801131a <__sflush_r+0x1a>
 8011386:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801138a:	4299      	cmp	r1, r3
 801138c:	d002      	beq.n	8011394 <__sflush_r+0x94>
 801138e:	4628      	mov	r0, r5
 8011390:	f7ff f9e2 	bl	8010758 <_free_r>
 8011394:	2000      	movs	r0, #0
 8011396:	6360      	str	r0, [r4, #52]	; 0x34
 8011398:	e7c0      	b.n	801131c <__sflush_r+0x1c>
 801139a:	2301      	movs	r3, #1
 801139c:	4628      	mov	r0, r5
 801139e:	47b0      	blx	r6
 80113a0:	1c41      	adds	r1, r0, #1
 80113a2:	d1c8      	bne.n	8011336 <__sflush_r+0x36>
 80113a4:	682b      	ldr	r3, [r5, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d0c5      	beq.n	8011336 <__sflush_r+0x36>
 80113aa:	2b1d      	cmp	r3, #29
 80113ac:	d001      	beq.n	80113b2 <__sflush_r+0xb2>
 80113ae:	2b16      	cmp	r3, #22
 80113b0:	d101      	bne.n	80113b6 <__sflush_r+0xb6>
 80113b2:	602f      	str	r7, [r5, #0]
 80113b4:	e7b1      	b.n	801131a <__sflush_r+0x1a>
 80113b6:	89a3      	ldrh	r3, [r4, #12]
 80113b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113bc:	81a3      	strh	r3, [r4, #12]
 80113be:	e7ad      	b.n	801131c <__sflush_r+0x1c>
 80113c0:	690f      	ldr	r7, [r1, #16]
 80113c2:	2f00      	cmp	r7, #0
 80113c4:	d0a9      	beq.n	801131a <__sflush_r+0x1a>
 80113c6:	0793      	lsls	r3, r2, #30
 80113c8:	680e      	ldr	r6, [r1, #0]
 80113ca:	bf08      	it	eq
 80113cc:	694b      	ldreq	r3, [r1, #20]
 80113ce:	600f      	str	r7, [r1, #0]
 80113d0:	bf18      	it	ne
 80113d2:	2300      	movne	r3, #0
 80113d4:	eba6 0807 	sub.w	r8, r6, r7
 80113d8:	608b      	str	r3, [r1, #8]
 80113da:	f1b8 0f00 	cmp.w	r8, #0
 80113de:	dd9c      	ble.n	801131a <__sflush_r+0x1a>
 80113e0:	6a21      	ldr	r1, [r4, #32]
 80113e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80113e4:	4643      	mov	r3, r8
 80113e6:	463a      	mov	r2, r7
 80113e8:	4628      	mov	r0, r5
 80113ea:	47b0      	blx	r6
 80113ec:	2800      	cmp	r0, #0
 80113ee:	dc06      	bgt.n	80113fe <__sflush_r+0xfe>
 80113f0:	89a3      	ldrh	r3, [r4, #12]
 80113f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80113f6:	81a3      	strh	r3, [r4, #12]
 80113f8:	f04f 30ff 	mov.w	r0, #4294967295
 80113fc:	e78e      	b.n	801131c <__sflush_r+0x1c>
 80113fe:	4407      	add	r7, r0
 8011400:	eba8 0800 	sub.w	r8, r8, r0
 8011404:	e7e9      	b.n	80113da <__sflush_r+0xda>
 8011406:	bf00      	nop
 8011408:	dfbffffe 	.word	0xdfbffffe

0801140c <_fflush_r>:
 801140c:	b538      	push	{r3, r4, r5, lr}
 801140e:	690b      	ldr	r3, [r1, #16]
 8011410:	4605      	mov	r5, r0
 8011412:	460c      	mov	r4, r1
 8011414:	b913      	cbnz	r3, 801141c <_fflush_r+0x10>
 8011416:	2500      	movs	r5, #0
 8011418:	4628      	mov	r0, r5
 801141a:	bd38      	pop	{r3, r4, r5, pc}
 801141c:	b118      	cbz	r0, 8011426 <_fflush_r+0x1a>
 801141e:	6a03      	ldr	r3, [r0, #32]
 8011420:	b90b      	cbnz	r3, 8011426 <_fflush_r+0x1a>
 8011422:	f7fe fa5d 	bl	800f8e0 <__sinit>
 8011426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d0f3      	beq.n	8011416 <_fflush_r+0xa>
 801142e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011430:	07d0      	lsls	r0, r2, #31
 8011432:	d404      	bmi.n	801143e <_fflush_r+0x32>
 8011434:	0599      	lsls	r1, r3, #22
 8011436:	d402      	bmi.n	801143e <_fflush_r+0x32>
 8011438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801143a:	f7fe fb89 	bl	800fb50 <__retarget_lock_acquire_recursive>
 801143e:	4628      	mov	r0, r5
 8011440:	4621      	mov	r1, r4
 8011442:	f7ff ff5d 	bl	8011300 <__sflush_r>
 8011446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011448:	07da      	lsls	r2, r3, #31
 801144a:	4605      	mov	r5, r0
 801144c:	d4e4      	bmi.n	8011418 <_fflush_r+0xc>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	059b      	lsls	r3, r3, #22
 8011452:	d4e1      	bmi.n	8011418 <_fflush_r+0xc>
 8011454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011456:	f7fe fb7c 	bl	800fb52 <__retarget_lock_release_recursive>
 801145a:	e7dd      	b.n	8011418 <_fflush_r+0xc>

0801145c <memmove>:
 801145c:	4288      	cmp	r0, r1
 801145e:	b510      	push	{r4, lr}
 8011460:	eb01 0402 	add.w	r4, r1, r2
 8011464:	d902      	bls.n	801146c <memmove+0x10>
 8011466:	4284      	cmp	r4, r0
 8011468:	4623      	mov	r3, r4
 801146a:	d807      	bhi.n	801147c <memmove+0x20>
 801146c:	1e43      	subs	r3, r0, #1
 801146e:	42a1      	cmp	r1, r4
 8011470:	d008      	beq.n	8011484 <memmove+0x28>
 8011472:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011476:	f803 2f01 	strb.w	r2, [r3, #1]!
 801147a:	e7f8      	b.n	801146e <memmove+0x12>
 801147c:	4402      	add	r2, r0
 801147e:	4601      	mov	r1, r0
 8011480:	428a      	cmp	r2, r1
 8011482:	d100      	bne.n	8011486 <memmove+0x2a>
 8011484:	bd10      	pop	{r4, pc}
 8011486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801148a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801148e:	e7f7      	b.n	8011480 <memmove+0x24>

08011490 <_sbrk_r>:
 8011490:	b538      	push	{r3, r4, r5, lr}
 8011492:	4d06      	ldr	r5, [pc, #24]	; (80114ac <_sbrk_r+0x1c>)
 8011494:	2300      	movs	r3, #0
 8011496:	4604      	mov	r4, r0
 8011498:	4608      	mov	r0, r1
 801149a:	602b      	str	r3, [r5, #0]
 801149c:	f7f1 f98a 	bl	80027b4 <_sbrk>
 80114a0:	1c43      	adds	r3, r0, #1
 80114a2:	d102      	bne.n	80114aa <_sbrk_r+0x1a>
 80114a4:	682b      	ldr	r3, [r5, #0]
 80114a6:	b103      	cbz	r3, 80114aa <_sbrk_r+0x1a>
 80114a8:	6023      	str	r3, [r4, #0]
 80114aa:	bd38      	pop	{r3, r4, r5, pc}
 80114ac:	240037d0 	.word	0x240037d0

080114b0 <__assert_func>:
 80114b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114b2:	4614      	mov	r4, r2
 80114b4:	461a      	mov	r2, r3
 80114b6:	4b09      	ldr	r3, [pc, #36]	; (80114dc <__assert_func+0x2c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4605      	mov	r5, r0
 80114bc:	68d8      	ldr	r0, [r3, #12]
 80114be:	b14c      	cbz	r4, 80114d4 <__assert_func+0x24>
 80114c0:	4b07      	ldr	r3, [pc, #28]	; (80114e0 <__assert_func+0x30>)
 80114c2:	9100      	str	r1, [sp, #0]
 80114c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114c8:	4906      	ldr	r1, [pc, #24]	; (80114e4 <__assert_func+0x34>)
 80114ca:	462b      	mov	r3, r5
 80114cc:	f000 f872 	bl	80115b4 <fiprintf>
 80114d0:	f000 f882 	bl	80115d8 <abort>
 80114d4:	4b04      	ldr	r3, [pc, #16]	; (80114e8 <__assert_func+0x38>)
 80114d6:	461c      	mov	r4, r3
 80114d8:	e7f3      	b.n	80114c2 <__assert_func+0x12>
 80114da:	bf00      	nop
 80114dc:	24000168 	.word	0x24000168
 80114e0:	08011f57 	.word	0x08011f57
 80114e4:	08011f64 	.word	0x08011f64
 80114e8:	08011f92 	.word	0x08011f92

080114ec <_calloc_r>:
 80114ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ee:	fba1 2402 	umull	r2, r4, r1, r2
 80114f2:	b94c      	cbnz	r4, 8011508 <_calloc_r+0x1c>
 80114f4:	4611      	mov	r1, r2
 80114f6:	9201      	str	r2, [sp, #4]
 80114f8:	f7ff f9a2 	bl	8010840 <_malloc_r>
 80114fc:	9a01      	ldr	r2, [sp, #4]
 80114fe:	4605      	mov	r5, r0
 8011500:	b930      	cbnz	r0, 8011510 <_calloc_r+0x24>
 8011502:	4628      	mov	r0, r5
 8011504:	b003      	add	sp, #12
 8011506:	bd30      	pop	{r4, r5, pc}
 8011508:	220c      	movs	r2, #12
 801150a:	6002      	str	r2, [r0, #0]
 801150c:	2500      	movs	r5, #0
 801150e:	e7f8      	b.n	8011502 <_calloc_r+0x16>
 8011510:	4621      	mov	r1, r4
 8011512:	f7fe fa7e 	bl	800fa12 <memset>
 8011516:	e7f4      	b.n	8011502 <_calloc_r+0x16>

08011518 <__ascii_mbtowc>:
 8011518:	b082      	sub	sp, #8
 801151a:	b901      	cbnz	r1, 801151e <__ascii_mbtowc+0x6>
 801151c:	a901      	add	r1, sp, #4
 801151e:	b142      	cbz	r2, 8011532 <__ascii_mbtowc+0x1a>
 8011520:	b14b      	cbz	r3, 8011536 <__ascii_mbtowc+0x1e>
 8011522:	7813      	ldrb	r3, [r2, #0]
 8011524:	600b      	str	r3, [r1, #0]
 8011526:	7812      	ldrb	r2, [r2, #0]
 8011528:	1e10      	subs	r0, r2, #0
 801152a:	bf18      	it	ne
 801152c:	2001      	movne	r0, #1
 801152e:	b002      	add	sp, #8
 8011530:	4770      	bx	lr
 8011532:	4610      	mov	r0, r2
 8011534:	e7fb      	b.n	801152e <__ascii_mbtowc+0x16>
 8011536:	f06f 0001 	mvn.w	r0, #1
 801153a:	e7f8      	b.n	801152e <__ascii_mbtowc+0x16>

0801153c <_realloc_r>:
 801153c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011540:	4680      	mov	r8, r0
 8011542:	4614      	mov	r4, r2
 8011544:	460e      	mov	r6, r1
 8011546:	b921      	cbnz	r1, 8011552 <_realloc_r+0x16>
 8011548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801154c:	4611      	mov	r1, r2
 801154e:	f7ff b977 	b.w	8010840 <_malloc_r>
 8011552:	b92a      	cbnz	r2, 8011560 <_realloc_r+0x24>
 8011554:	f7ff f900 	bl	8010758 <_free_r>
 8011558:	4625      	mov	r5, r4
 801155a:	4628      	mov	r0, r5
 801155c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011560:	f000 f841 	bl	80115e6 <_malloc_usable_size_r>
 8011564:	4284      	cmp	r4, r0
 8011566:	4607      	mov	r7, r0
 8011568:	d802      	bhi.n	8011570 <_realloc_r+0x34>
 801156a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801156e:	d812      	bhi.n	8011596 <_realloc_r+0x5a>
 8011570:	4621      	mov	r1, r4
 8011572:	4640      	mov	r0, r8
 8011574:	f7ff f964 	bl	8010840 <_malloc_r>
 8011578:	4605      	mov	r5, r0
 801157a:	2800      	cmp	r0, #0
 801157c:	d0ed      	beq.n	801155a <_realloc_r+0x1e>
 801157e:	42bc      	cmp	r4, r7
 8011580:	4622      	mov	r2, r4
 8011582:	4631      	mov	r1, r6
 8011584:	bf28      	it	cs
 8011586:	463a      	movcs	r2, r7
 8011588:	f7fe fae4 	bl	800fb54 <memcpy>
 801158c:	4631      	mov	r1, r6
 801158e:	4640      	mov	r0, r8
 8011590:	f7ff f8e2 	bl	8010758 <_free_r>
 8011594:	e7e1      	b.n	801155a <_realloc_r+0x1e>
 8011596:	4635      	mov	r5, r6
 8011598:	e7df      	b.n	801155a <_realloc_r+0x1e>

0801159a <__ascii_wctomb>:
 801159a:	b149      	cbz	r1, 80115b0 <__ascii_wctomb+0x16>
 801159c:	2aff      	cmp	r2, #255	; 0xff
 801159e:	bf85      	ittet	hi
 80115a0:	238a      	movhi	r3, #138	; 0x8a
 80115a2:	6003      	strhi	r3, [r0, #0]
 80115a4:	700a      	strbls	r2, [r1, #0]
 80115a6:	f04f 30ff 	movhi.w	r0, #4294967295
 80115aa:	bf98      	it	ls
 80115ac:	2001      	movls	r0, #1
 80115ae:	4770      	bx	lr
 80115b0:	4608      	mov	r0, r1
 80115b2:	4770      	bx	lr

080115b4 <fiprintf>:
 80115b4:	b40e      	push	{r1, r2, r3}
 80115b6:	b503      	push	{r0, r1, lr}
 80115b8:	4601      	mov	r1, r0
 80115ba:	ab03      	add	r3, sp, #12
 80115bc:	4805      	ldr	r0, [pc, #20]	; (80115d4 <fiprintf+0x20>)
 80115be:	f853 2b04 	ldr.w	r2, [r3], #4
 80115c2:	6800      	ldr	r0, [r0, #0]
 80115c4:	9301      	str	r3, [sp, #4]
 80115c6:	f000 f83f 	bl	8011648 <_vfiprintf_r>
 80115ca:	b002      	add	sp, #8
 80115cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80115d0:	b003      	add	sp, #12
 80115d2:	4770      	bx	lr
 80115d4:	24000168 	.word	0x24000168

080115d8 <abort>:
 80115d8:	b508      	push	{r3, lr}
 80115da:	2006      	movs	r0, #6
 80115dc:	f000 fa0c 	bl	80119f8 <raise>
 80115e0:	2001      	movs	r0, #1
 80115e2:	f7f1 f86f 	bl	80026c4 <_exit>

080115e6 <_malloc_usable_size_r>:
 80115e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115ea:	1f18      	subs	r0, r3, #4
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	bfbc      	itt	lt
 80115f0:	580b      	ldrlt	r3, [r1, r0]
 80115f2:	18c0      	addlt	r0, r0, r3
 80115f4:	4770      	bx	lr

080115f6 <__sfputc_r>:
 80115f6:	6893      	ldr	r3, [r2, #8]
 80115f8:	3b01      	subs	r3, #1
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	b410      	push	{r4}
 80115fe:	6093      	str	r3, [r2, #8]
 8011600:	da08      	bge.n	8011614 <__sfputc_r+0x1e>
 8011602:	6994      	ldr	r4, [r2, #24]
 8011604:	42a3      	cmp	r3, r4
 8011606:	db01      	blt.n	801160c <__sfputc_r+0x16>
 8011608:	290a      	cmp	r1, #10
 801160a:	d103      	bne.n	8011614 <__sfputc_r+0x1e>
 801160c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011610:	f000 b934 	b.w	801187c <__swbuf_r>
 8011614:	6813      	ldr	r3, [r2, #0]
 8011616:	1c58      	adds	r0, r3, #1
 8011618:	6010      	str	r0, [r2, #0]
 801161a:	7019      	strb	r1, [r3, #0]
 801161c:	4608      	mov	r0, r1
 801161e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011622:	4770      	bx	lr

08011624 <__sfputs_r>:
 8011624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011626:	4606      	mov	r6, r0
 8011628:	460f      	mov	r7, r1
 801162a:	4614      	mov	r4, r2
 801162c:	18d5      	adds	r5, r2, r3
 801162e:	42ac      	cmp	r4, r5
 8011630:	d101      	bne.n	8011636 <__sfputs_r+0x12>
 8011632:	2000      	movs	r0, #0
 8011634:	e007      	b.n	8011646 <__sfputs_r+0x22>
 8011636:	f814 1b01 	ldrb.w	r1, [r4], #1
 801163a:	463a      	mov	r2, r7
 801163c:	4630      	mov	r0, r6
 801163e:	f7ff ffda 	bl	80115f6 <__sfputc_r>
 8011642:	1c43      	adds	r3, r0, #1
 8011644:	d1f3      	bne.n	801162e <__sfputs_r+0xa>
 8011646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011648 <_vfiprintf_r>:
 8011648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801164c:	460d      	mov	r5, r1
 801164e:	b09d      	sub	sp, #116	; 0x74
 8011650:	4614      	mov	r4, r2
 8011652:	4698      	mov	r8, r3
 8011654:	4606      	mov	r6, r0
 8011656:	b118      	cbz	r0, 8011660 <_vfiprintf_r+0x18>
 8011658:	6a03      	ldr	r3, [r0, #32]
 801165a:	b90b      	cbnz	r3, 8011660 <_vfiprintf_r+0x18>
 801165c:	f7fe f940 	bl	800f8e0 <__sinit>
 8011660:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011662:	07d9      	lsls	r1, r3, #31
 8011664:	d405      	bmi.n	8011672 <_vfiprintf_r+0x2a>
 8011666:	89ab      	ldrh	r3, [r5, #12]
 8011668:	059a      	lsls	r2, r3, #22
 801166a:	d402      	bmi.n	8011672 <_vfiprintf_r+0x2a>
 801166c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801166e:	f7fe fa6f 	bl	800fb50 <__retarget_lock_acquire_recursive>
 8011672:	89ab      	ldrh	r3, [r5, #12]
 8011674:	071b      	lsls	r3, r3, #28
 8011676:	d501      	bpl.n	801167c <_vfiprintf_r+0x34>
 8011678:	692b      	ldr	r3, [r5, #16]
 801167a:	b99b      	cbnz	r3, 80116a4 <_vfiprintf_r+0x5c>
 801167c:	4629      	mov	r1, r5
 801167e:	4630      	mov	r0, r6
 8011680:	f000 f93a 	bl	80118f8 <__swsetup_r>
 8011684:	b170      	cbz	r0, 80116a4 <_vfiprintf_r+0x5c>
 8011686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011688:	07dc      	lsls	r4, r3, #31
 801168a:	d504      	bpl.n	8011696 <_vfiprintf_r+0x4e>
 801168c:	f04f 30ff 	mov.w	r0, #4294967295
 8011690:	b01d      	add	sp, #116	; 0x74
 8011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011696:	89ab      	ldrh	r3, [r5, #12]
 8011698:	0598      	lsls	r0, r3, #22
 801169a:	d4f7      	bmi.n	801168c <_vfiprintf_r+0x44>
 801169c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801169e:	f7fe fa58 	bl	800fb52 <__retarget_lock_release_recursive>
 80116a2:	e7f3      	b.n	801168c <_vfiprintf_r+0x44>
 80116a4:	2300      	movs	r3, #0
 80116a6:	9309      	str	r3, [sp, #36]	; 0x24
 80116a8:	2320      	movs	r3, #32
 80116aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80116ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80116b2:	2330      	movs	r3, #48	; 0x30
 80116b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011868 <_vfiprintf_r+0x220>
 80116b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80116bc:	f04f 0901 	mov.w	r9, #1
 80116c0:	4623      	mov	r3, r4
 80116c2:	469a      	mov	sl, r3
 80116c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80116c8:	b10a      	cbz	r2, 80116ce <_vfiprintf_r+0x86>
 80116ca:	2a25      	cmp	r2, #37	; 0x25
 80116cc:	d1f9      	bne.n	80116c2 <_vfiprintf_r+0x7a>
 80116ce:	ebba 0b04 	subs.w	fp, sl, r4
 80116d2:	d00b      	beq.n	80116ec <_vfiprintf_r+0xa4>
 80116d4:	465b      	mov	r3, fp
 80116d6:	4622      	mov	r2, r4
 80116d8:	4629      	mov	r1, r5
 80116da:	4630      	mov	r0, r6
 80116dc:	f7ff ffa2 	bl	8011624 <__sfputs_r>
 80116e0:	3001      	adds	r0, #1
 80116e2:	f000 80a9 	beq.w	8011838 <_vfiprintf_r+0x1f0>
 80116e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80116e8:	445a      	add	r2, fp
 80116ea:	9209      	str	r2, [sp, #36]	; 0x24
 80116ec:	f89a 3000 	ldrb.w	r3, [sl]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	f000 80a1 	beq.w	8011838 <_vfiprintf_r+0x1f0>
 80116f6:	2300      	movs	r3, #0
 80116f8:	f04f 32ff 	mov.w	r2, #4294967295
 80116fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011700:	f10a 0a01 	add.w	sl, sl, #1
 8011704:	9304      	str	r3, [sp, #16]
 8011706:	9307      	str	r3, [sp, #28]
 8011708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801170c:	931a      	str	r3, [sp, #104]	; 0x68
 801170e:	4654      	mov	r4, sl
 8011710:	2205      	movs	r2, #5
 8011712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011716:	4854      	ldr	r0, [pc, #336]	; (8011868 <_vfiprintf_r+0x220>)
 8011718:	f7ee fde2 	bl	80002e0 <memchr>
 801171c:	9a04      	ldr	r2, [sp, #16]
 801171e:	b9d8      	cbnz	r0, 8011758 <_vfiprintf_r+0x110>
 8011720:	06d1      	lsls	r1, r2, #27
 8011722:	bf44      	itt	mi
 8011724:	2320      	movmi	r3, #32
 8011726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801172a:	0713      	lsls	r3, r2, #28
 801172c:	bf44      	itt	mi
 801172e:	232b      	movmi	r3, #43	; 0x2b
 8011730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011734:	f89a 3000 	ldrb.w	r3, [sl]
 8011738:	2b2a      	cmp	r3, #42	; 0x2a
 801173a:	d015      	beq.n	8011768 <_vfiprintf_r+0x120>
 801173c:	9a07      	ldr	r2, [sp, #28]
 801173e:	4654      	mov	r4, sl
 8011740:	2000      	movs	r0, #0
 8011742:	f04f 0c0a 	mov.w	ip, #10
 8011746:	4621      	mov	r1, r4
 8011748:	f811 3b01 	ldrb.w	r3, [r1], #1
 801174c:	3b30      	subs	r3, #48	; 0x30
 801174e:	2b09      	cmp	r3, #9
 8011750:	d94d      	bls.n	80117ee <_vfiprintf_r+0x1a6>
 8011752:	b1b0      	cbz	r0, 8011782 <_vfiprintf_r+0x13a>
 8011754:	9207      	str	r2, [sp, #28]
 8011756:	e014      	b.n	8011782 <_vfiprintf_r+0x13a>
 8011758:	eba0 0308 	sub.w	r3, r0, r8
 801175c:	fa09 f303 	lsl.w	r3, r9, r3
 8011760:	4313      	orrs	r3, r2
 8011762:	9304      	str	r3, [sp, #16]
 8011764:	46a2      	mov	sl, r4
 8011766:	e7d2      	b.n	801170e <_vfiprintf_r+0xc6>
 8011768:	9b03      	ldr	r3, [sp, #12]
 801176a:	1d19      	adds	r1, r3, #4
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	9103      	str	r1, [sp, #12]
 8011770:	2b00      	cmp	r3, #0
 8011772:	bfbb      	ittet	lt
 8011774:	425b      	neglt	r3, r3
 8011776:	f042 0202 	orrlt.w	r2, r2, #2
 801177a:	9307      	strge	r3, [sp, #28]
 801177c:	9307      	strlt	r3, [sp, #28]
 801177e:	bfb8      	it	lt
 8011780:	9204      	strlt	r2, [sp, #16]
 8011782:	7823      	ldrb	r3, [r4, #0]
 8011784:	2b2e      	cmp	r3, #46	; 0x2e
 8011786:	d10c      	bne.n	80117a2 <_vfiprintf_r+0x15a>
 8011788:	7863      	ldrb	r3, [r4, #1]
 801178a:	2b2a      	cmp	r3, #42	; 0x2a
 801178c:	d134      	bne.n	80117f8 <_vfiprintf_r+0x1b0>
 801178e:	9b03      	ldr	r3, [sp, #12]
 8011790:	1d1a      	adds	r2, r3, #4
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	9203      	str	r2, [sp, #12]
 8011796:	2b00      	cmp	r3, #0
 8011798:	bfb8      	it	lt
 801179a:	f04f 33ff 	movlt.w	r3, #4294967295
 801179e:	3402      	adds	r4, #2
 80117a0:	9305      	str	r3, [sp, #20]
 80117a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011878 <_vfiprintf_r+0x230>
 80117a6:	7821      	ldrb	r1, [r4, #0]
 80117a8:	2203      	movs	r2, #3
 80117aa:	4650      	mov	r0, sl
 80117ac:	f7ee fd98 	bl	80002e0 <memchr>
 80117b0:	b138      	cbz	r0, 80117c2 <_vfiprintf_r+0x17a>
 80117b2:	9b04      	ldr	r3, [sp, #16]
 80117b4:	eba0 000a 	sub.w	r0, r0, sl
 80117b8:	2240      	movs	r2, #64	; 0x40
 80117ba:	4082      	lsls	r2, r0
 80117bc:	4313      	orrs	r3, r2
 80117be:	3401      	adds	r4, #1
 80117c0:	9304      	str	r3, [sp, #16]
 80117c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80117c6:	4829      	ldr	r0, [pc, #164]	; (801186c <_vfiprintf_r+0x224>)
 80117c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80117cc:	2206      	movs	r2, #6
 80117ce:	f7ee fd87 	bl	80002e0 <memchr>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d03f      	beq.n	8011856 <_vfiprintf_r+0x20e>
 80117d6:	4b26      	ldr	r3, [pc, #152]	; (8011870 <_vfiprintf_r+0x228>)
 80117d8:	bb1b      	cbnz	r3, 8011822 <_vfiprintf_r+0x1da>
 80117da:	9b03      	ldr	r3, [sp, #12]
 80117dc:	3307      	adds	r3, #7
 80117de:	f023 0307 	bic.w	r3, r3, #7
 80117e2:	3308      	adds	r3, #8
 80117e4:	9303      	str	r3, [sp, #12]
 80117e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117e8:	443b      	add	r3, r7
 80117ea:	9309      	str	r3, [sp, #36]	; 0x24
 80117ec:	e768      	b.n	80116c0 <_vfiprintf_r+0x78>
 80117ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80117f2:	460c      	mov	r4, r1
 80117f4:	2001      	movs	r0, #1
 80117f6:	e7a6      	b.n	8011746 <_vfiprintf_r+0xfe>
 80117f8:	2300      	movs	r3, #0
 80117fa:	3401      	adds	r4, #1
 80117fc:	9305      	str	r3, [sp, #20]
 80117fe:	4619      	mov	r1, r3
 8011800:	f04f 0c0a 	mov.w	ip, #10
 8011804:	4620      	mov	r0, r4
 8011806:	f810 2b01 	ldrb.w	r2, [r0], #1
 801180a:	3a30      	subs	r2, #48	; 0x30
 801180c:	2a09      	cmp	r2, #9
 801180e:	d903      	bls.n	8011818 <_vfiprintf_r+0x1d0>
 8011810:	2b00      	cmp	r3, #0
 8011812:	d0c6      	beq.n	80117a2 <_vfiprintf_r+0x15a>
 8011814:	9105      	str	r1, [sp, #20]
 8011816:	e7c4      	b.n	80117a2 <_vfiprintf_r+0x15a>
 8011818:	fb0c 2101 	mla	r1, ip, r1, r2
 801181c:	4604      	mov	r4, r0
 801181e:	2301      	movs	r3, #1
 8011820:	e7f0      	b.n	8011804 <_vfiprintf_r+0x1bc>
 8011822:	ab03      	add	r3, sp, #12
 8011824:	9300      	str	r3, [sp, #0]
 8011826:	462a      	mov	r2, r5
 8011828:	4b12      	ldr	r3, [pc, #72]	; (8011874 <_vfiprintf_r+0x22c>)
 801182a:	a904      	add	r1, sp, #16
 801182c:	4630      	mov	r0, r6
 801182e:	f7fd fc33 	bl	800f098 <_printf_float>
 8011832:	4607      	mov	r7, r0
 8011834:	1c78      	adds	r0, r7, #1
 8011836:	d1d6      	bne.n	80117e6 <_vfiprintf_r+0x19e>
 8011838:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801183a:	07d9      	lsls	r1, r3, #31
 801183c:	d405      	bmi.n	801184a <_vfiprintf_r+0x202>
 801183e:	89ab      	ldrh	r3, [r5, #12]
 8011840:	059a      	lsls	r2, r3, #22
 8011842:	d402      	bmi.n	801184a <_vfiprintf_r+0x202>
 8011844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011846:	f7fe f984 	bl	800fb52 <__retarget_lock_release_recursive>
 801184a:	89ab      	ldrh	r3, [r5, #12]
 801184c:	065b      	lsls	r3, r3, #25
 801184e:	f53f af1d 	bmi.w	801168c <_vfiprintf_r+0x44>
 8011852:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011854:	e71c      	b.n	8011690 <_vfiprintf_r+0x48>
 8011856:	ab03      	add	r3, sp, #12
 8011858:	9300      	str	r3, [sp, #0]
 801185a:	462a      	mov	r2, r5
 801185c:	4b05      	ldr	r3, [pc, #20]	; (8011874 <_vfiprintf_r+0x22c>)
 801185e:	a904      	add	r1, sp, #16
 8011860:	4630      	mov	r0, r6
 8011862:	f7fd fea1 	bl	800f5a8 <_printf_i>
 8011866:	e7e4      	b.n	8011832 <_vfiprintf_r+0x1ea>
 8011868:	08011f3c 	.word	0x08011f3c
 801186c:	08011f46 	.word	0x08011f46
 8011870:	0800f099 	.word	0x0800f099
 8011874:	08011625 	.word	0x08011625
 8011878:	08011f42 	.word	0x08011f42

0801187c <__swbuf_r>:
 801187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187e:	460e      	mov	r6, r1
 8011880:	4614      	mov	r4, r2
 8011882:	4605      	mov	r5, r0
 8011884:	b118      	cbz	r0, 801188e <__swbuf_r+0x12>
 8011886:	6a03      	ldr	r3, [r0, #32]
 8011888:	b90b      	cbnz	r3, 801188e <__swbuf_r+0x12>
 801188a:	f7fe f829 	bl	800f8e0 <__sinit>
 801188e:	69a3      	ldr	r3, [r4, #24]
 8011890:	60a3      	str	r3, [r4, #8]
 8011892:	89a3      	ldrh	r3, [r4, #12]
 8011894:	071a      	lsls	r2, r3, #28
 8011896:	d525      	bpl.n	80118e4 <__swbuf_r+0x68>
 8011898:	6923      	ldr	r3, [r4, #16]
 801189a:	b31b      	cbz	r3, 80118e4 <__swbuf_r+0x68>
 801189c:	6823      	ldr	r3, [r4, #0]
 801189e:	6922      	ldr	r2, [r4, #16]
 80118a0:	1a98      	subs	r0, r3, r2
 80118a2:	6963      	ldr	r3, [r4, #20]
 80118a4:	b2f6      	uxtb	r6, r6
 80118a6:	4283      	cmp	r3, r0
 80118a8:	4637      	mov	r7, r6
 80118aa:	dc04      	bgt.n	80118b6 <__swbuf_r+0x3a>
 80118ac:	4621      	mov	r1, r4
 80118ae:	4628      	mov	r0, r5
 80118b0:	f7ff fdac 	bl	801140c <_fflush_r>
 80118b4:	b9e0      	cbnz	r0, 80118f0 <__swbuf_r+0x74>
 80118b6:	68a3      	ldr	r3, [r4, #8]
 80118b8:	3b01      	subs	r3, #1
 80118ba:	60a3      	str	r3, [r4, #8]
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	1c5a      	adds	r2, r3, #1
 80118c0:	6022      	str	r2, [r4, #0]
 80118c2:	701e      	strb	r6, [r3, #0]
 80118c4:	6962      	ldr	r2, [r4, #20]
 80118c6:	1c43      	adds	r3, r0, #1
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d004      	beq.n	80118d6 <__swbuf_r+0x5a>
 80118cc:	89a3      	ldrh	r3, [r4, #12]
 80118ce:	07db      	lsls	r3, r3, #31
 80118d0:	d506      	bpl.n	80118e0 <__swbuf_r+0x64>
 80118d2:	2e0a      	cmp	r6, #10
 80118d4:	d104      	bne.n	80118e0 <__swbuf_r+0x64>
 80118d6:	4621      	mov	r1, r4
 80118d8:	4628      	mov	r0, r5
 80118da:	f7ff fd97 	bl	801140c <_fflush_r>
 80118de:	b938      	cbnz	r0, 80118f0 <__swbuf_r+0x74>
 80118e0:	4638      	mov	r0, r7
 80118e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e4:	4621      	mov	r1, r4
 80118e6:	4628      	mov	r0, r5
 80118e8:	f000 f806 	bl	80118f8 <__swsetup_r>
 80118ec:	2800      	cmp	r0, #0
 80118ee:	d0d5      	beq.n	801189c <__swbuf_r+0x20>
 80118f0:	f04f 37ff 	mov.w	r7, #4294967295
 80118f4:	e7f4      	b.n	80118e0 <__swbuf_r+0x64>
	...

080118f8 <__swsetup_r>:
 80118f8:	b538      	push	{r3, r4, r5, lr}
 80118fa:	4b2a      	ldr	r3, [pc, #168]	; (80119a4 <__swsetup_r+0xac>)
 80118fc:	4605      	mov	r5, r0
 80118fe:	6818      	ldr	r0, [r3, #0]
 8011900:	460c      	mov	r4, r1
 8011902:	b118      	cbz	r0, 801190c <__swsetup_r+0x14>
 8011904:	6a03      	ldr	r3, [r0, #32]
 8011906:	b90b      	cbnz	r3, 801190c <__swsetup_r+0x14>
 8011908:	f7fd ffea 	bl	800f8e0 <__sinit>
 801190c:	89a3      	ldrh	r3, [r4, #12]
 801190e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011912:	0718      	lsls	r0, r3, #28
 8011914:	d422      	bmi.n	801195c <__swsetup_r+0x64>
 8011916:	06d9      	lsls	r1, r3, #27
 8011918:	d407      	bmi.n	801192a <__swsetup_r+0x32>
 801191a:	2309      	movs	r3, #9
 801191c:	602b      	str	r3, [r5, #0]
 801191e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011922:	81a3      	strh	r3, [r4, #12]
 8011924:	f04f 30ff 	mov.w	r0, #4294967295
 8011928:	e034      	b.n	8011994 <__swsetup_r+0x9c>
 801192a:	0758      	lsls	r0, r3, #29
 801192c:	d512      	bpl.n	8011954 <__swsetup_r+0x5c>
 801192e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011930:	b141      	cbz	r1, 8011944 <__swsetup_r+0x4c>
 8011932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011936:	4299      	cmp	r1, r3
 8011938:	d002      	beq.n	8011940 <__swsetup_r+0x48>
 801193a:	4628      	mov	r0, r5
 801193c:	f7fe ff0c 	bl	8010758 <_free_r>
 8011940:	2300      	movs	r3, #0
 8011942:	6363      	str	r3, [r4, #52]	; 0x34
 8011944:	89a3      	ldrh	r3, [r4, #12]
 8011946:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801194a:	81a3      	strh	r3, [r4, #12]
 801194c:	2300      	movs	r3, #0
 801194e:	6063      	str	r3, [r4, #4]
 8011950:	6923      	ldr	r3, [r4, #16]
 8011952:	6023      	str	r3, [r4, #0]
 8011954:	89a3      	ldrh	r3, [r4, #12]
 8011956:	f043 0308 	orr.w	r3, r3, #8
 801195a:	81a3      	strh	r3, [r4, #12]
 801195c:	6923      	ldr	r3, [r4, #16]
 801195e:	b94b      	cbnz	r3, 8011974 <__swsetup_r+0x7c>
 8011960:	89a3      	ldrh	r3, [r4, #12]
 8011962:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801196a:	d003      	beq.n	8011974 <__swsetup_r+0x7c>
 801196c:	4621      	mov	r1, r4
 801196e:	4628      	mov	r0, r5
 8011970:	f000 f884 	bl	8011a7c <__smakebuf_r>
 8011974:	89a0      	ldrh	r0, [r4, #12]
 8011976:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801197a:	f010 0301 	ands.w	r3, r0, #1
 801197e:	d00a      	beq.n	8011996 <__swsetup_r+0x9e>
 8011980:	2300      	movs	r3, #0
 8011982:	60a3      	str	r3, [r4, #8]
 8011984:	6963      	ldr	r3, [r4, #20]
 8011986:	425b      	negs	r3, r3
 8011988:	61a3      	str	r3, [r4, #24]
 801198a:	6923      	ldr	r3, [r4, #16]
 801198c:	b943      	cbnz	r3, 80119a0 <__swsetup_r+0xa8>
 801198e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011992:	d1c4      	bne.n	801191e <__swsetup_r+0x26>
 8011994:	bd38      	pop	{r3, r4, r5, pc}
 8011996:	0781      	lsls	r1, r0, #30
 8011998:	bf58      	it	pl
 801199a:	6963      	ldrpl	r3, [r4, #20]
 801199c:	60a3      	str	r3, [r4, #8]
 801199e:	e7f4      	b.n	801198a <__swsetup_r+0x92>
 80119a0:	2000      	movs	r0, #0
 80119a2:	e7f7      	b.n	8011994 <__swsetup_r+0x9c>
 80119a4:	24000168 	.word	0x24000168

080119a8 <_raise_r>:
 80119a8:	291f      	cmp	r1, #31
 80119aa:	b538      	push	{r3, r4, r5, lr}
 80119ac:	4604      	mov	r4, r0
 80119ae:	460d      	mov	r5, r1
 80119b0:	d904      	bls.n	80119bc <_raise_r+0x14>
 80119b2:	2316      	movs	r3, #22
 80119b4:	6003      	str	r3, [r0, #0]
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ba:	bd38      	pop	{r3, r4, r5, pc}
 80119bc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80119be:	b112      	cbz	r2, 80119c6 <_raise_r+0x1e>
 80119c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119c4:	b94b      	cbnz	r3, 80119da <_raise_r+0x32>
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 f830 	bl	8011a2c <_getpid_r>
 80119cc:	462a      	mov	r2, r5
 80119ce:	4601      	mov	r1, r0
 80119d0:	4620      	mov	r0, r4
 80119d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119d6:	f000 b817 	b.w	8011a08 <_kill_r>
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d00a      	beq.n	80119f4 <_raise_r+0x4c>
 80119de:	1c59      	adds	r1, r3, #1
 80119e0:	d103      	bne.n	80119ea <_raise_r+0x42>
 80119e2:	2316      	movs	r3, #22
 80119e4:	6003      	str	r3, [r0, #0]
 80119e6:	2001      	movs	r0, #1
 80119e8:	e7e7      	b.n	80119ba <_raise_r+0x12>
 80119ea:	2400      	movs	r4, #0
 80119ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80119f0:	4628      	mov	r0, r5
 80119f2:	4798      	blx	r3
 80119f4:	2000      	movs	r0, #0
 80119f6:	e7e0      	b.n	80119ba <_raise_r+0x12>

080119f8 <raise>:
 80119f8:	4b02      	ldr	r3, [pc, #8]	; (8011a04 <raise+0xc>)
 80119fa:	4601      	mov	r1, r0
 80119fc:	6818      	ldr	r0, [r3, #0]
 80119fe:	f7ff bfd3 	b.w	80119a8 <_raise_r>
 8011a02:	bf00      	nop
 8011a04:	24000168 	.word	0x24000168

08011a08 <_kill_r>:
 8011a08:	b538      	push	{r3, r4, r5, lr}
 8011a0a:	4d07      	ldr	r5, [pc, #28]	; (8011a28 <_kill_r+0x20>)
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	4604      	mov	r4, r0
 8011a10:	4608      	mov	r0, r1
 8011a12:	4611      	mov	r1, r2
 8011a14:	602b      	str	r3, [r5, #0]
 8011a16:	f7f0 fe45 	bl	80026a4 <_kill>
 8011a1a:	1c43      	adds	r3, r0, #1
 8011a1c:	d102      	bne.n	8011a24 <_kill_r+0x1c>
 8011a1e:	682b      	ldr	r3, [r5, #0]
 8011a20:	b103      	cbz	r3, 8011a24 <_kill_r+0x1c>
 8011a22:	6023      	str	r3, [r4, #0]
 8011a24:	bd38      	pop	{r3, r4, r5, pc}
 8011a26:	bf00      	nop
 8011a28:	240037d0 	.word	0x240037d0

08011a2c <_getpid_r>:
 8011a2c:	f7f0 be32 	b.w	8002694 <_getpid>

08011a30 <__swhatbuf_r>:
 8011a30:	b570      	push	{r4, r5, r6, lr}
 8011a32:	460c      	mov	r4, r1
 8011a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a38:	2900      	cmp	r1, #0
 8011a3a:	b096      	sub	sp, #88	; 0x58
 8011a3c:	4615      	mov	r5, r2
 8011a3e:	461e      	mov	r6, r3
 8011a40:	da0d      	bge.n	8011a5e <__swhatbuf_r+0x2e>
 8011a42:	89a3      	ldrh	r3, [r4, #12]
 8011a44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011a48:	f04f 0100 	mov.w	r1, #0
 8011a4c:	bf0c      	ite	eq
 8011a4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011a52:	2340      	movne	r3, #64	; 0x40
 8011a54:	2000      	movs	r0, #0
 8011a56:	6031      	str	r1, [r6, #0]
 8011a58:	602b      	str	r3, [r5, #0]
 8011a5a:	b016      	add	sp, #88	; 0x58
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	466a      	mov	r2, sp
 8011a60:	f000 f848 	bl	8011af4 <_fstat_r>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	dbec      	blt.n	8011a42 <__swhatbuf_r+0x12>
 8011a68:	9901      	ldr	r1, [sp, #4]
 8011a6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011a6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011a72:	4259      	negs	r1, r3
 8011a74:	4159      	adcs	r1, r3
 8011a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a7a:	e7eb      	b.n	8011a54 <__swhatbuf_r+0x24>

08011a7c <__smakebuf_r>:
 8011a7c:	898b      	ldrh	r3, [r1, #12]
 8011a7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011a80:	079d      	lsls	r5, r3, #30
 8011a82:	4606      	mov	r6, r0
 8011a84:	460c      	mov	r4, r1
 8011a86:	d507      	bpl.n	8011a98 <__smakebuf_r+0x1c>
 8011a88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011a8c:	6023      	str	r3, [r4, #0]
 8011a8e:	6123      	str	r3, [r4, #16]
 8011a90:	2301      	movs	r3, #1
 8011a92:	6163      	str	r3, [r4, #20]
 8011a94:	b002      	add	sp, #8
 8011a96:	bd70      	pop	{r4, r5, r6, pc}
 8011a98:	ab01      	add	r3, sp, #4
 8011a9a:	466a      	mov	r2, sp
 8011a9c:	f7ff ffc8 	bl	8011a30 <__swhatbuf_r>
 8011aa0:	9900      	ldr	r1, [sp, #0]
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	f7fe fecb 	bl	8010840 <_malloc_r>
 8011aaa:	b948      	cbnz	r0, 8011ac0 <__smakebuf_r+0x44>
 8011aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ab0:	059a      	lsls	r2, r3, #22
 8011ab2:	d4ef      	bmi.n	8011a94 <__smakebuf_r+0x18>
 8011ab4:	f023 0303 	bic.w	r3, r3, #3
 8011ab8:	f043 0302 	orr.w	r3, r3, #2
 8011abc:	81a3      	strh	r3, [r4, #12]
 8011abe:	e7e3      	b.n	8011a88 <__smakebuf_r+0xc>
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	6020      	str	r0, [r4, #0]
 8011ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ac8:	81a3      	strh	r3, [r4, #12]
 8011aca:	9b00      	ldr	r3, [sp, #0]
 8011acc:	6163      	str	r3, [r4, #20]
 8011ace:	9b01      	ldr	r3, [sp, #4]
 8011ad0:	6120      	str	r0, [r4, #16]
 8011ad2:	b15b      	cbz	r3, 8011aec <__smakebuf_r+0x70>
 8011ad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ad8:	4630      	mov	r0, r6
 8011ada:	f000 f81d 	bl	8011b18 <_isatty_r>
 8011ade:	b128      	cbz	r0, 8011aec <__smakebuf_r+0x70>
 8011ae0:	89a3      	ldrh	r3, [r4, #12]
 8011ae2:	f023 0303 	bic.w	r3, r3, #3
 8011ae6:	f043 0301 	orr.w	r3, r3, #1
 8011aea:	81a3      	strh	r3, [r4, #12]
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	431d      	orrs	r5, r3
 8011af0:	81a5      	strh	r5, [r4, #12]
 8011af2:	e7cf      	b.n	8011a94 <__smakebuf_r+0x18>

08011af4 <_fstat_r>:
 8011af4:	b538      	push	{r3, r4, r5, lr}
 8011af6:	4d07      	ldr	r5, [pc, #28]	; (8011b14 <_fstat_r+0x20>)
 8011af8:	2300      	movs	r3, #0
 8011afa:	4604      	mov	r4, r0
 8011afc:	4608      	mov	r0, r1
 8011afe:	4611      	mov	r1, r2
 8011b00:	602b      	str	r3, [r5, #0]
 8011b02:	f7f0 fe2e 	bl	8002762 <_fstat>
 8011b06:	1c43      	adds	r3, r0, #1
 8011b08:	d102      	bne.n	8011b10 <_fstat_r+0x1c>
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	b103      	cbz	r3, 8011b10 <_fstat_r+0x1c>
 8011b0e:	6023      	str	r3, [r4, #0]
 8011b10:	bd38      	pop	{r3, r4, r5, pc}
 8011b12:	bf00      	nop
 8011b14:	240037d0 	.word	0x240037d0

08011b18 <_isatty_r>:
 8011b18:	b538      	push	{r3, r4, r5, lr}
 8011b1a:	4d06      	ldr	r5, [pc, #24]	; (8011b34 <_isatty_r+0x1c>)
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4604      	mov	r4, r0
 8011b20:	4608      	mov	r0, r1
 8011b22:	602b      	str	r3, [r5, #0]
 8011b24:	f7f0 fe2d 	bl	8002782 <_isatty>
 8011b28:	1c43      	adds	r3, r0, #1
 8011b2a:	d102      	bne.n	8011b32 <_isatty_r+0x1a>
 8011b2c:	682b      	ldr	r3, [r5, #0]
 8011b2e:	b103      	cbz	r3, 8011b32 <_isatty_r+0x1a>
 8011b30:	6023      	str	r3, [r4, #0]
 8011b32:	bd38      	pop	{r3, r4, r5, pc}
 8011b34:	240037d0 	.word	0x240037d0

08011b38 <_init>:
 8011b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b3a:	bf00      	nop
 8011b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b3e:	bc08      	pop	{r3}
 8011b40:	469e      	mov	lr, r3
 8011b42:	4770      	bx	lr

08011b44 <_fini>:
 8011b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b46:	bf00      	nop
 8011b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b4a:	bc08      	pop	{r3}
 8011b4c:	469e      	mov	lr, r3
 8011b4e:	4770      	bx	lr
